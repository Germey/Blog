<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>静觅</title>
  
  <subtitle>崔庆才的个人站点 - Python爬虫教程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cuiqingcai.com/"/>
  <updated>2025-08-11T15:24:05.272Z</updated>
  <id>https://cuiqingcai.com/</id>
  
  <author>
    <name>崔庆才</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flux Images Generation API 对接说明</title>
    <link href="https://cuiqingcai.com/42375.html"/>
    <id>https://cuiqingcai.com/42375.html</id>
    <published>2025-08-11T15:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.272Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍一种 Flux Images Generation API 对接说明，它是可以通过输入自定义参数来生成Flux官方的图片。</p><p>接下来介绍下 Flux Images Generation API 的对接说明。</p><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>要使用 API，需要先到 <a href="https://platform.acedata.cloud/documents/6b9197c5-7a3f-4878-a43f-7f94e7e66394" target="_blank" rel="noopener">Flux Images Generation API</a> 对应页面申请对应的服务，进入页面之后，点击「Acquire」按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/q6ytrc.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先先了解下基本的使用方式，就是输入提示词 <code>prompt</code>、 生成行为 <code>action</code>、图片尺寸 <code>size</code>，便可获得处理后的结果，首先需要简单地传递一个 <code>action</code> 字段，它的值为 <code>generate</code>，然后我们还需要输入提示词，具体的内容如下：</p><p><img src="https://cdn.acedata.cloud/wz85jt.png" width="500" class="m-auto"></p><p>可以看到这里我们设置了 Request Headers，包括：</p><ul>  <li><code>accept</code>：想要接收怎样格式的响应结果，这里填写为 <code>application/json</code>，即 JSON 格式。</li>  <li><code>authorization</code>：调用 API 的密钥，申请之后可以直接下拉选择。</li></ul><p>另外设置了 Request Body，包括：</p><ul>  <li><code>action</code>：此次图片生成任务的行为。</li>  <li><code>size</code>：图片生成结果的尺寸大小。</li>  <li><code>count</code>：生成图片的数量，默认值是1，该参数只有在生成图片任务有效，编辑任务是无效的。</li>  <li><code>prompt</code>：提示词。</li>  <li><code>callback_url</code>：需要回调结果的URL。</li></ul><p>选择之后，可以发现右侧也生成了对应代码，如图所示：</p><p><img src="https://cdn.acedata.cloud/8q7aux.png" width="500" class="m-auto"></p><p>点击「Try」按钮即可进行测试，如上图所示，这里我们就得到了如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"226eb763-9eab-4d06-ad57-d59753a03307"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"089f8b46-0167-4f25-88ee-3c3f88d80e84"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"a white siamese cat"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://fal.media/files/lion/NVhtlwwGYQD6HrGaEfrzu_341484fad6d84b21b73f4f8824a3f98a.png"</span>,</span><br><span class="line">      <span class="attr">"timings"</span>: <span class="number">1752743801</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"a white siamese cat"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://fal.media/files/monkey/8UEQpFbQCYVOK1wKP3aV0_9bbc26fad64049b18d0244b99ef66ad1.png"</span>,</span><br><span class="line">      <span class="attr">"timings"</span>: <span class="number">1752743801</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>返回结果一共有多个字段，介绍如下：</p><ul>  <li><code>success</code>，此时视频生成任务的状态情况。</li>  <li><code>task_id</code>，此时视频生成任务ID。</li>  <li><code>trace_id</code>，此时视频生成跟踪ID。</li>  <li><code>data</code>，此时图像生成任务的结果列表。<ul>      <li><code>image_url</code>，此时图片生成任务的链接。</li>      <li><code>prompt</code>，提示词。</li>    </ul>  </li></ul><p>可以看到我们得到了满意的图片信息，我们只需要根据结果中 <code>data</code> 的图片链接地址获取生成的Flux图片即可。</p><p>另外如果想生成对应的对接代码，可以直接复制生成，例如 CURL 的代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/flux/images' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "generate",</span><br><span class="line">  "prompt": "a white siamese cat",</span><br><span class="line">  "model": "flux-kontext-pro",</span><br><span class="line">  "count": 2</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><h2 id="编辑图片任务"><a href="#编辑图片任务" class="headerlink" title="编辑图片任务"></a>编辑图片任务</h2><p>如果想对某张图片进行编辑的话， 首先参数<code>image_url</code>必须传入需要编辑的图片链接，此时 <code>action</code> 只支持 <code>edits</code>，就可以指定如下内容：</p><ul>  <li>model：此次编辑图片任务所采用的模型，该任务目前支持 <code>flux-kontext-max</code>、 <code>flux-kontext-pro</code>。</li>  <li>image_url：上传需要编辑的图片。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/jn9da5.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/6cwxb8.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.acedata.cloud/flux/images"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"authorization"</span>: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"edits"</span>,</span><br><span class="line">    <span class="string">"prompt"</span>: <span class="string">"a white siamese cat"</span>,</span><br><span class="line">    <span class="string">"model"</span>: <span class="string">"flux-kontext-pro"</span>,</span><br><span class="line">    <span class="string">"image_url"</span>: <span class="string">"https://cdn.acedata.cloud/ytj2qy.png"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre>      </td>    </tr>  </table></figure><p>点击运行，可以发现会立即得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"2a7979ff-1f77-4380-92c6-a2dc37c3b4c8"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"732b65c0-48d9-49f7-b568-64e5acffe4c0"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"a white siamese cat"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://fal.media/files/monkey/aEUXJZ6Faj9YXUCQVs01Q_af0cea56c558441c9ba8df67b200812d.png"</span>,</span><br><span class="line">      <span class="attr">"timings"</span>: <span class="number">1752744073</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，生成的效果是对原图片进行编辑的效果，结果与上文类似。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Flux Images Generation API 生成的时间相对较长，大约需要 1-2 分钟，如果 API 长时间无响应，HTTP 请求会一直保持连接，导致额外的系统资源消耗，所以本 API 也提供了异步回调的支持。</p><p>整体流程是：客户端发起请求的时候，额外指定一个 <code>callback_url</code> 字段，客户端发起 API 请求之后，API 会立马返回一个结果，包含一个 <code>task_id</code> 的字段信息，代表当前的任务 ID。当任务完成之后，生成图片的结果会通过 POST JSON 的形式发送到客户端指定的 <code>callback_url</code>，其中也包括了 <code>task_id</code> 字段，这样任务结果就可以通过 ID 关联起来了。</p><p>下面我们通过示例来了解下具体怎样操作。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/，打开该网站即可得到一个" target="_blank" rel="noopener">https://webhook.site/，打开该网站即可得到一个</a> Webhook URL，如图所示：</p><p><img src="https://cdn.acedata.cloud/cjjfly.png" alt=""></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <code>https://webhook.site/3d32690d-6780-4187-a65c-870061e8c8ab</code>。</p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入相应的参数，具体的内容如图所示：</p><p><img src="https://cdn.acedata.cloud/wm6caw.png" width="500" class="m-auto"></p><p>点击运行，可以发现会立即得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"6a97bf49-df50-4129-9e46-119aa9fca73c"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>稍等片刻，我们可以在 <code>https://webhook.site/3d32690d-6780-4187-a65c-870061e8c8ab</code> 上观察到生成图片的结果，如图所示：</p><p><img src="https://cdn.acedata.cloud/v23lot.png" alt=""></p><p>内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"6a97bf49-df50-4129-9e46-119aa9fca73c"</span>,</span><br><span class="line">    <span class="attr">"trace_id"</span>: <span class="string">"9b4b1ff3-90f2-470f-b082-1061ec2948cc"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"prompt"</span>: <span class="string">"a white siamese cat"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://sf-maas-uat-prod.oss-cn-shanghai.aliyuncs.com/outputs/f4f8d407-377a-408a-82d0-427a5a836f09_0.png"</span>,</span><br><span class="line">            <span class="attr">"seed"</span>: <span class="number">1698551532</span>,</span><br><span class="line">            <span class="attr">"timings"</span>: &#123;</span><br><span class="line">                <span class="attr">"inference"</span>: <span class="number">3.328</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到结果中有一个 <code>task_id</code> 字段，其他的字段都和上文类似，通过该字段即可实现任务的关联。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在调用 API 时，如果遇到错误，API 会返回相应的错误代码和信息。例如：</p><ul>  <li><code>400 token_mismatched</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>400 api_not_implemented</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>401 invalid_token</code>：Unauthorized, invalid or missing authorization token.</li>  <li><code>429 too_many_requests</code>：Too many requests, you have exceeded the rate limit.</li>  <li><code>500 api_error</code>：Internal server error, something went wrong on the server.</li></ul><h3 id="错误响应示例"><a href="#错误响应示例" class="headerlink" title="错误响应示例"></a>错误响应示例</h3><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"api_error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"fetch failed"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"2cf86e86-22a4-46e1-ac2f-032c0f2a4e89"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过本文档，您已经了解了如何使用 Flux Images Generation API 可通过输入提示词来生成图片。希望本文档能帮助您更好地对接和使用该 API。如有任何问题，请随时联系我们的技术支持团队。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍一种 Flux Images Generation API 对接说明，它是可以通过输入自定义参数来生成Flux官方的图片。&lt;/p&gt;
&lt;p&gt;接下来介绍下 Flux Images Generation API 的对接说明。&lt;/p&gt;
&lt;h2 id=&quot;申请流程&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="API" scheme="https://cuiqingcai.com/categories/API/"/>
    
    
      <category term="Flux" scheme="https://cuiqingcai.com/tags/Flux/"/>
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Hailuo Videos Generation API 对接说明</title>
    <link href="https://cuiqingcai.com/42374.html"/>
    <id>https://cuiqingcai.com/42374.html</id>
    <published>2025-08-06T11:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.273Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍一种 Hailuo Videos Generation API 对接说明，它是可以通过输入自定义参数来生成Hailuo官方的视频。</p><p>接下来介绍下 Hailuo Videos Generation API 的对接说明。</p><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>要使用 API，需要先到 <a href="https://platform.acedata.cloud/documents/ee06377b-9185-438f-ac84-3376bcb1275e" target="_blank" rel="noopener">Hailuo Videos Generation API</a> 对应页面申请对应的服务，进入页面之后，点击「Acquire」按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/q6ytrc.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先先了解下基本的使用方式，就是输入提示词 <code>prompt</code>、 生成行为 <code>action</code>、首帧参考图片 <code>first_image_url</code> 以及模型 <code>model</code>，便可获得处理后的结果，首先需要简单地传递一个 <code>action</code> 字段，它的值为 <code>generate</code>，然后我们还需要输入模型，目前主要有图生视频模型 <code>minimax-i2v</code> 和文生视频模型 <code>minimax-t2v</code>，具体的内容如下：</p><p><img src="https://cdn.acedata.cloud/7jyu0n.png" width="500" class="m-auto"></p><p>可以看到这里我们设置了 Request Headers，包括：</p><ul>  <li><code>accept</code>：想要接收怎样格式的响应结果，这里填写为 <code>application/json</code>，即 JSON 格式。</li>  <li><code>authorization</code>：调用 API 的密钥，申请之后可以直接下拉选择。</li></ul><p>另外设置了 Request Body，包括：</p><ul>  <li><code>model</code>：生成视频的模型，主要有图生视频模型 <code>minimax-i2v</code> 和文生视频模型 <code>minimax-t2v</code> 俩种。</li>  <li><code>action</code>：此次视频生成任务的行为。</li>  <li><code>first_image_url</code>：当选择图生视频模型 <code>minimax-i2v</code> 就必须需要上传的首帧参考图片链接，不支持Base64编码。</li>  <li><code>prompt</code>：提示词。</li>  <li><code>callback_url</code>：需要回调结果的URL。</li></ul><p>选择之后，可以发现右侧也生成了对应代码，如图所示：</p><p><img src="https://cdn.acedata.cloud/8psuxw.png" width="500" class="m-auto"></p><p>点击「Try」按钮即可进行测试，如上图所示，这里我们就得到了如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"baf1034c-684c-46be-ae6d-89ebb89b690d"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"3221eb74-1a25-447a-ba69-7d9b310e306c"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"0pv8yhe4fdrge0cmckpv23pd2g"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"minimax-t2v"</span>,</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"Internal heat"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://file.aigpai.com/czjl/qoueLWBokF3ud6tdVD6VJTZuXTnK5HaMO2qAOS46Ef8VSBFUA/tmp9e3u11c1.output.mp4"</span>,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>返回结果一共有多个字段，介绍如下：</p><ul>  <li><code>success</code>，此时视频生成任务的状态情况。</li>  <li><code>task_id</code>，此时视频生成任务ID。</li>  <li><code>trace_id</code>，此时视频生成跟踪ID。</li>  <li><code>data</code>，此时视频生成任务的结果列表。<ul>      <li><code>id</code>，此时视频生成任务的视频ID。</li>      <li><code>prompt</code>，此时视频生成任务的提示词。</li>      <li><code>model</code>，此时视频生成任务的封面链接。</li>      <li><code>video_url</code>，此时视频生成任务的视频链接。</li>      <li><code>state</code>，此时视频生成任务的状态。</li>    </ul>  </li></ul><p>可以看到我们得到了满意的视频信息，我们只需要根据结果中 <code>data</code> 的视频链接地址获取生成的Hailuo视频即可。</p><p>另外如果想生成对应的对接代码，可以直接复制生成，例如 CURL 的代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/hailuo/videos' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "generate",</span><br><span class="line">  "prompt": "Internal heat"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Hailuo Videos Generation API生成的时间相对较长，大约需要 1-2 分钟，如果 API 长时间无响应，HTTP 请求会一直保持连接，导致额外的系统资源消耗，所以本 API 也提供了异步回调的支持。</p><p>整体流程是：客户端发起请求的时候，额外指定一个 <code>callback_url</code> 字段，客户端发起 API 请求之后，API 会立马返回一个结果，包含一个 <code>task_id</code> 的字段信息，代表当前的任务 ID。当任务完成之后，生成视频的结果会通过 POST JSON 的形式发送到客户端指定的 <code>callback_url</code>，其中也包括了 <code>task_id</code> 字段，这样任务结果就可以通过 ID 关联起来了。</p><p>下面我们通过示例来了解下具体怎样操作。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/，打开该网站即可得到一个" target="_blank" rel="noopener">https://webhook.site/，打开该网站即可得到一个</a> Webhook URL，如图所示：</p><p><img src="https://cdn.acedata.cloud/cjjfly.png" alt=""></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <code>https://webhook.site/580b81f5-596e-4321-b03f-606770b0bb83</code>。</p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入相应的参数，具体的内容如图所示：</p><p><img src="https://cdn.acedata.cloud/odabh3.png" width="500" class="m-auto"></p><p>点击运行，可以发现会立即得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"05aff65c-5e84-442b-8e29-3a5d27130840"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>稍等片刻，我们可以在 <code>https://webhook.site/580b81f5-596e-4321-b03f-606770b0bb83</code> 上观察到生成视频的结果，如图所示：</p><p><img src="https://cdn.acedata.cloud/7jngb4.png" alt=""></p><p>内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"05aff65c-5e84-442b-8e29-3a5d27130840"</span>,</span><br><span class="line">    <span class="attr">"trace_id"</span>: <span class="string">"b9856b8a-725d-45c9-befe-e789d9fd9ffb"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"t80jhsf96srg80cmcm6b0rk8gm"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="string">"minimax-t2v"</span>,</span><br><span class="line">            <span class="attr">"prompt"</span>: <span class="string">"Internal heat"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="string">"https://file.aigpai.com/czjl/YPaUz2DcwpJqItTXAG9XHAoEoj3dbF0XPU69LT5nefCMzBFUA/tmp8s_59jez.output.mp4"</span>,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到结果中有一个 <code>task_id</code> 字段，其他的字段都和上文类似，通过该字段即可实现任务的关联。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在调用 API 时，如果遇到错误，API 会返回相应的错误代码和信息。例如：</p><ul>  <li><code>400 token_mismatched</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>400 api_not_implemented</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>401 invalid_token</code>：Unauthorized, invalid or missing authorization token.</li>  <li><code>429 too_many_requests</code>：Too many requests, you have exceeded the rate limit.</li>  <li><code>500 api_error</code>：Internal server error, something went wrong on the server.</li></ul><h3 id="错误响应示例"><a href="#错误响应示例" class="headerlink" title="错误响应示例"></a>错误响应示例</h3><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"api_error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"fetch failed"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"2cf86e86-22a4-46e1-ac2f-032c0f2a4e89"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过本文档，您已经了解了如何使用 Hailuo Videos Generation API 可通过输入提示词以及首帧参考图片来生成视频。希望本文档能帮助您更好地对接和使用该 API。如有任何问题，请随时联系我们的技术支持团队。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍一种 Hailuo Videos Generation API 对接说明，它是可以通过输入自定义参数来生成Hailuo官方的视频。&lt;/p&gt;
&lt;p&gt;接下来介绍下 Hailuo Videos Generation API 的对接说明。&lt;/p&gt;
&lt;h2 id=&quot;申请流程
      
    
    </summary>
    
    
      <category term="API" scheme="https://cuiqingcai.com/categories/API/"/>
    
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
      <category term="Hailuo" scheme="https://cuiqingcai.com/tags/Hailuo/"/>
    
  </entry>
  
  <entry>
    <title>Veo Videos Generation API 对接说明</title>
    <link href="https://cuiqingcai.com/42373.html"/>
    <id>https://cuiqingcai.com/42373.html</id>
    <published>2025-08-05T12:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.287Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍一种 Veo Videos Generation API 对接说明，它是可以通过输入自定义参数来生成Veo官方的视频。</p><p>接下来介绍下 Veo Videos Generation API 的对接说明。</p><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>要使用 API，需要先到 <a href="https://platform.acedata.cloud/documents/63e01dc3-eb21-499e-8049-3025c460058f" target="_blank" rel="noopener">Veo Videos Generation API</a> 对应页面申请对应的服务，进入页面之后，点击「Acquire」按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/q6ytrc.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先先了解下基本的使用方式，就是输入提示词 <code>prompt</code>、 生成行为 <code>action</code>、首尾帧参考图片数组 <code>image_urls</code> 以及模型 <code>model</code>，便可获得处理后的结果，首先需要简单地传递一个 <code>action</code> 字段，它的值为 <code>text2video</code>，它主要包含三种行为：文生视频（<code>text2video</code>）、图生视频（<code>image2video</code>）、获取1080p视频（<code>get_1080p</code>），然后我们还需要输入模型 <code>model</code>，目前主要有 <code>veo2</code> 、<code>veo2-fast</code>、<code>veo3</code> 和 <code>veo3-fast</code> 模型，具体的内容如下：</p><p><img src="https://cdn.acedata.cloud/vv5pe8.png" width="500" class="m-auto"></p><p>可以看到这里我们设置了 Request Headers，包括：</p><ul>  <li><code>accept</code>：想要接收怎样格式的响应结果，这里填写为 <code>application/json</code>，即 JSON 格式。</li>  <li><code>authorization</code>：调用 API 的密钥，申请之后可以直接下拉选择。</li></ul><p>另外设置了 Request Body，包括：</p><ul>  <li><code>model</code>：生成视频的模型，主要有 <code>veo2</code> 、<code>veo2-fast</code>、<code>veo3</code> 和 <code>veo3-fast</code> 模型。</li>  <li><code>action</code>：此次视频生成任务的行为，主要包含三种行为，分别为：文生视频（<code>text2video</code>）、图生视频（<code>image2video</code>）、获取1080p视频（<code>get_1080p</code>）。</li>  <li><code>image_urls</code>：当选择图生视频行为 <code>image2video</code> 就必须需要上传的首尾帧参考图片链接。</li>  <li><code>prompt</code>：提示词。</li>  <li><code>callback_url</code>：需要回调结果的URL。</li></ul><p>选择之后，可以发现右侧也生成了对应代码，如图所示：</p><p><img src="https://cdn.acedata.cloud/pmwh4y.png" width="500" class="m-auto"></p><p>点击「Try」按钮即可进行测试，如上图所示，这里我们就得到了如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"dd01fc69-e1f7-4b68-aa8c-463f6b748d11"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"9906dac0-1516-41dc-9fe3-067ca1ba8269"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"253eedc47f1c4eb2a370ed2312168f4b"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/veo/dd01fc69-e1f7-4b68-aa8c-463f6b748d11.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-07-25 16:07:43"</span>,</span><br><span class="line">      <span class="attr">"complete_at"</span>: <span class="string">"2025-07-25 16:10:28"</span>,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>返回结果一共有多个字段，介绍如下：</p><ul>  <li><code>success</code>，此时视频生成任务的状态情况。</li>  <li><code>task_id</code>，此时视频生成任务ID。</li>  <li><code>data</code>，此时视频生成任务的结果。<ul>      <li><code>id</code>，此时视频生成任务的视频ID。</li>      <li><code>video_url</code>，此时视频生成任务的视频链接。</li>      <li><code>created_at</code>，此时视频生成任务的创建时间。</li>      <li><code>complete_at</code>，此时视频生成任务的完成时间。</li>      <li><code>state</code>，此时视频生成任务的状态。</li>    </ul>  </li></ul><p>可以看到我们得到了满意的视频信息，我们只需要根据结果中 <code>data</code> 的视频链接地址获取生成的Veo视频即可。</p><p>另外如果想生成对应的对接代码，可以直接复制生成，例如 CURL 的代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/veo/videos' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "text2video",</span><br><span class="line">  "model": "veo2",</span><br><span class="line">  "prompt": "White ceramic coffee mug on glossy marble countertop with morning window light. Camera slowly rotates 360 degrees around the mug, pausing briefly at the handle."</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><h2 id="图生视频功能"><a href="#图生视频功能" class="headerlink" title="图生视频功能"></a>图生视频功能</h2><p>如果想根据首尾帧图片进行生成视频的话，可以将参数 <code>action</code> 设置为 <code>image2video</code> ，并且输入首尾帧图片链接数组 <code>image_urls</code>。</p><p>接下来我们要必须填下一步需要扩展的提示词来自定义生成视频，就可以指定如下内容：</p><ul>  <li><code>model</code>：生成视频的模型，主要有<code>veo2</code> 、<code>veo2-fast</code>、<code>veo3</code> 和 <code>veo3-fast</code>。</li>  <li><code>image_urls</code>：当选择图生视频行为 <code>image2video</code> 就必须需要上传的首尾帧参考图片链接。</li>  <li><code>prompt</code>：提示词。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/8wvlqd.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/tgzfxi.png" width="500" class="m-auto"></p><p>对应的 Python 代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.acedata.cloud/veo/videos"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"authorization"</span>: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"image2video"</span>,</span><br><span class="line">    <span class="string">"model"</span>: <span class="string">"veo2"</span>,</span><br><span class="line">    <span class="string">"prompt"</span>: <span class="string">"Let it dance"</span>,</span><br><span class="line">    <span class="string">"image_urls"</span>: [<span class="string">"https://cdn.acedata.cloud/7p1jhy.png"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre>      </td>    </tr>  </table></figure><p>点击运行，可以发现会得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"98e309f3-35bc-438d-8cb3-4015fc864b87"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"8bc68066-36de-41ef-ae5e-b7d61ff6aee8"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"59f12222b1fa4fbe9331ff2400ad1583"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/veo/98e309f3-35bc-438d-8cb3-4015fc864b87.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-07-25 16:13:07"</span>,</span><br><span class="line">      <span class="attr">"complete_at"</span>: <span class="string">"2025-07-25 16:16:12"</span>,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看出，结果内容与上文的是一致的，这也就实现视频的图生视频功能。</p><h2 id="图生视频功能-1"><a href="#图生视频功能-1" class="headerlink" title="图生视频功能"></a>图生视频功能</h2><p>如果想对已经生成的Veo视频获取1080p的话，可以将参数 <code>action</code> 设置为 <code>get_1080p</code> ，并且输入需要获取1080p的视频的 ID，视频 ID 的获取是根据基本使用来获取，如下图所示：</p><p><img src="https://cdn.acedata.cloud/hacabc.png" width="500" class="m-auto"></p><p>这时候可以看到视频的 ID 为：</p><figure class="highlight">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">"id": "59f12222b1fa4fbe9331ff2400ad1583"</span><br></pre>      </td>    </tr>  </table></figure><blockquote>  <p>注意，这里的视频中 <code>video_id</code> 是生成后视频的 ID，如果你不知道如何生成视频，可以参考上文的基本使用来生成视频。</p></blockquote><p>接下来我们要必须填下一步需要扩展的提示词来自定义生成视频，就可以指定如下内容：</p><ul>  <li><code>model</code>：生成视频的模型，主要有 <code>veo2</code> 、<code>veo2-fast</code>、<code>veo3</code> 和 <code>veo3-fast</code>。</li>  <li><code>video_id</code>：参考的视频ID，用于获取1080p的视频。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/k56fhn.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/8gn4cr.png" width="500" class="m-auto"></p><p>点击运行，可以发现会得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"47a51cfe-2e24-4aba-93b3-546c2dc52984"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"a8922eec-6f50-4f77-8104-00ded071d59d"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"59f12222b1fa4fbe9331ff2400ad1583"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/veo/47a51cfe-2e24-4aba-93b3-546c2dc52984.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-07-25 16:13:07"</span>,</span><br><span class="line">      <span class="attr">"complete_at"</span>: <span class="string">"2025-07-25 16:16:12"</span>,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看出，结果内容与上文的是一致的，这也就实现视频的获取1080p视频功能。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Veo Videos Generation API生成的时间相对较长，大约需要 1-2 分钟，如果 API 长时间无响应，HTTP 请求会一直保持连接，导致额外的系统资源消耗，所以本 API 也提供了异步回调的支持。</p><p>整体流程是：客户端发起请求的时候，额外指定一个 <code>callback_url</code> 字段，客户端发起 API 请求之后，API 会立马返回一个结果，包含一个 <code>task_id</code> 的字段信息，代表当前的任务 ID。当任务完成之后，生成视频的结果会通过 POST JSON 的形式发送到客户端指定的 <code>callback_url</code>，其中也包括了 <code>task_id</code> 字段，这样任务结果就可以通过 ID 关联起来了。</p><p>下面我们通过示例来了解下具体怎样操作。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/，打开该网站即可得到一个" target="_blank" rel="noopener">https://webhook.site/，打开该网站即可得到一个</a> Webhook URL，如图所示：</p><p><img src="https://cdn.acedata.cloud/tbcnai.png" alt=""></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <code>https://webhook.site/aed5cd28-f8aa-4dca-9480-8ec9b42137dc</code>。</p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入相应的参数，具体的内容如图所示：</p><p><img src="https://cdn.acedata.cloud/rgivs2.png" width="500" class="m-auto"></p><p>点击运行，可以发现会立即得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"1ebe4f2b-59ba-4385-a4ea-0ce8a3fe12ed"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>稍等片刻，我们可以在 <code>https://webhook.site/aed5cd28-f8aa-4dca-9480-8ec9b42137dc</code> 上观察到生成视频的结果，如图所示：</p><p><img src="https://cdn.acedata.cloud/238i32.png" alt=""></p><p>内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"1ebe4f2b-59ba-4385-a4ea-0ce8a3fe12ed"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"d1d53c04-58c5-4c40-bb63-f00188540e56"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"2f43ceed37944b4d836e1a1899dad0a1"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/veo/1ebe4f2b-59ba-4385-a4ea-0ce8a3fe12ed.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-07-25 17:19:20"</span>,</span><br><span class="line">      <span class="attr">"complete_at"</span>: <span class="string">"2025-07-25 17:21:45"</span>,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到结果中有一个 <code>task_id</code> 字段，其他的字段都和上文类似，通过该字段即可实现任务的关联。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在调用 API 时，如果遇到错误，API 会返回相应的错误代码和信息。例如：</p><ul>  <li><code>400 token_mismatched</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>400 api_not_implemented</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>401 invalid_token</code>：Unauthorized, invalid or missing authorization token.</li>  <li><code>429 too_many_requests</code>：Too many requests, you have exceeded the rate limit.</li>  <li><code>500 api_error</code>：Internal server error, something went wrong on the server.</li></ul><h3 id="错误响应示例"><a href="#错误响应示例" class="headerlink" title="错误响应示例"></a>错误响应示例</h3><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"api_error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"fetch failed"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"2cf86e86-22a4-46e1-ac2f-032c0f2a4e89"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过本文档，您已经了解了如何使用 Veo Videos Generation API 可通过输入提示词以及首帧参考图片来生成视频。希望本文档能帮助您更好地对接和使用该 API。如有任何问题，请随时联系我们的技术支持团队。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍一种 Veo Videos Generation API 对接说明，它是可以通过输入自定义参数来生成Veo官方的视频。&lt;/p&gt;
&lt;p&gt;接下来介绍下 Veo Videos Generation API 的对接说明。&lt;/p&gt;
&lt;h2 id=&quot;申请流程&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="API" scheme="https://cuiqingcai.com/categories/API/"/>
    
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
      <category term="Veo" scheme="https://cuiqingcai.com/tags/Veo/"/>
    
  </entry>
  
  <entry>
    <title>Riffusion Audios Generation API 对接说明</title>
    <link href="https://cuiqingcai.com/42372.html"/>
    <id>https://cuiqingcai.com/42372.html</id>
    <published>2025-06-24T12:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>要使用 API，需要先到 <a href="https://platform.acedata.cloud/documents/riffusion-audios" target="_blank" rel="noopener">Riffusion Audios Generation API</a> 对应页面申请对应的服务，进入页面之后，点击「Acquire」按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/q6ytrc.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>想些什么歌曲，可以任意输入一段文字，比如我想生成一个关于圣诞的歌曲，就可以输入 <code>a song for Christmas</code>，如图所示：</p><p><img src="https://cdn.acedata.cloud/4i4ysn.png" width="600" class="m-auto"></p><p>可以看到这里我们设置了 Request Headers，包括：</p><ul>  <li><code>accept</code>：想要接收怎样格式的响应结果，这里填写为 <code>application/json</code>，即 JSON 格式。</li>  <li><code>authorization</code>：调用 API 的密钥，申请之后可以直接下拉选择。</li></ul><p>另外 Request Body 的参数包括：</p><ul>  <li><code>action</code>：此次音乐生成任务的行为，生成歌曲是 <code>generate</code>。</li>  <li><code>model</code>：创建歌曲采用的模型，目前主要有：<strong>FUZZ-1.0</strong>、<strong>FUZZ-1.1</strong>、<strong>FUZZ-1.0 Pro</strong>、<strong>FUZZ-1.1 Pro</strong>。</li>  <li><code>lyric</code>：歌曲的歌词内容。</li>  <li><code>custom</code>：是否采用自定义方式生成歌曲。</li>  <li><code>prompt</code>：灵感模式下的提示词。</li>  <li><code>style</code>：歌曲风格参数。</li>  <li><code>title</code>：歌曲标题信息。</li>  <li><code>callback_url</code>：需要回调结果的 URL。</li>  <li><code>instrumental</code>：是否为无歌词模式。</li></ul><p>如上参数和官方的自定义生成的映射关系如下：</p><ul>  <li><code>model</code>：对应 Riffusion 账号设置页面的模型选择，如下图所示</li>  <li><code>lyric</code>：对应 Rifussion 自定义生成页面的「Lyrics」部分，如下图所示</li>  <li><code>style</code>：对应 Rifussion 自定义生成页面的「Sound」部分，实际上是指定一些风格，如下图所示</li>  <li><code>title</code>：对应 Rifussion 自定义生成页面的「Details」部分，用于指定歌曲标题，如下图所示</li>  <li><code>instrumental</code>：对应 Rifussion 自定义生成页面的「Instrumental」开关，用于设置无歌词模式，如下图所示</li></ul><p><img src="https://cdn.acedata.cloud/i68847.png" width="500" class="m-auto"></p><p><img src="https://cdn.acedata.cloud/eda26o.png" width="500" class="m-auto"></p><p>选择之后，可以发现右侧也生成了对应代码，如图所示：</p><p><img src="https://cdn.acedata.cloud/0217zy.png" width="500" class="m-auto"></p><p>点击「Try」按钮即可进行测试，如上图所示，这里我们就得到了如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"f45388a9-4169-41d4-aec8-fb8259c48d36"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"1df9f664-fd74-476b-8038-b0b5f62ddf87"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"02702b40-272d-4838-8644-675105930658"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Vibe"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/e850008a-d9a1-4c8f-acbd-a37f228946bc/image/02702b40-272d-4838-8644-675105930658.jpg"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Intro]\nYeah, yeah\nKeep talking, keep talking\nI love the way you sound\n[Verse 1]\nYour voice is like a drug I can't put down\nEvery word you say just pulls me in\nI'm addicted to the way you laugh out loud\nAnd how you whisper when the room goes dim\nTell me 'bout your day, tell me 'bout your fears\nI could listen to you talk for years\n[Pre-Chorus]\nDon't stop now, don't you dare\nI need your voice filling up the air\n[Chorus]\nKeep talking, keep talking to me\nYour words are all I fucking need\nKeep talking, keep talking, I'm high\nOff every sound you make tonight\nKeep talking\n[Verse 2]\nYou could read the phone book, I don't care\nJust the rhythm of your breathing's enough\nWhen you say my name, it's like a prayer\nAnd your silence hits me twice as rough\nEvery conversation feels like home\nNever want to hear this dial tone\n[Pre-Chorus]\nDon't stop now, don't you dare\nI need your voice filling up the air\n[Chorus]\nKeep talking, keep talking to me\nYour words are all I fucking need\nKeep talking, keep talking, I'm high\nOff every sound you make tonight\nKeep talking\n[Bridge]\nWhen the world gets loud and crazy\nYour voice cuts through the noise\nYou're my favorite conversation\nYou're my drug of choice\nKeep talking, keep talking\nKeep talking, keep talking\nKeep talking, keep talking\nKeep talking, keep talking\n[Chorus]\nKeep talking, keep talking to me\nYour words are all I fucking need\nKeep talking, keep talking, I'm high\nOff every sound you make tonight\nKeep talking\n[Outro]\nYeah, yeah\nKeep talking, keep talking\nNever stop that sound"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/e850008a-d9a1-4c8f-acbd-a37f228946bc/audio/02702b40-272d-4838-8644-675105930658.m4a"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-06-18T15:47:54.705246Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"FUZZ-1.0"</span>,</span><br><span class="line">      <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">        <span class="attr">"words"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"[Intro]"</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;,</span><br><span class="line">          ...</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"sound"</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">179.84</span>,</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">180.48</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">63</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"Pop, upbeat tempo, modern production"</span>,</span><br><span class="line">      <span class="attr">"duration"</span>: <span class="number">181.12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"be3fe757-621e-4017-9056-20aa7f01919e"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Revive"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/e850008a-d9a1-4c8f-acbd-a37f228946bc/image/be3fe757-621e-4017-9056-20aa7f01919e.jpg"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse 1]\nI'm walking through the motions, moving day by day\nColors seem a little faded, nothing much to say\nFriends keep calling, asking if I'm doing fine\nBut I just smile and tell them everything's divine\n[Pre-Chorus]\nSomething's missing, can't quite name it\nFeels like I'm just going through the stages\n[Chorus]\nI'm barely breathing, barely feeling\nLike I'm floating through a life that isn't mine\nBarely breathing, barely healing\nSearching for a reason, searching for a sign\nTo feel alive again\nTo feel alive again\n[Verse 2]\nMorning coffee tastes like water, sunrise looks like rain\nEveryone around me laughs but I can't feel the same\nUsed to dance in silly moments, used to sing out loud\nNow I'm standing in the silence of a faceless crowd\n[Pre-Chorus]\nSomething's shifting, can't ignore it\nMaybe it's time to break these patterns\n[Chorus]\nI'm barely breathing, barely feeling\nLike I'm floating through a life that isn't mine\nBarely breathing, barely healing\nSearching for a reason, searching for a sign\nTo feel alive again\nTo feel alive again\n[Bridge]\nBut there's a beating in my chest\nA whisper saying \"don't give up yet\"\nMaybe tomorrow I'll remember\nHow to laugh and how to let\nMy heart wake up from this long sleep\nFind the fire I used to keep\n[Chorus]\nI'm barely breathing, barely feeling\nLike I'm floating through a life that isn't mine\nBarely breathing, barely healing\nSearching for a reason, searching for a sign\nTo feel alive again\nTo feel alive again\n[Outro]\nI'm gonna feel alive again\nI'm gonna feel alive again"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/e850008a-d9a1-4c8f-acbd-a37f228946bc/audio/be3fe757-621e-4017-9056-20aa7f01919e.m4a"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-06-18T15:48:01.139081Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"FUZZ-1.0"</span>,</span><br><span class="line">      <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">        <span class="attr">"words"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"[Verse"</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;,</span><br><span class="line">          ...</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"again"</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">202.88</span>,</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">211.84</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">54</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"Pop, upbeat tempo, clean production, emotional vocals"</span>,</span><br><span class="line">      <span class="attr">"duration"</span>: <span class="number">211.84</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>返回结果一共有多个字段，介绍如下：</p><ul>  <li><code>success</code>，此时音乐生成任务的状态情况。<ul>      <li><code>data</code>，此次音乐任务的结果 - <code>id</code>，此时音乐生成任务的 ID。<ul>          <li><code>prompt</code>，此时音乐生成任务的提示词。</li>          <li><code>audio_url</code>，此时音乐生成任务的音频链接。</li>          <li><code>image_url</code>，此时音乐生成任务的封面链接。</li>          <li><code>state</code>，此时音乐生成任务的状态。</li>          <li><code>duration</code>，此时音乐的时长信息。</li>          <li><code>style</code>，此时音乐的风格信息。</li>          <li><code>model</code>，此时音乐生成任务采用的模型信息。</li>          <li><code>lyric</code>，此时音乐生成任务的歌词信息。</li>        </ul>      </li>    </ul>  </li></ul><p>可以看到我们得到了想生成的音乐信息，我们只需要根据结果中 <code>data</code> 的音乐链接地址获取生成的 Riffusion 音乐即可。</p><p>另外如果想生成对应的对接代码，可以直接复制生成，例如 CURL 的代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/riffusion/audios' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "FUZZ-1.0",</span><br><span class="line">  "action": "generate",</span><br><span class="line">  "prompt": "A song for Christmas"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><h2 id="自定义生成"><a href="#自定义生成" class="headerlink" title="自定义生成"></a>自定义生成</h2><p>如果想自定义生成歌词，可以输入歌词：</p><p>这时候 <code>lyric</code> 字段可以传入类似如下内容：</p><figure class="highlight applescript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">[Verse]Woke up <span class="keyword">with</span> <span class="keyword">the</span> sun <span class="keyword">in</span> <span class="keyword">my</span> eyesNo clouds <span class="keyword">above</span> just blue <span class="keyword">in</span> <span class="keyword">the</span> skiesShoes <span class="keyword">on</span> <span class="keyword">my</span> feet I’m ready <span class="keyword">to</span> runEvery step feels like a loaded gun[Chorus]Happy days are rolling inLet <span class="keyword">the</span> joy <span class="keyword">beneath</span> <span class="keyword">my</span> skinNo more shadows no more liesJust <span class="keyword">the</span> truth <span class="keyword">that</span> lifts <span class="keyword">me</span> high[Verse <span class="number">2</span>]Dancing <span class="keyword">through</span> <span class="keyword">the</span> city streetsA rhythm pounding <span class="keyword">in</span> <span class="keyword">my</span> heartbeatStrangers smile <span class="keyword">it</span>’s catching onThis world’s a stage we’re all a song[Chorus]Happy days are rolling inLet <span class="keyword">the</span> joy <span class="keyword">beneath</span> <span class="keyword">my</span> skinNo more shadows no more liesJust <span class="keyword">the</span> truth <span class="keyword">that</span> lifts <span class="keyword">me</span> high[Bridge]Throw your worries out <span class="keyword">the</span> doorLet them sink <span class="keyword">to</span> <span class="keyword">the</span> ocean floorWe’re alive <span class="keyword">and</span> <span class="keyword">it</span>’s enoughLife <span class="keyword">is</span> messy <span class="keyword">but</span> <span class="keyword">it</span>’s love[Chorus]Happy days are rolling inLet <span class="keyword">the</span> joy <span class="keyword">beneath</span> <span class="keyword">my</span> skinNo more shadows no more liesJust <span class="keyword">the</span> truth <span class="keyword">that</span> lifts <span class="keyword">me</span> high</span><br></pre>      </td>    </tr>  </table></figure><p>接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><ul>  <li>lyric：歌词文本</li>  <li>custom：填写为 <code>true</code>，代表自定义生成，该参数默认为 false，代表使用 <code>prompt</code> 生成。</li>  <li>title：歌曲的标题。</li>  <li>style：歌曲的风格，选填。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/ny4n7m.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/hm9gtn.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/riffusion/audios' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "FUZZ-1.0",</span><br><span class="line">  "action": "generate",</span><br><span class="line">  "lyric": "[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high",</span><br><span class="line">  "custom": true</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>测试允许，生成的效果是类似的。</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"978c2912-6a90-4048-b4c1-43f9cf18c28d"</span>,</span><br><span class="line">    <span class="attr">"trace_id"</span>: <span class="string">"08dfbb99-43ce-4f65-8fd1-74b98f2b121a"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"eac9ab69-e210-490b-9f8d-095a6f074f40"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"VibeRise"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3f3e1354-52ad-4f5b-902c-5f83abd17def/image/eac9ab69-e210-490b-9f8d-095a6f074f40.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3f3e1354-52ad-4f5b-902c-5f83abd17def/audio/eac9ab69-e210-490b-9f8d-095a6f074f40.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T01:57:33.438644Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="string">"FUZZ-1.0"</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"Woke"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">"funk vibes, raspy, raw vocal texture"</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">158.08</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"64fffe1f-b1aa-46dc-8012-b80ba319cf35"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Pure Dawn"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3f3e1354-52ad-4f5b-902c-5f83abd17def/image/64fffe1f-b1aa-46dc-8012-b80ba319cf35.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3f3e1354-52ad-4f5b-902c-5f83abd17def/audio/64fffe1f-b1aa-46dc-8012-b80ba319cf35.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T01:57:33.963497Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="string">"FUZZ-1.0"</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"Woke"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">"contemporary country"</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">175.36</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="翻唱歌曲"><a href="#翻唱歌曲" class="headerlink" title="翻唱歌曲"></a>翻唱歌曲</h2><p>如果想对已经生成的歌曲进行翻唱操作的操作，可以输入上文生成的歌曲进行翻唱，接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><ul>  <li>action：此次歌曲任务的行为，目前支持：generate、cover、extend、upload_cover、upload_extend、replace_section、swap_sound、swap_vocals，此次翻唱使用<code>cover</code>参数。</li>  <li>lyric：歌词文本</li>  <li>title：歌曲的标题。</li>  <li>audio_id：歌曲的ID。</li>  <li>style：歌曲的风格，选填。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/e5egk2.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/u0ei5u.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/riffusion/audios' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "cover",</span><br><span class="line">  "model": "FUZZ-1.0 Pro",</span><br><span class="line">  "lyric": "[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high",</span><br><span class="line">  "audio_id": "b7376272-3902-49b4-a83b-62f7e6ab505c"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>测试允许，生成的效果是类似的。</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"fe02997d-f58e-4886-9aa3-4074c9a430eb"</span>,</span><br><span class="line">    <span class="attr">"trace_id"</span>: <span class="string">"997bde4c-6063-4fc2-9b03-d837f1efc72d"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"be254182-d4b7-42b3-9ee2-b86db086cff1"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Sunny Rise"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/c2f707a9-017d-4354-8bfa-436266dadbf6/image/be254182-d4b7-42b3-9ee2-b86db086cff1.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/c2f707a9-017d-4354-8bfa-436266dadbf6/audio/be254182-d4b7-42b3-9ee2-b86db086cff1.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T01:59:17.666629Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">237.44</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">236.8</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">239.46235827664398</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"9b9d2810-eb2b-44d3-85c0-cb259afa13c3"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Uplift"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/c2f707a9-017d-4354-8bfa-436266dadbf6/image/9b9d2810-eb2b-44d3-85c0-cb259afa13c3.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/c2f707a9-017d-4354-8bfa-436266dadbf6/audio/9b9d2810-eb2b-44d3-85c0-cb259afa13c3.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T01:59:23.065712Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">236.16</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">225.28</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">239.5299546485261</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="续写歌曲"><a href="#续写歌曲" class="headerlink" title="续写歌曲"></a>续写歌曲</h2><p>如果想续写歌曲的话，我们需要传入<code>action</code>参数值为：<code>extend</code>，接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><ul>  <li>action：此次歌曲任务的行为，目前支持：generate、cover、extend、upload_cover、upload_extend、replace_section、swap_vocals、swap_sound，此次续写使用<code>extend</code>参数。</li>  <li>lyric：歌词文本</li>  <li>title：歌曲的标题。</li>  <li>audio_id：歌曲的ID。</li>  <li>style：歌曲的风格，选填。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/1im68k.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/yctbdk.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/riffusion/audios' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "extend",</span><br><span class="line">  "model": "FUZZ-1.0 Pro",</span><br><span class="line">  "lyric": "[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high",</span><br><span class="line">  "audio_id": "b7376272-3902-49b4-a83b-62f7e6ab505c",</span><br><span class="line">  "continue_at": 5</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>测试允许，生成的效果是类似的。</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"6388a0aa-b5ab-4485-baad-f0e0b7a7848c"</span>,</span><br><span class="line">    <span class="attr">"trace_id"</span>: <span class="string">"da143dbe-8263-45ac-b05a-1ed57dd4aa79"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"209e27e0-500c-44f3-9134-280690014920"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"City Rhythm"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3a8378d5-94d4-49b7-9c0a-8432c0c4a39d/image/209e27e0-500c-44f3-9134-280690014920.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3a8378d5-94d4-49b7-9c0a-8432c0c4a39d/audio/209e27e0-500c-44f3-9134-280690014920.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:00:53.473604Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">4.48</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">4.48</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">179.2</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">178.56</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">197.00850340136054</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"ff50012e-ad1b-4b71-8d0e-6a633428a54f"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Bright"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3a8378d5-94d4-49b7-9c0a-8432c0c4a39d/image/ff50012e-ad1b-4b71-8d0e-6a633428a54f.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/3a8378d5-94d4-49b7-9c0a-8432c0c4a39d/audio/ff50012e-ad1b-4b71-8d0e-6a633428a54f.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:00:52.795796Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">186.88</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">186.24</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">213.85757369614512</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="替换片段"><a href="#替换片段" class="headerlink" title="替换片段"></a>替换片段</h2><p>如果想对歌曲进行替换片段的话，我们需要传入<code>action</code>参数值为：<code>replace_section</code>，接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><ul>  <li>action：此次歌曲任务的行为，目前支持：generate、cover、extend、upload_cover、upload_extend、replace_section、swap_vocals、swap_sound，此次续写使用<code>extend</code>参数。</li>  <li>lyric：需要替换后的歌词文本</li>  <li>title：歌曲的标题。</li>  <li>audio_id：歌曲的ID。</li>  <li>style：歌曲的风格，选填。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/gbxazr.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/yb4wr9.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/riffusion/audios' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "replace_section",</span><br><span class="line">  "model": "FUZZ-1.0 Pro",</span><br><span class="line">  "lyric": "[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high",</span><br><span class="line">  "audio_id": "b7376272-3902-49b4-a83b-62f7e6ab505c",</span><br><span class="line">  "replace_section_start": 3,</span><br><span class="line">  "replace_section_end": 70</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>测试允许，生成的效果是类似的。</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"73defcbf-f876-4dd6-b60e-4c1c5ecd4565"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"9f639389-7218-4cdb-ade9-b34228bb0f21"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"037f5e9d-9da4-4d79-b58f-1f433b40d54d"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Sunrise Joy"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/881ad27f-39c1-4c31-a789-ecc822e13b8c/image/037f5e9d-9da4-4d79-b58f-1f433b40d54d.jpg"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/881ad27f-39c1-4c31-a789-ecc822e13b8c/audio/037f5e9d-9da4-4d79-b58f-1f433b40d54d.m4a"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:18:43.031184Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">        <span class="attr">"words"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">3.84</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">3.84</span>,</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;,</span><br><span class="line">          ...</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">159.36</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">159.36</span>,</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"duration"</span>: <span class="number">199.2201133786848</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"97638295-068f-4cbc-b076-66f522449bd5"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Sunrise"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/881ad27f-39c1-4c31-a789-ecc822e13b8c/image/97638295-068f-4cbc-b076-66f522449bd5.jpg"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/881ad27f-39c1-4c31-a789-ecc822e13b8c/audio/97638295-068f-4cbc-b076-66f522449bd5.m4a"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:18:56.267775Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">        <span class="attr">"words"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">3.84</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">3.84</span>,</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;,</span><br><span class="line">          ...</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"end"</span>: <span class="number">159.36</span>,</span><br><span class="line">            <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="number">159.36</span>,</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">            <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"duration"</span>: <span class="number">199.2201133786848</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="SwapSound生成"><a href="#SwapSound生成" class="headerlink" title="SwapSound生成"></a>SwapSound生成</h2><p>如果想使用官方的SwapSound操作，可以将<code>action</code>参数值设为：<code>swap_sound</code>，接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><p>接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><ul>  <li>action：此次歌曲任务的行为，目前支持：generate、cover、extend、upload_cover、upload_extend、swap_sound、swap_vocals。</li>  <li>lyric：歌词文本</li>  <li>title：歌曲的标题。</li>  <li>audio_id：歌曲的ID。</li>  <li>style：歌曲的风格，选填。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/psf4rm.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/988rlq.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/riffusion/audios' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "swap_sound",</span><br><span class="line">  "model": "FUZZ-1.0 Pro",</span><br><span class="line">  "lyric": "[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high",</span><br><span class="line">  "audio_id": "b7376272-3902-49b4-a83b-62f7e6ab505c"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>测试允许，生成的效果是类似的。</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"93279260-5ca1-42d8-bde1-1fa62e0f5027"</span>,</span><br><span class="line">    <span class="attr">"trace_id"</span>: <span class="string">"bc4e28db-4897-4ffc-9e03-45f43da7a21c"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"242035c0-8ac2-4f0b-a19c-ac2fa49d4df3"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Brightside"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/36494e8a-eb82-4d89-bbfa-ec719e19572b/image/242035c0-8ac2-4f0b-a19c-ac2fa49d4df3.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/36494e8a-eb82-4d89-bbfa-ec719e19572b/audio/242035c0-8ac2-4f0b-a19c-ac2fa49d4df3.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:02:32.799561Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">1.28</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">1.28</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">195.84</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">195.84</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">197.2696371882086</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"594fe702-6c71-4b0c-abb6-21b58efc74a6"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Sunrise"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/36494e8a-eb82-4d89-bbfa-ec719e19572b/image/594fe702-6c71-4b0c-abb6-21b58efc74a6.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/36494e8a-eb82-4d89-bbfa-ec719e19572b/audio/594fe702-6c71-4b0c-abb6-21b58efc74a6.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:02:30.523279Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">0.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">192.64</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">192.64</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">196.7198866213152</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="SwapVocals-生成"><a href="#SwapVocals-生成" class="headerlink" title="SwapVocals 生成"></a>SwapVocals 生成</h2><p>如果想使用官方的SwapVocals操作，可以将<code>action</code>参数值设为：<code>swap_vocals</code>，接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><ul>  <li>action：此次歌曲任务的行为，目前支持：generate、cover、extend、upload_cover、upload_extend、swap_sound、swap_vocals。</li>  <li>lyric：歌词文本</li>  <li>title：歌曲的标题。</li>  <li>audio_id：歌曲的ID。</li>  <li>style：歌曲的风格，选填。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/n6k8wk.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/3wg240.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/riffusion/audios' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "action": "swap_vocals",</span><br><span class="line">  "model": "FUZZ-1.0 Pro",</span><br><span class="line">  "lyric": "[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high",</span><br><span class="line">  "audio_id": "b7376272-3902-49b4-a83b-62f7e6ab505c"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>测试允许，生成的效果是类似的。</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"a6e0d456-189b-4c78-9232-2fe72166ab39"</span>,</span><br><span class="line">    <span class="attr">"trace_id"</span>: <span class="string">"ee5769d4-ae94-4e5a-a85f-b3c0ddc2e48e"</span>,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"b8b1ed14-f43c-4738-a697-60ba24b6049d"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Uplift"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/25ce4ddd-e48c-42e2-9ea3-8e03380508f2/image/b8b1ed14-f43c-4738-a697-60ba24b6049d.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/25ce4ddd-e48c-42e2-9ea3-8e03380508f2/audio/b8b1ed14-f43c-4738-a697-60ba24b6049d.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:04:18.477032Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">2.56</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">2.56</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">186.88</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">171.52</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">195.55968253968254</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"dfd6eb9c-a1f3-4e1f-bbf9-e0b9625e459f"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Vivid Rise"</span>,</span><br><span class="line">            <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/25ce4ddd-e48c-42e2-9ea3-8e03380508f2/image/dfd6eb9c-a1f3-4e1f-bbf9-e0b9625e459f.jpg"</span>,</span><br><span class="line">            <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">            <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/25ce4ddd-e48c-42e2-9ea3-8e03380508f2/audio/dfd6eb9c-a1f3-4e1f-bbf9-e0b9625e459f.m4a"</span>,</span><br><span class="line">            <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"created_at"</span>: <span class="string">"2025-06-23T02:04:27.140387Z"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"lyrics_timestamped"</span>: &#123;</span><br><span class="line">                <span class="attr">"words"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">1.28</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">1.28</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"[Verse]"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"end"</span>: <span class="number">188.8</span>,</span><br><span class="line">                        <span class="attr">"index_range"</span>: <span class="literal">null</span>,</span><br><span class="line">                        <span class="attr">"line_index"</span>: <span class="number">29</span>,</span><br><span class="line">                        <span class="attr">"start"</span>: <span class="number">188.16</span>,</span><br><span class="line">                        <span class="attr">"text"</span>: <span class="string">"high"</span>,</span><br><span class="line">                        <span class="attr">"wav2vec2_format"</span>: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">196.07185941043085</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Riffusion Audios Generation API 生成的时间有时候会相对较长，如果 API 长时间无响应，HTTP 请求会一直保持连接，导致额外的系统资源消耗，所以本 API 也提供了异步回调的支持。</p><p>整体流程是：客户端发起请求的时候，额外指定一个 <code>callback_url</code> 字段，客户端发起 API 请求之后，API 会立马返回一个结果，包含一个 <code>task_id</code> 的字段信息，代表当前的任务 ID。当任务完成之后，生成任务的结果会通过 POST JSON 的形式发送到客户端指定的 <code>callback_url</code>，其中也包括了 <code>task_id</code> 字段，这样任务结果就可以通过 ID 关联起来了。</p><p>下面我们通过示例来了解下具体怎样操作。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/" target="_blank" rel="noopener">https://webhook.site/</a>，打开该网站即可得到一个 Webhook URL，如图所示：</p><p><img src="https://cdn.acedata.cloud/tbcnai.png" alt=""></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <a href="https://webhook.site/68368fc6-7f0a-425e-b63a-cc48631615fe" target="_blank" rel="noopener">https://webhook.site/68368fc6-7f0a-425e-b63a-cc48631615fe</a>。</p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入相应的参数，具体的内容如图所示：</p><p><img src="https://cdn.acedata.cloud/kk7y6q.png" width="500" class="m-auto"></p><p>点击运行，可以发现会立即得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"9939767a-7f9c-4f43-aabf-ca68fe385f3c"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>稍等片刻，我们可以在 <a href="https://webhook.site/68368fc6-7f0a-425e-b63a-cc48631615fe" target="_blank" rel="noopener">https://webhook.site/68368fc6-7f0a-425e-b63a-cc48631615fe</a> 上观察到生成任务的结果，如图所示：</p><p><img src="https://cdn.acedata.cloud/bgujzg.png" alt=""></p><p>内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"9939767a-7f9c-4f43-aabf-ca68fe385f3c"</span>,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"13a86870-e705-45d0-8447-82a08701c0fa"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"72e6c476-0116-4da9-ae34-f78190020b35"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Rise"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/9b9f3281-6b47-44ac-8e4b-3b0d105e163d/image/72e6c476-0116-4da9-ae34-f78190020b35.jpg"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/9b9f3281-6b47-44ac-8e4b-3b0d105e163d/audio/72e6c476-0116-4da9-ae34-f78190020b35.m4a"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-06-15T15:43:22.432605Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"FUZZ-1.0"</span>,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"acoustic folk, finger picking"</span>,</span><br><span class="line">      <span class="attr">"duration"</span>: <span class="number">184.96</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"7f4f5c20-4395-4583-9dbb-735b9bb86957"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Luminance"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/9b9f3281-6b47-44ac-8e4b-3b0d105e163d/image/7f4f5c20-4395-4583-9dbb-735b9bb86957.jpg"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nWoke up with the sun in my eyes\nNo clouds above just blue in the skies\nShoes on my feet I’m ready to run\nEvery step feels like a loaded gun\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Verse 2]\nDancing through the city streets\nA rhythm pounding in my heartbeat\nStrangers smile it’s catching on\nThis world’s a stage we’re all a song\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high\n[Bridge]\nThrow your worries out the door\nLet them sink to the ocean floor\nWe’re alive and it’s enough\nLife is messy but it’s love\n[Chorus]\nHappy days are rolling in\nLet the joy beneath my skin\nNo more shadows no more lies\nJust the truth that lifts me high"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://storage.googleapis.com/corpusant-app-public/riffs/9b9f3281-6b47-44ac-8e4b-3b0d105e163d/audio/7f4f5c20-4395-4583-9dbb-735b9bb86957.m4a"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2025-06-15T15:43:21.574561Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"FUZZ-1.0"</span>,</span><br><span class="line">      <span class="attr">"state"</span>: <span class="string">"succeeded"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"deep bass, ethereal electronic"</span>,</span><br><span class="line">      <span class="attr">"duration"</span>: <span class="number">165.12</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到结果中有一个 <code>task_id</code> 字段，其他的字段都和上文类似，通过该字段即可实现任务的关联。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在调用 API 时，如果遇到错误，API 会返回相应的错误代码和信息。例如：</p><ul>  <li><code>400 token_mismatched</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>400 api_not_implemented</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>401 invalid_token</code>：Unauthorized, invalid or missing authorization token.</li>  <li><code>429 too_many_requests</code>：Too many requests, you have exceeded the rate limit.</li>  <li><code>500 api_error</code>：Internal server error, something went wrong on the server.</li></ul><h3 id="错误响应示例"><a href="#错误响应示例" class="headerlink" title="错误响应示例"></a>错误响应示例</h3><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"api_error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"fetch failed"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"2cf86e86-22a4-46e1-ac2f-032c0f2a4e89"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过本文档，您已经了解了如何使用 Riffusion Audios Generation API 可通过输入提示词来生成音乐。希望本文档能帮助您更好地对接和使用该 API。如有任何问题，请随时联系我们的技术支持团队。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;申请流程&quot;&gt;&lt;a href=&quot;#申请流程&quot; class=&quot;headerlink&quot; title=&quot;申请流程&quot;&gt;&lt;/a&gt;申请流程&lt;/h2&gt;
&lt;p&gt;要使用 API，需要先到 &lt;a href=&quot;https://platform.acedata.cloud/document
      
    
    </summary>
    
    
      <category term="API" scheme="https://cuiqingcai.com/categories/API/"/>
    
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
      <category term="Riffusion" scheme="https://cuiqingcai.com/tags/Riffusion/"/>
    
  </entry>
  
  <entry>
    <title>人脸年龄变化 API 对接说明</title>
    <link href="https://cuiqingcai.com/42371.html"/>
    <id>https://cuiqingcai.com/42371.html</id>
    <published>2024-12-15T12:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.305Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍一种 人脸年龄变化 API 对接说明，它可以通过输入图片和年龄，从而来改变图片中人脸的年龄图片，大致的用法是用户上传一张人脸图片，基于人脸编辑与生成算法，输出一张人脸变老或变年轻的图片，支持实现人脸不同年龄的变化。</p><p>接下来介绍下 人脸年龄变化 API 的对接说明。</p><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>要使用 API，需要先到 <a href="https://platform.acedata.cloud/documents/0c5b4165-25ba-4dc2-8f02-e3cd74ab4238" target="_blank" rel="noopener">人脸年龄变化 API</a> 对应页面申请对应的服务，进入页面之后，点击「Acquire」按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/q6ytrc.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先先了解下基本的使用方式，就是输入图片链接以及年龄信息，便可获得处理后结果图片，首先需要简单地传递一个 <code>image_url</code> 字段，人脸图片如下图所示：</p><p><img src="https://cdn.acedata.cloud/f5687u.png" width="500" class="m-auto"></p><p>然后我们还需上传关于人脸年龄信息参数 <code>age_infos</code> ，它是一个数组，我们可以传多个信息，我们接下来就可以在界面上填写对应的内容，如图所示：</p><p><img src="https://cdn.acedata.cloud/cn95e8.png" width="500" class="m-auto"></p><p>可以看到这里我们设置了 Request Headers，包括：</p><ul>  <li><code>accept</code>：想要接收怎样格式的响应结果，这里填写为 <code>application/json</code>，即 JSON 格式。</li>  <li><code>authorization</code>：调用 API 的密钥，申请之后可以直接下拉选择。</li></ul><p>另外设置了 Request Body，包括：</p><ul>  <li><code>image_url</code>：需要处理的人脸图片链接。</li>  <li><code>age_infos</code>：关于人脸年龄和区域信息，其中年龄是必选参数。</li></ul><p>选择之后，可以发现右侧也生成了对应代码，如图所示：</p><p><img src="https://cdn.acedata.cloud/zk8qkl.png" width="500" class="m-auto"></p><p>点击「Try」按钮即可进行测试，如上图所示，这里我们就得到了如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://faceeffect-1254418846.cos.ap-guangzhou.myqcloud.com/ft/ChangeAgePic/1256437459/bfce1ab8-5fd7-464d-8878-b38433f84d0e"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，这里返回的结果中有一个 <code>image_url</code> 字段，就是根据输入年龄变化后的人脸图片。其中变化后人脸信息如下所示：</p><p><img src="https://cdn.acedata.cloud/01rmiv.png" width="500" class="m-auto"></p><p>可以看到图片中人脸是根据输入的年龄发生了变化。</p><p>另外如果想生成对应的对接代码，可以直接复制生成，例如 CURL 的代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/face/change-age' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "age_infos": [&#123;"age":60&#125;],</span><br><span class="line">  "image_url": "https://cdn.acedata.cloud/f5687u.png"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>Python 的对接代码如下：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.acedata.cloud/face/change-age"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"authorization"</span>: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"age_infos"</span>: [&#123;<span class="string">"age"</span>:<span class="number">60</span>&#125;],</span><br><span class="line">    <span class="string">"image_url"</span>: <span class="string">"https://cdn.acedata.cloud/f5687u.png"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre>      </td>    </tr>  </table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>在调用 API 时，如果遇到错误，API 会返回相应的错误代码和信息。例如：</p><ul>  <li><code>400 token_mismatched</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>400 api_not_implemented</code>：Bad request, possibly due to missing or invalid parameters.</li>  <li><code>401 invalid_token</code>：Unauthorized, invalid or missing authorization token.</li>  <li><code>429 too_many_requests</code>：Too many requests, you have exceeded the rate limit.</li>  <li><code>500 api_error</code>：Internal server error, something went wrong on the server.</li></ul><h3 id="错误响应示例"><a href="#错误响应示例" class="headerlink" title="错误响应示例"></a>错误响应示例</h3><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"api_error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"fetch failed"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"trace_id"</span>: <span class="string">"2cf86e86-22a4-46e1-ac2f-032c0f2a4e89"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过本文档，您已经了解了如何使用 人脸年龄变化 API 对输入的图片和年龄信息来进行人脸年龄变化。希望本文档能帮助您更好地对接和使用该 API。如有任何问题，请随时联系我们的技术支持团队。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍一种 人脸年龄变化 API 对接说明，它可以通过输入图片和年龄，从而来改变图片中人脸的年龄图片，大致的用法是用户上传一张人脸图片，基于人脸编辑与生成算法，输出一张人脸变老或变年轻的图片，支持实现人脸不同年龄的变化。&lt;/p&gt;
&lt;p&gt;接下来介绍下 人脸年龄变化 API
      
    
    </summary>
    
    
      <category term="API" scheme="https://cuiqingcai.com/categories/API/"/>
    
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
      <category term="人脸年龄变化" scheme="https://cuiqingcai.com/tags/%E4%BA%BA%E8%84%B8%E5%B9%B4%E9%BE%84%E5%8F%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>二维码耍出新花样，充满创意艺术</title>
    <link href="https://cuiqingcai.com/42370.html"/>
    <id>https://cuiqingcai.com/42370.html</id>
    <published>2024-12-12T12:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.305Z</updated>
    
    <content type="html"><![CDATA[<p>艺术二维码是一种创新的技术产品，它将二维码与美观的背景图像相结合，创造出既实用又美观的作品。它们不仅具有传统二维码的功能性，能被智能设备快速扫描识别，还加入了艺术元素，增强了视觉吸引力和品牌识别度。其中，部分艺术二维码甚至由人工智能生成，充分利用了现代技术，展示出无与伦比的创新和独特性。这使得艺术二维码在品牌营销、广告推广等领域有着广泛的应用。</p><p>简单来说，艺术二维码是扫描二维码与艺术美感的完美结合，它不仅提供了信息传递的功能，同时也能提升用户的视觉体验，使得每一次的扫描都充满艺术的享受。</p><h2 id="作品概览"><a href="#作品概览" class="headerlink" title="作品概览"></a>作品概览</h2><p>我们先来看几个二维码作品：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-172022.png" alt=""></p><p>怎么样？这些二维码就是艺术二维码，它实现了图片和二维码的完美结合，比普通的二维码更加具有艺术感。而且关键是，每一个二维码都能扫描！</p><h2 id="怎样制作？"><a href="#怎样制作？" class="headerlink" title="怎样制作？"></a>怎样制作？</h2><p>想制作这样的二维码吗？怎么来制作这样的艺术二维码呢？</p><p>其实这个从技术来讲是相对复杂的。在现在这个 AI 时代，目前艺术二维码的解决方案是基于 Stable Diffusion 来做的，通过输入 prompt 我们可以生成对应的图片，同时结合一些二维码内容的融合最终实现这样的效果。</p><p>所以这里面其实最主要的挑战在于：如何既把二维码做得好看而且富有艺术，而且二维码还能被正确扫描。说实话这个技术其实还是蛮难的，需要大量的参数调整才能做到稍微好点的效果。</p><p>应该 99% 的人在第一步就放弃了。</p><p>假设通过不断的调整，我们真的做出来了这样的效果，真正运行起来也是一个不小的开销，如果要速度比较快的话，可能得性能比较好的 GPU，可能一不小心就上万块钱了。</p><p>有朋友可能会说：我不想费那么多精力，我也不想花那么多钱，我就想做个艺术二维码，或者我想把这个能力集成到我的产品里面，要是有这样现成的 API 就好了。</p><p>有吗？还真有。</p><p>本平台提供了艺术二维码相关生成 API，我们可以调用 API 输入各种参数，比如图片内容、二维码链接、样式风格等等各种参数，就可以非常方便地生成想要的艺术二维码了，而且首次申请免费赠送 20 张绘制次数。</p><h2 id="申请-API"><a href="#申请-API" class="headerlink" title="申请 API"></a>申请 API</h2><p>要使用艺术二维码 API，首先可以到<a href="https://data.zhishuyun.com/documents/ee085d2a-a0b9-4f0e-8b4d-8da407345138" target="_blank" rel="noopener" title="艺术二维码 API ">艺术二维码 API </a>页面点击「获取」按钮：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-172029.png" alt=""></p><p>如果你尚未登录，会自动跳转到登录页面，扫码关注公众号即可自动登录，无需额外注册步骤。</p><p>登录完了之后会跳回原页面，此时会提示「您尚未申请该服务，需要申请」。申请时会校验实名认证情况，请按照网站提示完成实名认证。实名认证会校验姓名、手机号、身份证号，认证完了之后可以返回页面，刷新一下页面确保信息更新，然后重新申请即可通过申请。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>要使用艺术二维码的最基本的功能，需要填入如下几个必须参数：</p><ul>  <li>type：二维码的类型，如纯文本、链接等。</li>  <li>content：二维码的内容，比如如果是链接的话，我们可以填入对应的链接。</li>  <li>prompt：二维码对应的风格绘制指令，强烈建议用英文。比如说 <code>pizza</code> 则会绘制一个像披萨的二维码。</li></ul><p>接下来，我们来生成一个知数云官网的二维码，类型是链接，内容是 <a href="https://data.zhishuyun.com" target="_blank" rel="noopener" title="https://data.zhishuyun.com">https://data.zhishuyun.com</a>，prompt 这里填写如下内容：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">(best quality, <span class="attr">masterpiece</span>:<span class="number">1.2</span>), underwater, ((pirate ship)), close up, zoom <span class="keyword">in</span>, absurdes, big waves, twister, water falling, tentacles, ((glowing lights)), ((lighting storm)), fog, smoke, <span class="number">4</span>k res, <span class="number">8</span>k, higly detailed textures, cinematic shot, intricate details, side view</span><br></pre>      </td>    </tr>  </table></figure><p>在测试页面填写如下内容：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-175640.png" alt=""></p><p>然后点击测试：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-172030.png" alt=""></p><p>过一会就发现艺术二维码就生成了，结果类似如下：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"task_id"</span>: <span class="string">"a7e8831c-203d-447e-83fc-71783c766446"</span>,</span><br><span class="line">  <span class="string">"image_url"</span>: <span class="string">"https://qrart.cdn.zhishuyun.com/attachments/1132182283529494652/1136344944630563006/Germey_2023-08-02__64ca8da51e5834b500e077bf.png"</span>,</span><br><span class="line">  <span class="string">"image_width"</span>: <span class="number">768</span>,</span><br><span class="line">  <span class="string">"image_height"</span>: <span class="number">768</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>二维码如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-175711.png" alt=""></p><p>这样我们就生成了一个二维码，主体是一个船只，悬挂着几个旗帜，而这些旗帜恰恰构成了二维码的定位点。</p><p>用手机扫描一下，就可以跳转到知数云的官网了。</p><p>同时上述内容调用方案我们可以非常方便地转成 API 调用。</p><h2 id="prompt-指南"><a href="#prompt-指南" class="headerlink" title="prompt 指南"></a>prompt 指南</h2><p>通过上述操作可以看到，艺术二维码关键在于 prompt 的编写，那 prompt 的编写都有什么讲究呢？</p><p>其实这个都是通用的 Stable Diffusion 的 prompt 指令，艺术二维码就是基于 Stable Diffusion 技术加上一些特殊调优生成的，所以它的输入 prompt 和 Stable Diffusion 是完全一样的。</p><p>如果你还不知道什么是 Stable Diffusion，可以到它的官网了解下：<a href="https://stablediffusionweb.com/" target="_blank" rel="noopener" title="https://stablediffusionweb.com/">https://stablediffusionweb.com/</a>，还有prompt 教程和指南：<a href="https://stable-diffusion-art.com/prompt-guide/" target="_blank" rel="noopener" title="https://stable-diffusion-art.com/prompt-guide/">https://stable-diffusion-art.com/prompt-guide/</a>，另外 Stable Diffusion 还制作了 prompt 生成器，可以帮助我们生成 prompt：<a href="https://stablediffusionweb.com/prompt-generator" target="_blank" rel="noopener" title="https://stablediffusionweb.com/prompt-generator">https://stablediffusionweb.com/prompt-generator</a>，除此之外还有一些 prompt 样例集合网站：<a href="https://publicprompts.art/" target="_blank" rel="noopener" title="https://publicprompts.art/">https://publicprompts.art/</a></p><p>如上内容仅作参考，如果更多，可以自行搜索 Stable Diffusion 相关的资料进行学习。</p><h2 id="高级参数"><a href="#高级参数" class="headerlink" title="高级参数"></a>高级参数</h2><p>本 API 还提供了更多高级参数方便进行更多功能定制，说明如下：</p><ul>  <li>preset：预设背景风格。二维码背景的风格，如超现实风格、霓虹效果、手绘风格等。</li>  <li>steps：绘制迭代次数。当次数越大，绘制的二维码艺术风格越强，范围为 10-20，默认是 16。</li>  <li>qrw：二维码的权重。当权重越大，图片越接近真实二维码，但是艺术化的风格会减弱，取值范围是 1.5-3，默认是 1.5。</li>  <li>seed：随机种子。用于生成随机二维码，当种子相同时，生成的二维码风格是一样的，范围为 1-9007199254740991。</li>  <li>rawurl：是否保持原始链接。默认情况下会将输入链接缩短为短链接，可以提高扫码率，该值默认为 false。</li>  <li>padding_level：二维码内边距。二维码内边距的大小，</li>  <li>aspect_ratio：二维码宽高比。</li>  <li>position：二维码位置。</li>  <li>pixel_style：二维码像素风格。</li>  <li>marker_shape：二维码定位框形状。</li>  <li>sub_marker：二维码子标记样式。</li>  <li>rotate：二维码旋转角度。</li>  <li>ecl：二维码纠错等级。</li>  <li>padding_noise：二维码内边距噪点。</li>  <li>pattern：预设二维码组合。预设二维码风格组合，如定位框的样式（方形、圆形等）、点的样式（方形、圆形等）。</li></ul><p>下文我们来详细了解下艺术二维码 API 的一些高级参数，选取其中一些进行介绍。</p><h2 id="预设-preset"><a href="#预设-preset" class="headerlink" title="预设 preset"></a>预设 preset</h2><p>艺术二维码 API 设置了很多预设模板，这个参数叫做 preset，取值如下：</p><ul>  <li>sunset（日落）: 融合了夕阳余晖的温暖色调和柔和光线效果。</li>  <li>floral（花卉）: 带有花朵和植物元素的艺术风格，强调自然之美。</li>  <li>snowflakes（雪花）: 冰雪世界，具有冰晶和雪花的冷酷氛围。</li>  <li>feathers（羽毛）: 呈现出羽毛和鸟类特征，营造轻盈和柔软的感觉。</li>  <li>raindrops（雨滴）: 以雨滴和水珠为灵感，创造出清新湿润的效果。</li>  <li>ultra-realism（超现实）: 极度逼真的细节和质感，营造出超越现实的效果。</li>  <li>epic-realms（史诗领域）: 壮丽的场景和史诗感，带来宏大的视觉体验。</li>  <li>intricate-studio（错综复杂）: 富有细节和复杂性，需要仔细观察才能完全理解的风格。</li>  <li>symmetric-masterpiece（对称杰作）: 通过对称元素创造出精美的平衡和谐。</li>  <li>luminous-highway（发光高速公路）: 强调夜间的发光效果，如车灯和霓虹灯。</li>  <li>celestial-journey（星际之旅）: 探索宇宙和星际的奇幻旅程。</li>  <li>neon-mech（霓虹机械）: 结合了霓虹灯和机械元素，营造出未来感。</li>  <li>ethereal-low-poly（飘渺低多边形）: 低多边形风格，创造出虚幻和抽象的效果。</li>  <li>golden-vista（金色景观）: 以金色调为主，呈现出壮观的视觉景象。</li>  <li>cinematic-expanse（电影式广袤）: 带有电影感的广阔场景，引人入胜。</li>  <li>cinematic-warm（电影式温暖）: 具有电影质感的温暖色调和光线效果。</li>  <li>desolate-wilderness（荒凉荒野）: 描绘荒芜和荒野，营造出孤寂感。</li>  <li>vibrant-palette（鲜明调色板）: 色彩丰富多样，强烈的色彩对比。</li>  <li>enigmatic-journey（神秘之旅）: 探索充满谜团和神秘感的旅程。</li>  <li>timeless-cinematic（永恒电影）: 具有电影质感且不受时间限制的风格。</li>  <li>regal-galaxy（皇家星系）: 带有皇家气息的星系和宇宙元素。</li>  <li>illustrious-canvas（杰出画布）: 创作出卓越而引人注目的画布效果。</li>  <li>expressive-mural（富有表现力的壁画）: 充满表现力和情感的大型壁画风格。</li>  <li>serene-haze（宁静薄雾）: 带有宁静和薄雾效果，营造出宁静的氛围。</li></ul><p>我们下面来尝试下不同参数的效果，比如拿 sunset（日落）和 raindrops（雨滴）为例来看下效果。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST <span class="string">"https://api.zhishuyun.com/qrart/generate?token=&#123;token&#125;"</span> \</span><br><span class="line">  -H <span class="string">"accept: application/json"</span> \</span><br><span class="line">  -H <span class="string">"content-type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "type": "link",</span></span><br><span class="line"><span class="string">    "content": "https://data.zhishuyun.com",</span></span><br><span class="line"><span class="string">    "prompt": "sakura",</span></span><br><span class="line"><span class="string">    "preset": "sunset"</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br></pre>      </td>    </tr>  </table></figure><p>这里我们把 preset 设置为了 sunset（日落效果），效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-174003.png" alt=""></p><p>如果我们换个风格，比如把 preset 参数换成 raindrops（雨滴效果），效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-174249.png" alt=""></p><p>关于其他的一些设定大家可以自行试验。</p><h2 id="二维码宽高比-aspect-ratio"><a href="#二维码宽高比-aspect-ratio" class="headerlink" title="二维码宽高比 aspect_ratio"></a>二维码宽高比 aspect_ratio</h2><p>通过 aspect_ratio 参数我们可以设置二维码的宽高比，比如正方形 1:1，长方形 16:9 等等，该参数：</p><ul>  <li>768x768：宽高比为 1:1，表示画布的宽度和高度相等。对应的像素尺寸为 768x768，生成的二维码画布为正方形。</li>  <li>1008x576：宽高比为 16:9，表示画布的宽度是高度的 16/9 倍。对应的像素尺寸为 1008x576，生成的二维码画布宽度较大，适合宽屏显示。</li>  <li>576x1008：宽高比为 9:16，表示画布的宽度是高度的 9/16 倍。对应的像素尺寸为 576x1008，生成的二维码画布高度较大，适合竖屏显示。</li>  <li>864x672：宽高比为 4:3，表示画布的宽度是高度的 4/3 倍。对应的像素尺寸为 864x672，生成的二维码画布略带正方形感，适合一般显示。</li>  <li>672x864：宽高比为 3:4，表示画布的宽度是高度的 3/4 倍。对应的像素尺寸为 672x864，生成的二维码画布略带纵向矩形感，适合一般显示。</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST <span class="string">"https://api.zhishuyun.com/qrart/generate?token=&#123;token&#125;"</span> \</span><br><span class="line">  -H <span class="string">"accept: application/json"</span> \</span><br><span class="line">  -H <span class="string">"content-type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "type": "link",</span></span><br><span class="line"><span class="string">    "content": "https://data.zhishuyun.com",</span></span><br><span class="line"><span class="string">    "prompt": "Fish",</span></span><br><span class="line"><span class="string">    "aspect_ratio": "576x1008"</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br></pre>      </td>    </tr>  </table></figure><p>这里我们尝试生成了一个长方形的二维码，效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-175104.png" alt=""></p><h2 id="二维码位置-position"><a href="#二维码位置-position" class="headerlink" title="二维码位置 position"></a>二维码位置 position</h2><p>我们还可以通过 position 参数控制二维码的位置，比如说一张图片里面有一个女生穿裙子，而我们想要把二维码放在裙子的位置并与之融合起来，我们就可以尝试改下二维码的位置，调用样例如下：</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST <span class="string">"https://api.zhishuyun.com/qrart/generate?token=&#123;token&#125;"</span> \</span><br><span class="line">  -H <span class="string">"accept: application/json"</span> \</span><br><span class="line">  -H <span class="string">"content-type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "type": "link",</span></span><br><span class="line"><span class="string">    "content": "https://data.zhishuyun.com",</span></span><br><span class="line"><span class="string">    "prompt": "one of the beautiful girls in the moonlight in the background, in the style of pixelated chaos, rococo-inspired art, dark white and sky-blue, made of plastic, delicate flowers, gongbi, wimmelbilder",</span></span><br><span class="line"><span class="string">    "position": "bottom",</span></span><br><span class="line"><span class="string">    "aspect_ratio": "576x1008"</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br></pre>      </td>    </tr>  </table></figure><p>效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-24-170641.png" alt=""></p><h2 id="二维码像素风格-pixel-style"><a href="#二维码像素风格-pixel-style" class="headerlink" title="二维码像素风格 pixel_style"></a>二维码像素风格 pixel_style</h2><p>我们还可以自定义二维码的像素风格，通过传入 pixel_style 即可，参数可选值如下：</p><ul>  <li>square（方形）：使用方形的像素单元，每个像素单元都是正方形的形状。</li>  <li>rounded（圆角）：像素单元具有圆角，使得生成的二维码看起来更加柔和和现代化。</li>  <li>dot（点状）：使用小圆点作为像素单元，生成的二维码呈现出点阵的效果，类似于印刷效果。</li>  <li>squircle（圆角方形）：类似于圆角矩形，但更加接近圆形的形状，为生成的二维码赋予一种独特的风格。</li>  <li>row（行排列）：将像素单元按行排列，呈现出水平方向的图案。</li>  <li>column（列排列）：将像素单元按列排列，呈现出垂直方向的图案。</li></ul><p>样式预览如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-172007.png" alt=""></p><h2 id="二维码框风格-marker-shape"><a href="#二维码框风格-marker-shape" class="headerlink" title="二维码框风格 marker_shape"></a>二维码框风格 marker_shape</h2><p>通过 marker_shape 可以自定义定位框的风格，参数可选值如下：</p><ul>  <li>square（方形）：标记形状为正方形，用于突出特定位置或元素。</li>  <li>circle（圆形）：标记形状为圆形，可用于标记关键区域或元素。</li>  <li>plus（加号）：标记形状为加号，类似十字型，用于突出注意或特定信息。</li>  <li>box（方框）：标记形状为方框，类似于描边的矩形，可用于围绕区域或元素。</li>  <li>octagon（八边形）：标记形状为八边形，带有独特的角落，用于视觉吸引。</li>  <li>random（随机）：标记形状随机分布，为二维码添加艺术感和视觉趣味。</li>  <li>tiny-plus（微小加号）：微小的加号标记，可用于标记细微的元素或细节。</li></ul><p>样式预览如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-28-172144.png" alt=""></p><h2 id="二维码子标记风格-sub-marker"><a href="#二维码子标记风格-sub-marker" class="headerlink" title="二维码子标记风格 sub_marker"></a>二维码子标记风格 sub_marker</h2><p>通过 sub_marker 可以用于子标记（较小的标记）的形状，参数可选值如下：</p><ul>  <li>square（方形）：子标记的形状为正方形，可以用于突出特定位置的细节。</li>  <li>circle（圆形）：子标记的形状为圆形，可用于强调关键细节或元素。</li>  <li>box（方框）：子标记的形状为方框，类似于描边的矩形，适用于标记细小区域。</li>  <li>random（随机）：子标记的形状随机分布，为二维码添加艺术感和视觉趣味。</li>  <li>plus（加号）：子标记的形状为加号，类似十字型，可以用于标记细微的信息或元素。</li></ul><h2 id="二维码旋转角度-rotate"><a href="#二维码旋转角度-rotate" class="headerlink" title="二维码旋转角度 rotate"></a>二维码旋转角度 rotate</h2><p>通过 rotate 可以控制二维码的旋转角度，参数可选值如下：</p><ul>  <li>0：不进行旋转，生成的二维码保持原始方向，没有旋转效果。</li>  <li>90：将生成的二维码顺时针旋转90度，使其以纵向方向显示。</li>  <li>180：将生成的二维码旋转180度，使其倒置，即上下颠倒的显示方式。</li>  <li>270：将生成的二维码顺时针旋转270度，使其以逆纵向方向显示。</li></ul><h2 id="二维码预设-pattern"><a href="#二维码预设-pattern" class="headerlink" title="二维码预设 pattern"></a>二维码预设 pattern</h2><p>通过 pattern 可以方便地启用一些二维码样式风格，比如方形的定位框、圆形的像素点等等，这里预定义了一些 pattern：</p><div class="table-container">  <table>    <thead>      <tr>        <th>pattern</th>        <th>含义</th>        <th></th>      </tr>    </thead>    <tbody>      <tr>        <td>s1</td>        <td>pixel_style: square marker_shape: square</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173018.png" alt="img"></td>      </tr>      <tr>        <td>s2</td>        <td>pixel_style: square marker_shape: square rotate: 180</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173030.png" alt="img"></td>      </tr>      <tr>        <td>s3</td>        <td>pixel_style: square marker_shape: square rotate: 180custom_padding_noise: 0.25</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173222.png" alt="img"></td>      </tr>      <tr>        <td>rd1</td>        <td>pixel_style: rounded marker_shape: random</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173237.png" alt="img"></td>      </tr>      <tr>        <td>rd2</td>        <td>pixel_style: rounded marker_shape: random rotate: 180</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173251.png" alt="img"></td>      </tr>      <tr>        <td>rd3</td>        <td>pixel_style: rounded marker_shape: random rotate: 180custom_padding_noise: 0.25</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173304.png" alt="img"></td>      </tr>      <tr>        <td>d1</td>        <td>pixel_style: dot marker_shape: circle</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173315.png" alt="img"></td>      </tr>      <tr>        <td>d2</td>        <td>pixel_style: dot marker_shape: circle rotate: 180</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173326.png" alt="img"></td>      </tr>      <tr>        <td>d3</td>        <td>pixel_style: dot marker_shape: circle rotate: 180custom_padding_noise: 0.25</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173337.png" alt="img"></td>      </tr>      <tr>        <td>r1</td>        <td>pixel_style: row marker_shape: plus</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173411.png" alt="img"></td>      </tr>      <tr>        <td>r2</td>        <td>pixel_style: row marker_shape: plus rotate: 180</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173424.png" alt="img"></td>      </tr>      <tr>        <td>r3</td>        <td>pixel_style: row marker_shape: plus rotate: 180custom_padding_noise: 0.25</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173437.png" alt="img"></td>      </tr>      <tr>        <td>c1</td>        <td>pixel_style: column marker_shape: box</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173455.png" alt="img"></td>      </tr>      <tr>        <td>c2</td>        <td>pixel_style: column marker_shape: box rotate: 180</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173508.png" alt="img"></td>      </tr>      <tr>        <td>c3</td>        <td>pixel_style: column marker_shape: box rotate: 180custom_padding_noise: 0.25</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173519.png" alt="img"></td>      </tr>      <tr>        <td>sq1</td>        <td>pixel_style: squircle marker_shape: random</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173532.png" alt="img"></td>      </tr>      <tr>        <td>sq2</td>        <td>pixel_style: squircle marker_shape: random rotate: 180</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173545.png" alt="img"></td>      </tr>      <tr>        <td>sq3</td>        <td>pixel_style: squircle marker_shape: random rotate: 180custom_padding_noise: 0.25</td>        <td><img src="https://cdn.zhishuyun.com/2023-08-28-173558.png" alt="img"></td>      </tr>    </tbody>  </table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;艺术二维码是一种创新的技术产品，它将二维码与美观的背景图像相结合，创造出既实用又美观的作品。它们不仅具有传统二维码的功能性，能被智能设备快速扫描识别，还加入了艺术元素，增强了视觉吸引力和品牌识别度。其中，部分艺术二维码甚至由人工智能生成，充分利用了现代技术，展示出无与伦比的
      
    
    </summary>
    
    
      <category term="艺术二维码" scheme="https://cuiqingcai.com/categories/%E8%89%BA%E6%9C%AF%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
      <category term="艺术二维码" scheme="https://cuiqingcai.com/tags/%E8%89%BA%E6%9C%AF%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Luma 视频生成 API 对接说明</title>
    <link href="https://cuiqingcai.com/42369.html"/>
    <id>https://cuiqingcai.com/42369.html</id>
    <published>2024-09-06T12:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.275Z</updated>
    
    <content type="html"><![CDATA[<p>随着 AI 的应用变广，各类 AI 程序已逐渐普及。AI 已逐渐深入到人们的工作生活方方面面。而 AI 涉及的行业也越来越多，从最初的写作，到医疗教育，再到现在的视频。</p><p>Luma 是一个专业高质量的视频生成平台，用户只需上传素材，即可根据不同风格和效果自动生成高质量视频。该 AI 视频生成器由来自知名科技公司的团队成员开发，目标是无需复杂的编辑工具，让每个人都能轻松制作出色的视频。</p><p>然而 Luma 官方是并没有提供 API 的，AceDataCloud 提供了一套 Luma 的 API，模拟对接了 Suno 官方，可以方便快捷地生成想要的视频。</p><h2 id="申请和使用"><a href="#申请和使用" class="headerlink" title="申请和使用"></a>申请和使用</h2><p>要使用 Luma Videos API，首先可以到 <a href="https://platform.acedata.cloud/documents/5bd3597d-1ff8-44ad-a580-b66b48393e7f" target="_blank" rel="noopener">Luma Videos Generation API</a> 页面点击「Acquire」按钮，获取请求所需要的凭证：</p><p><img src="https://cdn.acedata.cloud/nyq0xz.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>想要生成什么视频，可以任意输入一段文字，比如我想生成一个关于宇航员穿梭于太空和火山之间的视频，就可以输入 <code>Astronauts shuttle from space to volcano</code>，如图所示：</p><p><img src="https://cdn.acedata.cloud/yub02j.png" width="500" class="m-auto"></p><p>生成的代码如下：</p><p><img src="https://cdn.acedata.cloud/ieq7yn.png" width="500" class="m-auto"></p><p>可以点击「Try」按钮直接测试 API，稍等 1-2 分钟，结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"e4018a99-1522-4f24-9330-62c2a9b50b59"</span>,</span><br><span class="line">  <span class="attr">"video_id"</span>: <span class="string">"155838f8-7f1e-44d8-b387-192f3b4b509d"</span>,</span><br><span class="line">  <span class="attr">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span>,</span><br><span class="line">  <span class="attr">"video_url"</span>: <span class="string">"https://storage.cdn-luma.com/dream_machine/af94e7ca-da35-4b5f-a636-2d7254184d0d/watermarked_video0585de3737db946e5a0ac895384ecd180.mp4"</span>,</span><br><span class="line">  <span class="attr">"video_height"</span>: <span class="number">752</span>,</span><br><span class="line">  <span class="attr">"video_width"</span>: <span class="number">1360</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"completed"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/e4018a99-1522-4f24-9330-62c2a9b50b59.jpg"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_width"</span>: <span class="number">1360</span>,</span><br><span class="line">  <span class="attr">"thumbnail_height"</span>: <span class="number">752</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到这时候我们就得到了这个视频的相关信息，包括视频ID、视频链接、视频封面等内容。</p><p>字段说明如下：</p><ul>  <li>success：生成是否成功，如果成功则为 <code>true</code>，否则为 <code>false</code></li>  <li>task_id：此处视频生成任务的唯一ID</li>  <li>video_id：此处视频生成任务产生的视频唯一ID</li>  <li>prompt：此处视频生成任务的关键词</li>  <li>video_url：此处视频生成任务的结果视频链接</li>  <li>video_height：生成后的视频封面图片的高度</li>  <li>video_width：生成后的视频封面图片的宽度</li>  <li>state：此处视频生成任务的状态，如果任务完成的话则为 <code>completed</code>。</li>  <li>thumbnail_url：生成后的视频封面图片的链接</li>  <li>thumbnail_width：生成后的视频封面图片的宽度</li>  <li>thumbnail_height：生成后的视频封面图片的高度</li></ul><h2 id="自定义首尾帧生成"><a href="#自定义首尾帧生成" class="headerlink" title="自定义首尾帧生成"></a>自定义首尾帧生成</h2><p>如果想通过自定义视频的首尾帧来生成视频，可以输入首尾帧的图片链接：</p><p>这时候视频首帧 <code>start_image_url</code> 字段可以传入以下图片作为视频的首帧：</p><p><img src="https://cdn.acedata.cloud/r9vsv9.png" alt="首帧"></p><p>接下来我们要根据首尾帧、关键词自定义生成视频，就可以指定如下内容：</p><ul>  <li>action：视频生成任务的行为，通常是普通生成 <code>generate</code> 和扩展生成 <code>extend</code>，默认为 <code>generate</code>。</li>  <li>start_image_url：指定生成视频的首帧。</li>  <li>end_image_url：指定生成视频的尾帧。</li>  <li>prompt：生成视频的关键词内容。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/zvzydx.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/tx80pu.png" width="500" class="m-auto"></p><p>对应的代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.acedata.cloud/luma/videos"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"authorization"</span>: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"start_image_url"</span>: <span class="string">"https://cdn.acedata.cloud/r9vsv9.png"</span>,</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"generate"</span>,</span><br><span class="line">    <span class="string">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre>      </td>    </tr>  </table></figure><p>得到的结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"12a18694-fd4b-47e7-9c50-34f30862cff6"</span>,</span><br><span class="line">  <span class="attr">"video_id"</span>: <span class="string">"0105c090-03a5-425a-8026-523341cd575b"</span>,</span><br><span class="line">  <span class="attr">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span>,</span><br><span class="line">  <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/12a18694-fd4b-47e7-9c50-34f30862cff6.mp4"</span>,</span><br><span class="line">  <span class="attr">"video_height"</span>: <span class="number">656</span>,</span><br><span class="line">  <span class="attr">"video_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"completed"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/12a18694-fd4b-47e7-9c50-34f30862cff6.jpg"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"thumbnail_height"</span>: <span class="number">656</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>最后得到的结果与上文的类似的，生成的视频首帧包含了我们传入的图片，当然也可以同时传入首尾帧图片链接来生成视频，只需要在上面的基础上再加一个尾帧图片即可，尾帧的图片信息如下：</p><p><img src="https://cdn.acedata.cloud/0iad3k.png" alt="尾帧"></p><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/20igwi.png" width="500" class="m-auto"></p><p>最后得出如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"d1cb723a-e554-4775-94a4-bb6ae8c7ea67"</span>,</span><br><span class="line">  <span class="attr">"video_id"</span>: <span class="string">"6bebd0d2-f793-472e-9326-38528a9273bb"</span>,</span><br><span class="line">  <span class="attr">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span>,</span><br><span class="line">  <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/d1cb723a-e554-4775-94a4-bb6ae8c7ea67.mp4"</span>,</span><br><span class="line">  <span class="attr">"video_height"</span>: <span class="number">656</span>,</span><br><span class="line">  <span class="attr">"video_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"completed"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/d1cb723a-e554-4775-94a4-bb6ae8c7ea67.jpg"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"thumbnail_height"</span>: <span class="number">656</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>结果与上文是类似的，生成的视频同时包含了首帧与尾帧的图片，这也就完成了自定义首尾帧来生成视频。</p><h2 id="视频扩展功能"><a href="#视频扩展功能" class="headerlink" title="视频扩展功能"></a>视频扩展功能</h2><p>如果想对生成的视频进行继续生成的话，可以将参数 <code>action</code> 设置为 <code>extend</code> ，并且输入需要继续生成视频的ID或者视频链接，视频ID和视频链接的获取是根据基本使用来获取，如下图所示：</p><p><img src="https://cdn.acedata.cloud/fwknj4.png" width="500" class="m-auto"></p><p>这时候可以看到视频的ID为：</p><figure class="highlight subunit">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line">"video_id": "0105c090<span class="string">-03</span>a5<span class="string">-425</span>a<span class="string">-8026</span><span class="string">-523341</span>cd575b",</span><br><span class="line">"video_url": "https://platform.cdn.acedata.cloud/luma/12a18694-fd4b<span class="string">-47</span>e7<span class="string">-9</span>c50<span class="string">-34</span>f30862cff6.mp4"</span><br></pre>      </td>    </tr>  </table></figure><blockquote>  <p>注意，这里的视频中 <code>video_id</code> 和 <code>video_url</code> 是生成后视频的ID和视频链接，如果你不知道如何生成视频，可以参考上文的基本使用来生成视频。</p></blockquote><p>要想继续生成视频的话必须上传视频链接或视频的ID，下面演示使用视频ID来进行扩展，接下来我们要必须填关键词自定义生成视频，就可以指定如下内容：</p><ul>  <li>action：此时扩展视频的行为，在这应为 <code>extend</code> 。</li>  <li>prompt：需要扩展视频的关键词。</li>  <li>video_url：需要扩展生成视频的链接。</li>  <li>video_id：需要扩展生成视频的唯一ID。</li>  <li>end_image_url：扩展生成视频可指定尾帧的图片链接，可选参数。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/vv0rxk.png" width="500" class="m-auto"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/woapxi.png" width="500" class="m-auto"></p><p>对应的Python代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.acedata.cloud/luma/videos"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"authorization"</span>: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"extend"</span>,</span><br><span class="line">    <span class="string">"video_id"</span>: <span class="string">"0105c090-03a5-425a-8026-523341cd575b"</span>,</span><br><span class="line">    <span class="string">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre>      </td>    </tr>  </table></figure><p>点击运行，可以发现会得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"c6e529d1-a06d-4c12-91b2-c855135131c3"</span>,</span><br><span class="line">  <span class="attr">"video_id"</span>: <span class="string">"36908c49-c2bb-4a11-bd5a-b8512b004818"</span>,</span><br><span class="line">  <span class="attr">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span>,</span><br><span class="line">  <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/c6e529d1-a06d-4c12-91b2-c855135131c3.mp4"</span>,</span><br><span class="line">  <span class="attr">"video_height"</span>: <span class="number">656</span>,</span><br><span class="line">  <span class="attr">"video_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"completed"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/c6e529d1-a06d-4c12-91b2-c855135131c3.jpg"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"thumbnail_height"</span>: <span class="number">656</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看出该视频是在需要扩展的视频基础上进行扩展的，结果内容与上文的是一致的，这也就实现歌曲的继续生成功能。</p><p>当然我们也可以指定视频的链接来进行扩展生成，填如下信息：</p><p><img src="https://cdn.acedata.cloud/0cv0hg.png" width="500" class="m-auto"></p><p>运行后得到了如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"1dcb5902-a7be-4b77-ba5d-dd8ec82b26ca"</span>,</span><br><span class="line">  <span class="attr">"video_id"</span>: <span class="string">"f0187dc2-339f-4a08-a435-c3a3341f620a"</span>,</span><br><span class="line">  <span class="attr">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span>,</span><br><span class="line">  <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/1dcb5902-a7be-4b77-ba5d-dd8ec82b26ca.mp4"</span>,</span><br><span class="line">  <span class="attr">"video_height"</span>: <span class="number">656</span>,</span><br><span class="line">  <span class="attr">"video_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"completed"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/1dcb5902-a7be-4b77-ba5d-dd8ec82b26ca.jpg"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"thumbnail_height"</span>: <span class="number">656</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>根据结果可以看出根据视频链接也可以实现视频扩展的功能。</p><p>最后我们还可以对扩展视频中指定一个尾帧图片来进行扩展，下面是尾帧图片信息：</p><p><img src="https://cdn.acedata.cloud/0iad3k.png" alt="尾帧"></p><p>接下来在上面的基础上添加尾帧图片信息，具体的如下所示：</p><p><img src="https://cdn.acedata.cloud/9p1vrj.png" width="500" class="m-auto"></p><p>点击运行后得到如下信息：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"b816b2b4-c345-4673-9e19-83e91f91b643"</span>,</span><br><span class="line">  <span class="attr">"video_id"</span>: <span class="string">"c5400053-63e6-4206-8082-31cf9dd1e7ed"</span>,</span><br><span class="line">  <span class="attr">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span>,</span><br><span class="line">  <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/b816b2b4-c345-4673-9e19-83e91f91b643.mp4"</span>,</span><br><span class="line">  <span class="attr">"video_height"</span>: <span class="number">656</span>,</span><br><span class="line">  <span class="attr">"video_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"completed"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/b816b2b4-c345-4673-9e19-83e91f91b643.jpg"</span>,</span><br><span class="line">  <span class="attr">"thumbnail_width"</span>: <span class="number">1552</span>,</span><br><span class="line">  <span class="attr">"thumbnail_height"</span>: <span class="number">656</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看出，在上文扩展视频的基础上，还可以指定尾帧图片来进行扩展。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Luma 生成视频的时间相对较长，大约需要 1-2 分钟，如果 API 长时间无响应，HTTP 请求会一直保持连接，导致额外的系统资源消耗，所以本 API 也提供了异步回调的支持。</p><p>整体流程是：客户端发起请求的时候，额外指定一个 <code>callback_url</code> 字段，客户端发起 API 请求之后，API 会立马返回一个结果，包含一个 <code>task_id</code> 的字段信息，代表当前的任务 ID。当任务完成之后，生成音乐的结果会通过 POST JSON 的形式发送到客户端指定的 <code>callback_url</code>，其中也包括了 <code>task_id</code> 字段，这样任务结果就可以通过 ID 关联起来了。</p><p>下面我们通过示例来了解下具体怎样操作。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/，打开该网站即可得到一个" target="_blank" rel="noopener">https://webhook.site/，打开该网站即可得到一个</a> Webhook URL，如图所示：</p><p><img src="https://cdn.acedata.cloud/q78okf.png" width="500" class="m-auto"></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <a href="https://webhook.site/0c87ca0e-cd74-4577-8d68-f2b80fbf8a13。" target="_blank" rel="noopener">https://webhook.site/0c87ca0e-cd74-4577-8d68-f2b80fbf8a13。</a></p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入 <code>prompt</code>，如图所示：</p><p><img src="https://cdn.acedata.cloud/n2fjvi.png" width="500" class="m-auto"></p><p>点击运行，可以发现会立即得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"732f8282-7cf8-401c-95f2-42c33aa079a6"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>稍等片刻，我们可以在 <a href="https://webhook.site/0c87ca0e-cd74-4577-8d68-f2b80fbf8a13" target="_blank" rel="noopener">https://webhook.site/0c87ca0e-cd74-4577-8d68-f2b80fbf8a13</a> 上观察到生成歌曲的结果，如图所示：</p><p><img src="https://cdn.acedata.cloud/1hwm5m.png" alt=""></p><p>内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"task_id"</span>: <span class="string">"732f8282-7cf8-401c-95f2-42c33aa079a6"</span>,</span><br><span class="line">    <span class="attr">"video_id"</span>: <span class="string">"4d8013c3-5de0-41aa-966e-0b1a51d1c633"</span>,</span><br><span class="line">    <span class="attr">"prompt"</span>: <span class="string">"Astronauts shuttle from space to volcano"</span>,</span><br><span class="line">    <span class="attr">"video_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/732f8282-7cf8-401c-95f2-42c33aa079a6.mp4"</span>,</span><br><span class="line">    <span class="attr">"video_height"</span>: <span class="number">752</span>,</span><br><span class="line">    <span class="attr">"video_width"</span>: <span class="number">1360</span>,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"completed"</span>,</span><br><span class="line">    <span class="attr">"thumbnail_url"</span>: <span class="string">"https://platform.cdn.acedata.cloud/luma/732f8282-7cf8-401c-95f2-42c33aa079a6.jpg"</span>,</span><br><span class="line">    <span class="attr">"thumbnail_width"</span>: <span class="number">1360</span>,</span><br><span class="line">    <span class="attr">"thumbnail_height"</span>: <span class="number">752</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到结果中有一个 <code>task_id</code> 字段，其他的字段都和上文类似，通过该字段即可实现任务的关联。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着 AI 的应用变广，各类 AI 程序已逐渐普及。AI 已逐渐深入到人们的工作生活方方面面。而 AI 涉及的行业也越来越多，从最初的写作，到医疗教育，再到现在的视频。&lt;/p&gt;
&lt;p&gt;Luma 是一个专业高质量的视频生成平台，用户只需上传素材，即可根据不同风格和效果自动生成
      
    
    </summary>
    
    
      <category term="Luma" scheme="https://cuiqingcai.com/categories/Luma/"/>
    
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
      <category term="Luma" scheme="https://cuiqingcai.com/tags/Luma/"/>
    
  </entry>
  
  <entry>
    <title>利用 Vercel 快速搭建 Nexior AI 平台</title>
    <link href="https://cuiqingcai.com/42368.html"/>
    <id>https://cuiqingcai.com/42368.html</id>
    <published>2024-07-29T12:01:22.000Z</published>
    <updated>2025-08-11T15:24:05.308Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/AceDataCloud/Nexior" target="_blank" rel="noopener">Nexior</a> 是 GitHub 上的一个开源项目，利用它我们可以一键部署自己的 AI 应用站点，包括 AI 问答、Midjourney 绘画、知识库问答、艺术二维码等应用，无需自己开发 AI 系统、无需采购 AI 账号、无需关心 API 支持、无需配置支付系统，零启动成本，无风险通过 AI 赚取收益。</p><p>本文章会介绍 Nexior 项目在 Vercel 上的部署流程，无需任何编程技巧即可几分钟部署一套属于自己的 AI 站点，并轻松利用该站点获取收益。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先打开 Nexior 的 GitHub 仓库，地址为：<a href="https://github.com/AceDataCloud/Nexior" target="_blank" rel="noopener">https://github.com/AceDataCloud/Nexior</a>，然后注册或登录 GitHub 账号，点击 Fork，克隆一份代码到自己的本地仓库，如图所示：</p><p><img src="https://cdn.acedata.cloud/3zf2hx.png" alt=""></p><p>Fork 完毕之后，我们便可以得到如下自己的个人仓库，如下：</p><p><img src="https://cdn.acedata.cloud/bcxmlc.png" alt=""></p><p>这里的示例账号是 Germey，所以可以看到这里我们就 Fork 到了 Germey 这个用户下，同时有一个 forked from <a href="https://github.com/AceDataCloud/Nexior" target="_blank" rel="noopener">AceDataCloud/Nexior</a> 的字样，这样准备工作就完成了。</p><h2 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h2><p>Vercel 是一个可以帮助快速部署项目网站的平台，我们可以利用它直接和 GitHub 仓库对接，然后把 GitHub 仓库的源代码快速部署到线上，下面介绍下 Vercel 部署 Nexior 项目的流程。</p><p>打开 <a href="https://vercel.com/" target="_blank" rel="noopener">https://vercel.com/</a>，使用 GitHub 登录。</p><p>我们便会看到类似如下的页面，这时候点击 Import 按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/jjcnnq.png" width="600" class="m-auto"></p><p>此时，Vercel 便展示了你的 GitHub 仓库，选择刚才 Fork 的 Nexior 仓库即可，如图所示：</p><p><img src="https://cdn.acedata.cloud/38advc.png" width="600" class="m-auto"></p><p>找到 Nexior 仓库之后，点击 Import 按钮导入。</p><p>接着便会弹出一个配置页面，完全保持默认配置，点击 Deploy 按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/6kvz1p.png" width="600" class="m-auto"></p><p>点击 Deploy 之后，Vercel 便开始构建整个项目并进行部署，我们不需要做任何操作，只需等待 1-2 分钟左右即可，如图所示：</p><p><img src="https://cdn.acedata.cloud/1i9ss8.png" alt=""></p><p>部署完毕之后，Vercel 便会弹出一个页面恭喜你的部署已经完成，此时你就成功把 Nexior 项目部署到你的线上环境了，如图所示：</p><p><img src="https://cdn.acedata.cloud/qn8ndd.png" alt=""></p><p>点击 Continue to Dashboard，我们便可以看到 Vercel 为我们生成的预览域名，如图所示：</p><p><img src="https://cdn.acedata.cloud/c9p0r2.png" alt=""></p><p>此时直接打开这个链接，比如这里的样例地址是 <a href="https://nexior-germeys-projects.vercel.app/" target="_blank" rel="noopener">https://nexior-germeys-projects.vercel.app/</a>，打开之后，我们便可以看到 Nexior 项目的运行情况了。</p><p>打开之后注册登录一下，比如用邮箱、GitHub 登录都是可以的，登录完毕之后便可以看到一个配置页面，比如 Site Configuration，我们可以自行修改该站点的标题、Logo、Favicon、管理员等信息，如下图所示：</p><p><img src="https://cdn.acedata.cloud/o4fuy6.png" width="600" class="m-auto"></p><p>同时还有一个比较重要的部分就是分销推广的配置，如图所示：</p><p><img src="https://cdn.acedata.cloud/d8c4md.png" width="600" class="m-auto"></p><p>这里我们可以修改两个信息，一个叫默认邀请人 ID、一个叫强制邀请人 ID，说明如下：</p><ul>  <li>默认邀请人 ID：如果只设置了默认邀请人 ID，那么人人都可以分销和推广该站点，谁邀请的客户，客户的消费返利都会给到邀请人。如果站点的 URL 不携带任何推广信息的时候（URL 里面没有 inviter_id）的时候，注册用户默认情况下都会绑定到这个默认邀请人 ID 上。初始状态下这个 ID 就是站长的个人 ID。</li>  <li>强制邀请人 ID：如果设置了强制邀请人 ID，那么除了这个强制邀请人，其他人都无法从该站点获得分销返利，后台也看不到分销推广的入口。该站点所有注册用户都会被绑定到这个强制邀请人上面，所有的消费返利都是强制邀请人的。</li></ul><p>所以，对于以上两个模式，取决于站长的推广思路，视情况而定。</p><p>另外还有一个配置选项就是功能开关，如图所示：</p><p><img src="https://cdn.acedata.cloud/zwi7hu.png" width="600" class="m-auto"></p><p>目前 Nexior 提供了多个功能，站长可以选择性地打开或关闭某些特定功能。</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>现在我们已经成功部署了一个网站，但是域名是 Vercel 为我们分配的二级域名，其实并不利于对外推广，如果能够修改为我们的自定义域名的话就会好很多。</p><p>比如说我这边有一个 <a href="https://chictem.com" target="_blank" rel="noopener">https://chictem.com</a> 的域名，下面介绍下自定义域名的配置。</p><blockquote>  <p>如果没有域名，可以到各大域名厂商注册，例如 <a href="https://www.namecheap.com/" target="_blank" rel="noopener">namecheap</a>、<a href="https://godaddy.com/" target="_blank" rel="noopener">Godaddy</a> 等，一些中国境内服务商也可以。</p></blockquote><p>接下来我们打开 Vercel 的自定义域名配置页面：</p><p><img src="https://cdn.acedata.cloud/6mqomk.png" alt=""></p><p>此处输入你想要配置的自定义域名，比如这里示例配置为 <a href="https://chictem.com" target="_blank" rel="noopener">https://chictem.com</a>，就直接填写 chictem.com，不带 <code>https://</code> 前缀，点击 Add：</p><p><img src="https://cdn.acedata.cloud/v7idkv.png" alt=""></p><p>接下来 Vercel 提示要选择域名配置的选项，推荐我们也添加一个 www 开头的域名，这个可加可不加，添加了之后就可以 www 开头的域名也能访问到此网站。这里我们直接选择最后一项直接添加根域名：</p><p><img src="https://cdn.acedata.cloud/zmdx31.png" width="600" class="m-auto"></p><p>确定之后我们就发现这里提示有一个待配置的 DNS：</p><p><img src="https://cdn.acedata.cloud/fu7rt7.png" alt=""></p><p>这里让我们添加一个 A 记录，解析到 76.76.21.21，我们这时候需要转到域名服务商这里配置下 DNS。</p><blockquote>  <p>注意：域名服务商取决于你在哪个网站域名买的域名，通常来说你在哪个网站买的域名，网站后台就有配置 DNS 的入口。</p></blockquote><p>下面是一个 DNS 后台配置样例：</p><p><img src="https://cdn.acedata.cloud/isy712.png" alt=""></p><p>配置完毕之后，我们就能用自定义域名访问刚配置的网站了，如图所示：</p><p><img src="https://cdn.acedata.cloud/ui08w3.png" alt=""></p><blockquote>  <p>注意：配置了新域名之后，注意我们需要进入到站点配置页面重新配置下站点标题、Logo 等选项，因为这个配置是跟域名绑定的，启用了新域名之后需要新配置站点。</p></blockquote><h2 id="代码更新"><a href="#代码更新" class="headerlink" title="代码更新"></a>代码更新</h2><p>因为 Nexior 的源代码是在持续更新的，可能不断有新的功能或者 Bug 修复，代码会直接同步到源代码仓库 <a href="https://github.com/AceDataCloud/Nexior" target="_blank" rel="noopener">https://github.com/AceDataCloud/Nexior</a> 这里。</p><p>那我们部署的站点如果想同步更新最新代码，应该怎么做呢？</p><p>其实很简单，回到 GitHub 里面我们 Fork 的代码仓库，这里可以看到我们原本 Fork 的代码仓库已经落后于官方 Nexior 源代码几个版本了，我们可以直接点击 Sync fork 按钮，然后点击 Update branch 就可以了：</p><p><img src="https://cdn.acedata.cloud/zs9tgq.png" alt=""></p><p>点击之后，我们 fork 的仓库的代码就会更新，代码更新之后，Vercel 这边的网站也会自动更新，稍等片刻重新刷新网页就发现网站更新了。</p><h2 id="赚取收益"><a href="#赚取收益" class="headerlink" title="赚取收益"></a>赚取收益</h2><p>现在我们已经有了自定义域名，配置好如上内容之后，就可以把这个站点分享出去赚钱啦！</p><p>所有的用户只要有付费账单，其中有一部分便会转化为收益到达分销者的账户，到时候添加客服提现即可。</p><p>进入分销界面，可以随时查看当前邀请人数、分销总金额、总奖励等，直接添加客服提现即可。</p><p><img src="https://cdn.acedata.cloud/zo05gl.png" width="600" class="m-auto"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/AceDataCloud/Nexior&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nexior&lt;/a&gt; 是 GitHub 上的一个开源项目，利用它我们可以一键部署自己的 AI 应用站点，包括 AI
      
    
    </summary>
    
    
      <category term="Nexior" scheme="https://cuiqingcai.com/categories/Nexior/"/>
    
    
      <category term="Vercel" scheme="https://cuiqingcai.com/tags/Vercel/"/>
    
      <category term="Nexior" scheme="https://cuiqingcai.com/tags/Nexior/"/>
    
  </entry>
  
  <entry>
    <title>移动蜂窝代理对接说明</title>
    <link href="https://cuiqingcai.com/42367.html"/>
    <id>https://cuiqingcai.com/42367.html</id>
    <published>2024-05-30T16:41:06.000Z</published>
    <updated>2025-08-11T15:24:05.317Z</updated>
    
    <content type="html"><![CDATA[<p>在爬虫与反爬虫斗争愈演愈烈的情况下，各大网站和 App 的风控检测越来越强，其中一项就是 IP 封禁。</p><p>为了解决 IP 封禁的困扰，一个有效的方式就是设置代理，设置代理之后，爬虫可以借助代理的 IP 来伪装自己的真实 IP 地址，从而突破反爬虫的限制。</p><p>但代理的质量有高有低，比如市面上的免费代理，几乎绝大多数都是不可用或者被封禁的状态，而有些付费普通代理也陆续被加入了各大网站和 App 的风控黑名单。因此，现在可以用作高质量数据爬爬取的代理越来越少了，目前市面上质量较高的代理主要有独享代理、ADSL 代理、移动蜂窝代理这几种类型。</p><p>本代理服务就是基于移动蜂窝网络（4G、5G）的隧道代理服务，本文档会介绍此服务的申请和使用方法。</p><h2 id="移动蜂窝代理"><a href="#移动蜂窝代理" class="headerlink" title="移动蜂窝代理"></a>移动蜂窝代理</h2><p>移动蜂窝代理，其实就是基于手机流量搭建的代理服务，所有的代理 IP 都是手机真实的 IP。此种代理在爬虫领域使用相对较少，因此被封禁的概率也更小，所以此种代理对于爬取一些风控极强的网站和 App 的爬取有很好的效果。</p><p>本代理服务背后是基于一个大规模的群控手机池搭建的代理服务，所有流量都经由纯正的手机流量转发，支持市面上几乎所有网站和 App 的数据请求，代理质量极高，能够极大减小风控概率。</p><h2 id="申请方法"><a href="#申请方法" class="headerlink" title="申请方法"></a>申请方法</h2><p>要使用蜂窝代理服务，可以首先到「<a href="https://platform.acedata.cloud/services/d8570fa7-8510-454e-913e-f1bd1b98338d?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener">申请页面</a>」进行申请，首次申请有 1 积分免费额度，约 17.5MB。</p><p><img src="https://cdn.acedata.cloud/wed8yf.png" alt=""></p><p>如果您尚未登录，则会自动跳转到登录页面，登录之后继续申请即可。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>申请完毕之后，可以到「控制台」中查看本人的申请结果，如图所示：</p><p><img src="https://cdn.acedata.cloud/db1js5.png" alt=""></p><p>点击 「Credentails」，即可查看使用蜂窝代理服务的用户名及密码，以冒号分隔，其中用户名是 8 位，密码是 32 位，如图所示：</p><p><img src="https://cdn.acedata.cloud/54ffp0.png" alt=""></p><p>本移动蜂窝代理是一种隧道代理，因此使用的时候只需要设置一个固定的代理隧道即可，代理隧道的地址和端口分别是 cellular.proxy.acedata.cloud 和 30000，是 HTTP/HTTPS/SOCKS 协议的代理隧道，但此代理隧道可以用于爬取 HTTP 和 HTTPS 协议的网站。</p><p>下面以 Python 为例演示该代理隧道的设置方法：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'https://&#123;proxy_username&#125;:&#123;proxy_password&#125;@cellular.proxy.acedata.cloud:30000'</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: proxy,</span><br><span class="line">    <span class="string">'https'</span>: proxy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    resp = requests.get(<span class="string">'http://myip.ipip.net'</span>, proxies=proxies)</span><br><span class="line">    print(resp.text)</span><br></pre>      </td>    </tr>  </table></figure><p>这里我们首先声明了代理的 URL 并定义为 proxy 变量，协议是 http 协议，后面跟随隧道代理的用户名和密码（即控制台展示的用户名和密码，二者以冒号分隔），后面再跟一个 <code>@</code> 符号，再跟代理的地址和端口即可。</p><p>接着声明了一个 prixies 变量，配置了两个键值对，键名分别为 http 和 https，其键值都是 proxy，代表对于 HTTP 和 HTTPS 协议的网站，都是用 proxy 变量定义的代理来进行请求。</p><p>接下来定义了三次循环进行代理的测试，这里请求的 URL 是 <a href="http://myip.ipip.net" target="_blank" rel="noopener" title="http://myip.ipip.net">http://myip.ipip.net</a>，这个站点可以返回请求该站点的真实 IP 地址和 IP 所在地域。</p><p>运行结果如下：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">当前 IP：<span class="number">60.27</span><span class="number">.158</span><span class="number">.243</span>  来自于：中国 天津 天津  联通</span><br><span class="line">当前 IP：<span class="number">116.130</span><span class="number">.209</span><span class="number">.234</span>  来自于：中国 天津 天津  联通</span><br><span class="line">当前 IP：<span class="number">221.197</span><span class="number">.232</span><span class="number">.211</span>  来自于：中国 天津 天津  联通</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，每次运行的结果得到的代理 IP 都是随机的，而且 IP 所在地域确实是来源于真实手机流量（中国联通）。</p><p>当然，上述的代理设置方式实际上是一个相对简洁的设置方式。</p><p>实际上上述代码等价于在请求的时候设置了一个额外的 Headers - Proxy Authorization，所以上述代码还可以改写如下：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">proxy_host = <span class="string">'cellular.proxy.acedata.cloud'</span></span><br><span class="line">proxy_port = <span class="string">'30000'</span></span><br><span class="line">proxy_username = <span class="string">'&#123;proxy_username&#125;'</span> <span class="comment"># 8位用户名</span></span><br><span class="line">proxy_password = <span class="string">'&#123;proxy_password&#125;'</span> <span class="comment"># 32位密码</span></span><br><span class="line"></span><br><span class="line">credentials = base64.b64encode(</span><br><span class="line">    <span class="string">f'<span class="subst">&#123;proxy_username&#125;</span>:<span class="subst">&#123;proxy_password&#125;</span>'</span>.encode()).decode()</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">f'http://<span class="subst">&#123;proxy_host&#125;</span>:<span class="subst">&#123;proxy_port&#125;</span>'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">f'http://<span class="subst">&#123;proxy_host&#125;</span>:<span class="subst">&#123;proxy_port&#125;</span>'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Proxy-Authorization'</span>: <span class="string">f'Basic <span class="subst">&#123;credentials&#125;</span>'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    resp = requests.get(<span class="string">'http://myip.ipip.net'</span>,</span><br><span class="line">                        proxies=proxies, headers=headers)</span><br><span class="line">    print(resp.text)</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，这里我们通过 Proxy-Authorization 这个请求头额外设置了代理的用户名和密码（需要进行 Base64 编码），这样的代码运行效果也是一样的。</p><p>对于其他语言，比如 JavaScript 的 axios，也可以使用类似的设置方式：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> base64 = <span class="built_in">require</span>(<span class="string">'base64'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy_host = <span class="string">'cellular.proxy.acedata.cloud'</span>;</span><br><span class="line"><span class="keyword">const</span> proxy_port = <span class="string">'30000'</span>;</span><br><span class="line"><span class="keyword">const</span> proxy_username = <span class="string">'&#123;proxy_username&#125;'</span>; <span class="comment">// 8位用户名</span></span><br><span class="line"><span class="keyword">const</span> proxy_password = <span class="string">'&#123;proxy_password&#125;'</span>; <span class="comment">// 32位密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> credentials = base64.encode(<span class="string">`<span class="subst">$&#123;proxy_username&#125;</span>:<span class="subst">$&#123;proxy_password&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxies = &#123;</span><br><span class="line">    http: <span class="string">`http://<span class="subst">$&#123;proxy_host&#125;</span>:<span class="subst">$&#123;proxy_port&#125;</span>`</span>,</span><br><span class="line">    https: <span class="string">`http://<span class="subst">$&#123;proxy_host&#125;</span>:<span class="subst">$&#123;proxy_port&#125;</span>`</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">'Proxy-Authorization'</span>: <span class="string">`Basic <span class="subst">$&#123;credentials&#125;</span>`</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    axios.get(<span class="string">'http://myip.ipip.net'</span>, &#123; proxies, headers &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> <span class="built_in">console</span>.log(resp.data))</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>运行效果都是一样的。</p><p>对于其他语言的设置方法，请参考上文自行改写。</p><h2 id="购买更多"><a href="#购买更多" class="headerlink" title="购买更多"></a>购买更多</h2><p>如您的套餐已经耗尽，您需要购买更多才能继续使用该代理服务。</p><p>要购买更多，请到「<a href="https://platform.acedata.cloud/services/d8570fa7-8510-454e-913e-f1bd1b98338d?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener">申请页面</a>」直接点击「购买更多」按钮即可选购，1 Credit 约 17.5 MB，单次购买更多，单价越便宜，如图所示：</p><p><img src="https://cdn.acedata.cloud/4la8rd.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在爬虫与反爬虫斗争愈演愈烈的情况下，各大网站和 App 的风控检测越来越强，其中一项就是 IP 封禁。&lt;/p&gt;
&lt;p&gt;为了解决 IP 封禁的困扰，一个有效的方式就是设置代理，设置代理之后，爬虫可以借助代理的 IP 来伪装自己的真实 IP 地址，从而突破反爬虫的限制。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://cuiqingcai.com/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https://cuiqingcai.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="移动蜂窝代理" scheme="https://cuiqingcai.com/tags/%E7%A7%BB%E5%8A%A8%E8%9C%82%E7%AA%9D%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Suno API 的申请及使用</title>
    <link href="https://cuiqingcai.com/42348.html"/>
    <id>https://cuiqingcai.com/42348.html</id>
    <published>2024-05-29T20:46:22.000Z</published>
    <updated>2025-08-11T15:24:05.285Z</updated>
    
    <content type="html"><![CDATA[<p>随着 AI 的应用变广，各类 AI 程序已逐渐普及。AI 已逐渐深入到人们的工作生活方方面面。而 AI 涉及的行业也越来越多，从最初的写作，到医疗教育，再到现在的音乐。</p><p>Suno 是一个专业高质量的 AI 歌曲和音乐创作平台，用户只需输入简单的文本提示词，即可根据流派风格和歌词生成带有人声的歌曲。该 AI 音乐生成器由来自 Meta、TikTok、Kensho 等知名科技公司的团队成员开发，目标是不需要任何乐器工具，让所有人都可以创造美妙的音乐。</p><p>Suno 最新已将音乐生成模型升级到 V3 版本，可生成 2 分钟的歌曲。</p><p>然而 Suno 官方是并没有提供 API 的，AceDataCloud 提供了一套 Suno 的 API，模拟对接了 Suno 官方，可以方便快捷地生成想要的音乐。</p><h2 id="申请和使用"><a href="#申请和使用" class="headerlink" title="申请和使用"></a>申请和使用</h2><p>要使用 Suno Audios API，首先可以到 <a href="https://platform.acedata.cloud/documents/4da95d9d-7722-4a72-857d-bf6be86036e9?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener">Suno Audios Generation API</a> 页面点击「Acquire」按钮，获取请求所需要的凭证：</p><p><img src="https://cdn.acedata.cloud/nyq0xz.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>想些什么歌曲，可以任意输入一段文字，比如我想生成一个关于圣诞的歌曲，就可以输入 <code>a song for Christmas</code>，如图所示：</p><p><img src="https://cdn.acedata.cloud/tsragd.png" alt=""></p><p>生成的代码如下：</p><p><img src="https://cdn.acedata.cloud/ohgrs3.png" alt=""></p><p>可以点击「Try」按钮直接测试 API，稍等 1-2 分钟，结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"2f16f7bc-4135-42c6-b3c5-6d6c49dc8cd5"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Winter Wonderland"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://cdn1.suno.ai/image_2f16f7bc-4135-42c6-b3c5-6d6c49dc8cd5.png"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nSnowflakes falling all around\nGlistening white\nCovering the ground\nChildren laughing\nFull of delight\nIn this winter wonderland tonight\nSanta's sleigh\nUp in the sky\nRudolph's nose shining bright\nOh my\nHear the jingle bells\nRinging so clear\nBringing joy and holiday cheer\n[Verse 2]\nRoasting chestnuts by the fire's glow\nChristmas lights\nThey twinkle and show\nFamilies gathering with love and cheer\nSpreading warmth to everyone near"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://cdn1.suno.ai/2f16f7bc-4135-42c6-b3c5-6d6c49dc8cd5.mp3"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://cdn1.suno.ai/2f16f7bc-4135-42c6-b3c5-6d6c49dc8cd5.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2024-05-10T16:21:37.624Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"chirp-v3"</span>,</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"A song for Christmas"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"holiday"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"5dca232b-17cc-4896-a2d1-4b59178bf410"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Winter Wonderland"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://cdn1.suno.ai/image_5dca232b-17cc-4896-a2d1-4b59178bf410.png"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nSnowflakes falling all around\nGlistening white\nCovering the ground\nChildren laughing\nFull of delight\nIn this winter wonderland tonight\nSanta's sleigh\nUp in the sky\nRudolph's nose shining bright\nOh my\nHear the jingle bells\nRinging so clear\nBringing joy and holiday cheer\n[Verse 2]\nRoasting chestnuts by the fire's glow\nChristmas lights\nThey twinkle and show\nFamilies gathering with love and cheer\nSpreading warmth to everyone near"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://cdn1.suno.ai/5dca232b-17cc-4896-a2d1-4b59178bf410.mp3"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://cdn1.suno.ai/5dca232b-17cc-4896-a2d1-4b59178bf410.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2024-05-10T16:21:37.624Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"chirp-v3"</span>,</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"A song for Christmas"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"holiday"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到这时候我们就得到了两首歌的内容，包括标题、预览图、歌词、音频、视频等内容。</p><p>字段说明如下：</p><ul>  <li>success：生成是否成功，如果成功则为 <code>true</code>，否则为 <code>false</code></li>  <li>data：是一个列表，包含了生成的歌曲的详细信息。<ul>      <li>id：歌曲 ID</li>      <li>title：歌曲的标题</li>      <li>image_url：歌曲的封面图片</li>      <li>lyric：歌曲的歌词</li>      <li>audio_url：歌曲的音频文件，打开就是一个 mp3 音频。</li>      <li>video_url：歌曲的视频文件，打开就是一个 mp4 视频。</li>      <li>created_at：创建的时间</li>      <li>model：使用的模型，一般是最新的 v3 模型</li>      <li>style：风格</li>    </ul>  </li></ul><h2 id="自定义生成"><a href="#自定义生成" class="headerlink" title="自定义生成"></a>自定义生成</h2><p>如果想自定义生成歌词，可以输入歌词：</p><p>这时候 <code>lyric</code> 字段可以传入类似如下内容：</p><figure class="highlight tex">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">[Verse]<span class="tag">\<span class="name">nSnowflakes</span></span> falling all around<span class="tag">\<span class="name">nGlistening</span></span> white<span class="tag">\<span class="name">nCovering</span></span> the ground<span class="tag">\<span class="name">nChildren</span></span> laughing<span class="tag">\<span class="name">nFull</span></span> of delight<span class="tag">\<span class="name">nIn</span></span> this winter wonderland tonight<span class="tag">\<span class="name">nSanta</span></span>'s sleigh<span class="tag">\<span class="name">nUp</span></span> in the sky<span class="tag">\<span class="name">nRudolph</span></span>'s nose shining bright<span class="tag">\<span class="name">nOh</span></span> my<span class="tag">\<span class="name">nHear</span></span> the jingle bells<span class="tag">\<span class="name">nRinging</span></span> so clear<span class="tag">\<span class="name">nBringing</span></span> joy and holiday cheer<span class="tag">\<span class="name">n</span><span class="string">[Verse 2]</span></span><span class="tag">\<span class="name">nRoasting</span></span> chestnuts by the fire's glow<span class="tag">\<span class="name">nChristmas</span></span> lights<span class="tag">\<span class="name">nThey</span></span> twinkle and show<span class="tag">\<span class="name">nFamilies</span></span> gathering with love and cheer<span class="tag">\<span class="name">nSpreading</span></span> warmth to everyone near</span><br></pre>      </td>    </tr>  </table></figure><blockquote>  <p>注意，这里的歌词中 <code>\n</code> 是换行符，如果你不知道如何生成歌词，可以使用下文介绍的生成歌词的 API 自助生成。</p></blockquote><p>接下来我们要根据歌词、标题、风格自定义生成歌曲，就可以指定如下内容：</p><ul>  <li>lyric：歌词文本</li>  <li>custom：填写为 <code>true</code>，代表自定义生成，该参数默认为 false，代表使用 <code>prompt</code> 生成。</li>  <li>file：歌曲的标题。</li>  <li>style：歌曲的风格，选填。</li></ul><p>填写样例如下：</p><p><img src="https://cdn.acedata.cloud/quw76r.png" alt="image-20240511005847578"></p><p>填写完毕之后自动生成了代码如下：</p><p><img src="https://cdn.acedata.cloud/d1jv3i.png" alt=""></p><p>对应的代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST <span class="string">'https://api.acedata.cloud/suno/audios'</span> \</span><br><span class="line">-H <span class="string">'authorization: Bearer &#123;token&#125;'</span> \</span><br><span class="line">-H <span class="string">'accept: application/json'</span> \</span><br><span class="line">-H <span class="string">'content-type: application/json'</span> \</span><br><span class="line">-d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">"lyric": "[Verse]\\nSnowflakes falling all around\\nGlistening white\\nCovering the ground\\nChildren laughing\\nFull of delight\\nIn this winter wonderland tonight\\nSanta'</span>s sleigh\\nUp <span class="keyword">in</span> the sky\\nRudolph<span class="string">'s nose shining bright\\nOh my\\nHear the jingle bells\\nRinging so clear\\nBringing joy and holiday cheer\\n[Verse 2]\\nRoasting chestnuts by the fire'</span>s glow\\nChristmas lights\\nThey twinkle <span class="keyword">and</span> show\\nFamilies gathering <span class="keyword">with</span> love <span class="keyword">and</span> cheer\\nSpreading warmth to everyone nea<span class="string">r",</span></span><br><span class="line"><span class="string">"</span>custom<span class="string">": true</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre>      </td>    </tr>  </table></figure><p>测试允许，生成的效果是类似的。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Suno 生成音乐的时间相对较长，大约需要 1-2 分钟，如果 API 长时间无响应，HTTP 请求会一直保持连接，导致额外的系统资源消耗，所以本 API 也提供了异步回调的支持。</p><p>整体流程是：客户端发起请求的时候，额外指定一个 <code>callback_url</code> 字段，客户端发起 API 请求之后，API 会立马返回一个结果，包含一个 <code>task_id</code> 的字段信息，代表当前的任务 ID。当任务完成之后，生成音乐的结果会通过 POST JSON 的形式发送到客户端指定的 <code>callback_url</code>，其中也包括了 <code>task_id</code> 字段，这样任务结果就可以通过 ID 关联起来了。</p><p>下面我们通过示例来了解下具体怎样操作。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/，打开该网站即可得到一个" target="_blank" rel="noopener">https://webhook.site/，打开该网站即可得到一个</a> Webhook URL，如图所示：</p><p><img src="https://cdn.acedata.cloud/fwfqin.png" alt=""></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <a href="https://webhook.site/03e60575-3d96-4132-b681-b713d78116e2。" target="_blank" rel="noopener">https://webhook.site/03e60575-3d96-4132-b681-b713d78116e2。</a></p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入 <code>prompt</code>，如图所示：</p><p><img src="https://cdn.acedata.cloud/x8xql1.png" alt=""></p><p>点击运行，可以发现会立即得到一个结果，如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"44472ab8-783b-4054-b861-5bf14e462f60"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>稍等片刻，我们可以在 <a href="https://webhook.site/03e60575-3d96-4132-b681-b713d78116e2" target="_blank" rel="noopener">https://webhook.site/03e60575-3d96-4132-b681-b713d78116e2</a> 上观察到生成歌曲的结果，如图所示：</p><p><img src="https://cdn.acedata.cloud/f9kosb.png" alt=""></p><p>内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"44472ab8-783b-4054-b861-5bf14e462f60"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"da4324e5-84b2-484b-b0e9-dd261381c594"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Winter Whispers"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://cdn1.suno.ai/image_da4324e5-84b2-484b-b0e9-dd261381c594.png"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nSnow falling gently from the sky\nChildren giggling as they pass by\nFire crackling\nCozy and warm\nChristmas spirit begins to swarm\n[Verse 2]\nTwinkling lights\nA sight to behold\nStockings hung\nWaiting to be filled with gold\nGifts wrapped with love\nPiled high\nExcitement in the air\nYou can't deny\n[Chorus]\nWinter whispers in the wind\nJoy and love it brings\nLet's celebrate this season\nWith the ones we're missing"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://cdn1.suno.ai/da4324e5-84b2-484b-b0e9-dd261381c594.mp3"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://cdn1.suno.ai/da4324e5-84b2-484b-b0e9-dd261381c594.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2024-05-11T07:33:05.430Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"chirp-v3"</span>,</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"A song for Christmas"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"pop"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"b878a87b-a0db-4046-8ccd-ecd2fb3d4372"</span>,</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Winter Whispers"</span>,</span><br><span class="line">      <span class="attr">"image_url"</span>: <span class="string">"https://cdn1.suno.ai/image_b878a87b-a0db-4046-8ccd-ecd2fb3d4372.png"</span>,</span><br><span class="line">      <span class="attr">"lyric"</span>: <span class="string">"[Verse]\nSnow falling gently from the sky\nChildren giggling as they pass by\nFire crackling\nCozy and warm\nChristmas spirit begins to swarm\n[Verse 2]\nTwinkling lights\nA sight to behold\nStockings hung\nWaiting to be filled with gold\nGifts wrapped with love\nPiled high\nExcitement in the air\nYou can't deny\n[Chorus]\nWinter whispers in the wind\nJoy and love it brings\nLet's celebrate this season\nWith the ones we're missing"</span>,</span><br><span class="line">      <span class="attr">"audio_url"</span>: <span class="string">"https://cdn1.suno.ai/b878a87b-a0db-4046-8ccd-ecd2fb3d4372.mp3"</span>,</span><br><span class="line">      <span class="attr">"video_url"</span>: <span class="string">"https://cdn1.suno.ai/b878a87b-a0db-4046-8ccd-ecd2fb3d4372.mp4"</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2024-05-11T07:33:05.430Z"</span>,</span><br><span class="line">      <span class="attr">"model"</span>: <span class="string">"chirp-v3"</span>,</span><br><span class="line">      <span class="attr">"prompt"</span>: <span class="string">"A song for Christmas"</span>,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"pop"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到结果中有一个 <code>task_id</code> 字段，其他的字段都和上文类似，通过该字段即可实现任务的关联。</p><h2 id="歌词生成"><a href="#歌词生成" class="headerlink" title="歌词生成"></a>歌词生成</h2><p>如果你想自定义生成歌曲，但又不太想自己编写歌词，可以使用 AceDataCloud 提供的歌词生成 API 来通过 prompt 生成歌词，API 是 <a href="https://platform.acedata.cloud/documents/514d82dc-f7ab-4638-9f21-8b9275916b08" target="_blank" rel="noopener">Suno Lyrics Generation API</a>。</p><p>该 API 只有一个输入参数，就是 <code>prompt</code>，填写样例如下：</p><p><img src="https://cdn.acedata.cloud/p53wtj.png" alt=""></p><p>这里我们输入的 <code>prompt</code> 是 <code>A song about winter</code>，生成和冬天相关的歌曲。</p><p>点击运行，结果如下：</p><figure class="highlight tex">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  "success": true,</span><br><span class="line">  "task_id": "57e8ce3a-39cb-41a2-802f-e70a324f4d0a",</span><br><span class="line">  "data": &#123;</span><br><span class="line">    "text": "[Verse]<span class="tag">\<span class="name">nSnowflakes</span></span> falling from the sky<span class="tag">\<span class="name">nWinter</span></span>'s cold touch<span class="tag">\<span class="name">nOh</span></span> how it gets me high<span class="tag">\<span class="name">nI</span></span> bundle up in layers<span class="tag">\<span class="name">nOh</span></span> so cozy<span class="tag">\<span class="name">nStepping</span></span> out and feeling the frost on my nose<span class="tag">\<span class="name">nSee</span></span><span class="tag">\<span class="name">n</span></span><span class="tag">\<span class="name">n</span><span class="string">[Verse 2]</span></span><span class="tag">\<span class="name">nThe</span></span> world is covered in a blanket of white<span class="tag">\<span class="name">nIcicles</span></span> hanging<span class="tag">\<span class="name">nShimmering</span></span> so bright<span class="tag">\<span class="name">nThe</span></span> chilly air fills my lungs with every breath<span class="tag">\<span class="name">nWalking</span></span> in the snow<span class="tag">\<span class="name">nLeaving</span></span> footprints that won't be left<span class="tag">\<span class="name">n</span></span><span class="tag">\<span class="name">n</span><span class="string">[Chorus]</span></span><span class="tag">\<span class="name">nOh</span></span><span class="tag">\<span class="name">nWinter</span></span>'s cold touch<span class="tag">\<span class="name">nIt</span></span>'s a season that I love so much<span class="tag">\<span class="name">nSnowfall</span></span> brings a feeling so divine<span class="tag">\<span class="name">nWinter</span></span>'s cold touch<span class="tag">\<span class="name">nIt</span></span>'s a magical time",</span><br><span class="line">    "title": "Winter's Cold Touch",</span><br><span class="line">    "status": "complete"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，<code>data</code> 的 <code>text</code> 字段就是歌词信息，这个信息可以用于上文的自定义歌曲生成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着 AI 的应用变广，各类 AI 程序已逐渐普及。AI 已逐渐深入到人们的工作生活方方面面。而 AI 涉及的行业也越来越多，从最初的写作，到医疗教育，再到现在的音乐。&lt;/p&gt;
&lt;p&gt;Suno 是一个专业高质量的 AI 歌曲和音乐创作平台，用户只需输入简单的文本提示词，即可
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://cuiqingcai.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="api" scheme="https://cuiqingcai.com/tags/api/"/>
    
      <category term="Suno" scheme="https://cuiqingcai.com/tags/Suno/"/>
    
      <category term="acedata" scheme="https://cuiqingcai.com/tags/acedata/"/>
    
  </entry>
  
  <entry>
    <title>Midjourney Imagine API 申请及使用</title>
    <link href="https://cuiqingcai.com/42347.html"/>
    <id>https://cuiqingcai.com/42347.html</id>
    <published>2024-05-29T20:35:22.000Z</published>
    <updated>2025-08-11T15:24:05.276Z</updated>
    
    <content type="html"><![CDATA[<p>在人工智能绘图领域，想必大家听说过 Midjourney 的大名吧！</p><p>Midjourney 是一款非常强大的 AI 绘图工具，只要输入关键字，就能在短短一两分钟生成十分精美的图像。Midjourney 以其出色的绘图能力在业界独树一帜，如今，Midjourney 早已在各个行业和领域广泛应用，其影响力愈发显著。</p><p>然而，在国内想要使用 Midjourney 却面临着相当大的挑战。首先，Midjourney 目前驻扎在 Discord 平台中，这意味着要使用 Midjourney，必须通过特殊的充值途径获得访问权限。如果没有订阅，几乎无法使用 Midjourney，因此单是使用这一工具就成了一个巨大的难题。此外，有人或许会疑问：Midjourney 是否提供对外 API 服务？然而事实是，Midjourney 并未向外界提供任何 API 服务，而且从目前情况看来，这一情况似乎也不会改变。</p><p>那么，是否有方法能够与 Midjourney 对接，并将其融入到自己的产品中呢？</p><p>答案是肯定的。接下来，我将为大家介绍 AceDataCloud 平台所提供的 Midjourney API，通过使用该 API，我们能够实现与 Midjourney 官方完全一致的效果和操作，下文会详细介绍。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AceDataCloud 是什么呢？简单来说，它是一个提供多样数字化 API 的服务平台，其官网链接是：<a href="https://platform.acedata.cloud?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener">https://platform.acedata.cloud?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f</a> 。</p><p>你可能会疑惑，既然 Midjourney 官方并未向外提供 API，那么 AceDataCloud 平台的 API 是如何诞生的呢？简言之，AceDataCloud 的 Midjourney 与 Discord 内的 Midjourney Bot 进行了接口对接，同时模拟了底层通信协议，从而能够在 Discord 平台上实现与 Midjourney 官方完全相同的操作。这涵盖了文字生成图片、图像转换、图像融合、图文生成等多个功能。此外，该 API 在后台维护了大量 Midjourney 账号，通过负载均衡控制实现了高度的并发处理，比官方 Midjourney 单一账号的并发能力要更高。</p><p>总体来看，无论是在 Discord 上使用 Midjourney 提供的哪一项功能，这个 API 都能完全还原官方操作的效果和效能。</p><p>稳定性如何呢？根据我个人几个月的观察和使用经验，可以不夸张地说，Midjourney 最近的风控越来越强了，目前业界很难找到比 AceDataCloud Midjourney API 更稳定实惠的选择，这样的选择寥寥无几。</p><p>下面我们就来了解下这个 API 的申请和使用方法吧。</p><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>要使用 Midjourney Imagine API，首先可以到 <a href="https://platform.acedata.cloud/documents/e52c028d-897a-4d51-b110-60fccbe6118d?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener" title="Midjourney Imagine API">Midjourney Imagine API</a> 页面点击「Acquire」按钮，获取请求所需要的凭证：</p><p><img src="https://cdn.acedata.cloud/nyq0xz.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>接下来就可以在界面上填写对应的内容，如图所示：</p><p><img src="https://cdn.acedata.cloud/d01h9f.png" alt=""></p><p>在第一次使用该接口时，我们至少需要填写两个内容，一个是 <code>authorization</code>，直接在下拉列表里面选择即可。另一个参数是 <code>prompt</code>， <code>prompt</code> 就是我们想生成的图片描述内容，建议用英文描述，画的图会更准确效果更好，这里我们用了示例内容 <code>Lamborghini speeds inside a volcano</code>，代表要画一个兰博基尼在火山飞驰。</p><p>同时您可以注意到右侧有对应的调用代码生成，您可以复制代码直接运行，也可以直接点击「Try」按钮进行测试。</p><p><img src="https://cdn.acedata.cloud/zv3db5.png" alt=""></p><p>调用之后，我们发现返回结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1233387694839697411/1234197197067915365/36rgqit64j90qptsxnyq_Lamborghini_speeds_inside_a_volcano_id0494_f47263b6-ff92-44a3-88ee-51cf0e706aae.png?ex=662fdb36&amp;is=662e89b6&amp;hm=ca9be54907726937ed02517a13466bef2afb2825b7cda4b313de56a3c3310d0d&amp;width=1024&amp;height=1024"</span>,</span><br><span class="line">  <span class="attr">"image_width"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"image_height"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1234197197067915365"</span>,</span><br><span class="line">  <span class="attr">"raw_image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1233387694839697411/1234197197067915365/36rgqit64j90qptsxnyq_Lamborghini_speeds_inside_a_volcano_id0494_f47263b6-ff92-44a3-88ee-51cf0e706aae.png?ex=662fdb36&amp;is=662e89b6&amp;hm=ca9be54907726937ed02517a13466bef2afb2825b7cda4b313de56a3c3310d0d&amp;"</span>,</span><br><span class="line">  <span class="attr">"raw_image_width"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"raw_image_height"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"progress"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upscale1"</span>,</span><br><span class="line">    <span class="string">"upscale2"</span>,</span><br><span class="line">    <span class="string">"upscale3"</span>,</span><br><span class="line">    <span class="string">"upscale4"</span>,</span><br><span class="line">    <span class="string">"reroll"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"1bae3bec-3ac4-4180-a148-74ee6cb68b98"</span>,</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>返回结果一共有多个字段，介绍如下：</p><ul>  <li><code>task_id</code>，生成此图像任务的 ID，用于唯一标识此次图像生成任务。</li>  <li><code>image_id</code>，图片的唯一标识，在下次需要对图片进行变换操作时需要传此参数。</li>  <li><code>image_url</code>，缩略图的 URL，直接打开即可查看生成的效果。</li>  <li><code>image_width</code>：缩略图的像素宽度。</li>  <li><code>image_height</code>：缩略图的像素高度。</li>  <li><code>raw_image_url</code>：原图的 URL，和缩略图内容一样，但相比缩略图更加高清，加载速度会更慢一些。</li>  <li><code>raw_image_width</code>：原图的像素宽度。</li>  <li><code>raw_image_height</code>：原图的像素高度。</li>  <li><code>actions</code>，可以对生成的图片进行的进一步操作列表。这里一共列了 8 个，其中 <code>upscale</code> 代表放大，<code>variation</code> 代表变换。所以 <code>upscale1</code> 代表的就是对左上角第一张图片进行放大操作，<code>variation3</code> 就是代表根据左下角第三张图片进行变换操作。</li></ul><p>打开 <code>image_url</code> 或者 <code>raw_image_url</code> 所对应的链接，可以发现如图所示。</p><p><img src="https://cdn.acedata.cloud/qr2iyj.png" alt=""></p><p>可以看到，这里生成了一张 2x2 的预览图。到现在为止，第一次 API 调用就完成了。</p><h2 id="图像放大与变换"><a href="#图像放大与变换" class="headerlink" title="图像放大与变换"></a>图像放大与变换</h2><p>下面我们尝试针对当前生成的照片进行进一步的操作，比如我们觉得右上角第二张的图片还不错，但我们想进行一些变换微调，那么就可以进一步将 <code>action</code> 填写为 <code>variation2</code>，同时将 <code>image_id</code> 传递即可：</p><p><img src="https://cdn.acedata.cloud/ia7vpw.png" alt=""></p><p>这时候得到的结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1233387694839697411/1234201336543969401/36rgqit64j90qptsxnyq_Lamborghini_speeds_inside_a_volcano_id0494_10dc56a7-ec16-4bac-878e-2338f2ae5f5d.png?ex=662fdf10&amp;is=662e8d90&amp;hm=9aec96bca35ae20b6f9ab536101b9c4ea255eb6216cbf7000ac554937da071f3&amp;width=1024&amp;height=1024"</span>,</span><br><span class="line">  <span class="attr">"image_width"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"image_height"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1234201336543969401"</span>,</span><br><span class="line">  <span class="attr">"raw_image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1233387694839697411/1234201336543969401/36rgqit64j90qptsxnyq_Lamborghini_speeds_inside_a_volcano_id0494_10dc56a7-ec16-4bac-878e-2338f2ae5f5d.png?ex=662fdf10&amp;is=662e8d90&amp;hm=9aec96bca35ae20b6f9ab536101b9c4ea255eb6216cbf7000ac554937da071f3&amp;"</span>,</span><br><span class="line">  <span class="attr">"raw_image_width"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"raw_image_height"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"progress"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upscale1"</span>,</span><br><span class="line">    <span class="string">"upscale2"</span>,</span><br><span class="line">    <span class="string">"upscale3"</span>,</span><br><span class="line">    <span class="string">"upscale4"</span>,</span><br><span class="line">    <span class="string">"reroll"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"f4961620-1104-409f-9dc1-ba3ed15c2f4d"</span>,</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>打开 <code>image_url</code>，新生成的图片如下所示：</p><p><img src="https://cdn.acedata.cloud/4g6r09.png" alt=""></p><p>可以看到，针对上一张右上角的图片，我们再次得到了四张类似的照片。</p><p>这时候我们可以挑选其中一张进行精细化地放大操作，比如选第四张，那就可以 <code>action</code> 传入 <code>upscale4</code>，通过 <code>image_id</code> 再次传入当前图像的 ID 即可。</p><p><img src="https://cdn.acedata.cloud/jk9ohl.png" alt=""></p><blockquote>  <p>注意： <code>upscale</code> 操作相比 <code>variation</code> 来说，Midjourney 的耗时会更短一些。</p></blockquote><p>返回结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1233387694839697411/1234202545208033400/36rgqit64j90qptsxnyq_Lamborghini_speeds_inside_a_volcano_id0494_34edc3f5-2bd0-4f5b-a372-03270b02289b.png?ex=662fe031&amp;is=662e8eb1&amp;hm=f8006c4d33a03dfd027dffe4eb46ab0d113a4910aef07497f0b335c8998b7858&amp;width=512&amp;height=512"</span>,</span><br><span class="line">  <span class="attr">"image_width"</span>: <span class="number">512</span>,</span><br><span class="line">  <span class="attr">"image_height"</span>: <span class="number">512</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1234202545208033400"</span>,</span><br><span class="line">  <span class="attr">"raw_image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1233387694839697411/1234202545208033400/36rgqit64j90qptsxnyq_Lamborghini_speeds_inside_a_volcano_id0494_34edc3f5-2bd0-4f5b-a372-03270b02289b.png?ex=662fe031&amp;is=662e8eb1&amp;hm=f8006c4d33a03dfd027dffe4eb46ab0d113a4910aef07497f0b335c8998b7858&amp;"</span>,</span><br><span class="line">  <span class="attr">"raw_image_width"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"raw_image_height"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"progress"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upscale_2x"</span>,</span><br><span class="line">    <span class="string">"upscale_4x"</span>,</span><br><span class="line">    <span class="string">"variation_subtle"</span>,</span><br><span class="line">    <span class="string">"variation_strong"</span>,</span><br><span class="line">    <span class="string">"zoom_out_2x"</span>,</span><br><span class="line">    <span class="string">"zoom_out_1_5x"</span>,</span><br><span class="line">    <span class="string">"pan_left"</span>,</span><br><span class="line">    <span class="string">"pan_right"</span>,</span><br><span class="line">    <span class="string">"pan_up"</span>,</span><br><span class="line">    <span class="string">"pan_down"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"03f62b17-a6f1-4c8e-9b4d-1fc7bd5b1180"</span>,</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>其中 <code>image_url</code> 如图所示：</p><p><img src="https://cdn.acedata.cloud/jfndfo.png" alt=""></p><p>这样我们就成功得到了一张兰博基尼的照片。</p><p>同时注意到 <code>actions</code> 里面又包含了几个可进行的操作，介绍如下：</p><ul>  <li><code>upscale_2x</code>：对画面放大 2 倍，得到 2 倍高清图。</li>  <li><code>upscale_4x</code>：对画面放大 4 倍，得到 4 倍高清图。</li>  <li><code>zoom_out_2x</code>：对画面进行缩小两倍操作（周围区域填充）。</li>  <li><code>zoom_out_1_5x</code>：对画面进行缩小 1.5 倍操作（周围区域填充）。</li>  <li><code>pan_left</code>：对画面进行左偏移操作。</li>  <li><code>pan_right</code>：对画面进行右便宜操作。</li>  <li><code>pan_up</code>：对画面进行上偏移操作。</li>  <li><code>pan_down</code>：对画面进行下偏移操作。</li></ul><p>可以继续按照上述流程传入对应的变换指令进行连续生图操作。</p><h2 id="图像改写（垫图）"><a href="#图像改写（垫图）" class="headerlink" title="图像改写（垫图）"></a>图像改写（垫图）</h2><p>该 API 也支持图像改写，俗称垫图，我们可以输入一张图片 URL 以及需要改写的描述文字，该 API 就可以返回改写后的图片。</p><blockquote>  <p>注意：输入的图片 URL 需要是一张纯图片，不能是一个网页里面展示一张图片，否则无法进行图像改写。建议使用图床来上传获取图片的 URL。</p></blockquote><p>例如，我们这里有一张公路落日的图片，公路旁边有一些树木和楼房，如图所示：</p><p><img src="https://cdn.acedata.cloud/mq335u.png" alt=""></p><p>现在我们想在它的基础上改写成海滩旁边，同时放一辆汽车停在路边。我们就可以构造如下的 prompt：</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">https://cdn.acedata.cloud/v014oc.png an illustration of a car parked on the beach --iw 2</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，我们的 prompt 的最开头是一个 HTTPS 开头的图片链接，然后接着加一个空格，后面跟上 prompt 文字的内容。这里我们还用了额外的一些高级参数，如 <code>—iw 2</code> 来调整图片的权重。</p><p>我们可以将如上内容作为一个整体，传递给 <code>prompt</code> 字段，如图所示：</p><p><img src="https://cdn.acedata.cloud/pfcoy1.png" alt=""></p><p>输出结果如下：</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234427310434947145/1234539663515975690/atmateosa5693_An_illustration_of_a_car_parked_on_the_beach_id26_cc8650ec-7e4b-4685-8911-78172430d8a7.png?ex=66311a28&amp;is=662fc8a8&amp;hm=c39707a1f22bc7f12874060ea6ed58ba37c188139ccc9a13c61ed9f37e66ea74&amp;width=1456&amp;height=816"</span>,</span><br><span class="line">  <span class="string">"image_width"</span>: 1456,</span><br><span class="line">  <span class="string">"image_height"</span>: 816,</span><br><span class="line">  <span class="string">"image_id"</span>: <span class="string">"1234539663515975690"</span>,</span><br><span class="line">  <span class="string">"raw_image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234427310434947145/1234539663515975690/atmateosa5693_An_illustration_of_a_car_parked_on_the_beach_id26_cc8650ec-7e4b-4685-8911-78172430d8a7.png?ex=66311a28&amp;is=662fc8a8&amp;hm=c39707a1f22bc7f12874060ea6ed58ba37c188139ccc9a13c61ed9f37e66ea74&amp;"</span>,</span><br><span class="line">  <span class="string">"raw_image_width"</span>: 2912,</span><br><span class="line">  <span class="string">"raw_image_height"</span>: 1632,</span><br><span class="line">  <span class="string">"progress"</span>: 100,</span><br><span class="line">  <span class="string">"actions"</span>: [</span><br><span class="line">    <span class="string">"upscale1"</span>,</span><br><span class="line">    <span class="string">"upscale2"</span>,</span><br><span class="line">    <span class="string">"upscale3"</span>,</span><br><span class="line">    <span class="string">"upscale4"</span>,</span><br><span class="line">    <span class="string">"reroll"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"task_id"</span>: <span class="string">"24a79e8b-a79d-471a-aef7-089dc0627ee8"</span>,</span><br><span class="line">  <span class="string">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这时候我们就得到了如下生成的图片：</p><p><img src="https://cdn.acedata.cloud/1vwkuv.png" alt=""></p><p>可以看到，在原来的图片整体风格和构图不变的前提下，整个场景变成了海滩旁边，同时公路上还出现了汽车，这就是 Prompt with Image。</p><h2 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h2><p>该 API 也支持图像融合，我们可以传入多张图片，以实现不同的图片融合效果。</p><p>比如说这里我们一共有两张图片，一张是一只玩具熊，另一张是一个电锯，分别如图所示：</p><p><img src="https://cdn.acedata.cloud/bdzqdc.png" alt=""></p><p><img src="https://cdn.acedata.cloud/ngdadr.png" alt=""></p><p>现在我们想把二者融合起来，让这只熊拿着这个电锯，怎么做呢？</p><p>我们可以构造如下的 prompt：</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">https://cdn.acedata.cloud/8fapzl.png https://cdn.acedata.cloud/c1igbw.png The bear is holding the chainsaw --iw 2</span><br></pre>      </td>    </tr>  </table></figure><p>可以发现，和 Image with Prompt 类似，我们这里将多张图片 URL 放在了 prompt 开头，并以空格分隔，最后再加上文字 prompt，将如上内容作为一个整体传递给 <code>prompt</code> 参数，运行效果如下：</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234547236830973972/kcisok_The_bear_is_holding_the_chainsaw_id8873344_ad605bc4-ba19-4807-b94f-367dab672f7a.png?ex=66312136&amp;is=662fcfb6&amp;hm=0fb1e2261c9a30b04de9da9b23b7562eb73677f1bbda1fae52c7243b12d25aac&amp;width=1024&amp;height=1024"</span>,</span><br><span class="line">  <span class="string">"image_width"</span>: 1024,</span><br><span class="line">  <span class="string">"image_height"</span>: 1024,</span><br><span class="line">  <span class="string">"image_id"</span>: <span class="string">"1234547236830973972"</span>,</span><br><span class="line">  <span class="string">"raw_image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234547236830973972/kcisok_The_bear_is_holding_the_chainsaw_id8873344_ad605bc4-ba19-4807-b94f-367dab672f7a.png?ex=66312136&amp;is=662fcfb6&amp;hm=0fb1e2261c9a30b04de9da9b23b7562eb73677f1bbda1fae52c7243b12d25aac&amp;"</span>,</span><br><span class="line">  <span class="string">"raw_image_width"</span>: 2048,</span><br><span class="line">  <span class="string">"raw_image_height"</span>: 2048,</span><br><span class="line">  <span class="string">"progress"</span>: 100,</span><br><span class="line">  <span class="string">"actions"</span>: [</span><br><span class="line">    <span class="string">"upscale1"</span>,</span><br><span class="line">    <span class="string">"upscale2"</span>,</span><br><span class="line">    <span class="string">"upscale3"</span>,</span><br><span class="line">    <span class="string">"upscale4"</span>,</span><br><span class="line">    <span class="string">"reroll"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"task_id"</span>: <span class="string">"891f2645-ee15-4c7b-ac24-d98163c8e57e"</span>,</span><br><span class="line">  <span class="string">"success"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>我们就得到了如下结果：</p><p><img src="https://cdn.acedata.cloud/vjtzdo.png" alt=""></p><p>可以看到，我们就成功实现了图片融合。</p><blockquote>  <p>注意：图片融合最多可以支持 5 个图片 URL 作为输入，也就是最多支持 5 张图片融合，输入格式同上。</p></blockquote><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Midjourney 生成图片需要等待一段时间，所以本 API 也默认设计为了长等待模式。但在部分场景下，长等待可能会带来一些额外的资源开销，因此本 API 也提供了异步 Webhook 回调的方式，当图片生成成功或失败时，其结果都会通过 HTTP 请求的方式发送到指定的 Webhook 回调 URL。回调 URL 接收到结果之后可以进行进一步的处理。</p><p>下面演示具体的调用流程。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/" target="_blank" rel="noopener" title="https://webhook.site/">https://webhook.site/</a>，打开该网站即可得到一个 Webhook URL，如图所示：</p><p><img src="https://cdn.acedata.cloud/srf3tq.png" alt=""></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <a href="https://webhook.site/995d0a91-d737-40a7-a3b9-5baf68ed924c" target="_blank" rel="noopener" title="https://webhook.site/995d0a91-d737-40a7-a3b9-5baf68ed924c">https://webhook.site/995d0a91-d737-40a7-a3b9-5baf68ed924c</a>。</p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入 <code>prompt</code>，如图所示：</p><p><img src="https://cdn.acedata.cloud/hclosy.png" alt=""></p><p>点击测试之后会立即得到一个 <code>task_id</code> 的响应，用于标识当前生成任务的 ID，如图所示：</p><p><img src="https://cdn.acedata.cloud/84i0bg.png" alt=""></p><p>稍等片刻，等图片生成结束，可以发发现 Webhook URL 收到了一个 HTTP 请求，如图所示：</p><p><img src="https://cdn.acedata.cloud/6znvgq.png" alt=""></p><p>其结果就是当前任务的结果，内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"f6e39eaf-652a-4bf5-a15c-79d8b143b80a"</span>,</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234551030549839932/kcisok_A_cat_sitting_on_a_table_id2724480_591c5c85-ec80-42ab-9fe5-9adfbed192e4.png?ex=663124be&amp;is=662fd33e&amp;hm=da725eb74aae375d60beec38b4cd26c5a7b373b1662f222ff838a8ea6fd5e798&amp;width=1024&amp;height=1024"</span>,</span><br><span class="line">  <span class="attr">"image_width"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"image_height"</span>: <span class="number">1024</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1234551030549839932"</span>,</span><br><span class="line">  <span class="attr">"raw_image_url"</span>: <span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234551030549839932/kcisok_A_cat_sitting_on_a_table_id2724480_591c5c85-ec80-42ab-9fe5-9adfbed192e4.png?ex=663124be&amp;is=662fd33e&amp;hm=da725eb74aae375d60beec38b4cd26c5a7b373b1662f222ff838a8ea6fd5e798&amp;"</span>,</span><br><span class="line">  <span class="attr">"raw_image_width"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"raw_image_height"</span>: <span class="number">2048</span>,</span><br><span class="line">  <span class="attr">"progress"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upscale1"</span>,</span><br><span class="line">    <span class="string">"upscale2"</span>,</span><br><span class="line">    <span class="string">"upscale3"</span>,</span><br><span class="line">    <span class="string">"upscale4"</span>,</span><br><span class="line">    <span class="string">"reroll"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>其中 <code>success</code> 字段标识了该任务是否执行成功，如果执行成功，还会有同样的 <code>actions</code>, <code>image_id</code>, <code>image_url</code> 字段，和上文介绍的返回结果是一样的，另外还有 <code>task_id</code> 用于标识任务，以实现 Webhook 结果和最初 API 请求的关联。</p><p>如果图片生成失败，Webhook URL 则会收到类似如下内容：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"7ba0feaf-d20b-4c22-a35a-31ec30fc7715"</span>,</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"bad_request"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Unrecognized argument(s): `-c`, `x`"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这里的 <code>success</code> 字段会是 <code>false</code>，同时还会有 <code>error.code</code> 和 <code>error.message</code> 字段描述了任务错误的详情信息，Webhook 服务器根据对应的结果进行处理即可。</p><h2 id="流式输出"><a href="#流式输出" class="headerlink" title="流式输出"></a>流式输出</h2><p>Midjourney 官方在生成图片的时候是有进度的，在最开始是一张模糊的照片，然后经过几次迭代之后，图片逐渐变得清晰，最后得到完整的图片。</p><p>所以，一张图片的生成过程大约可以分为「发送命令」-&gt;「开始生图（多次迭代逐渐清晰）」-&gt;「生图完毕」的阶段。</p><p>在没开启流式输出的情况下，本 API 从发起请求到返回结果，实际上是从上述「发送命令」-&gt;「生图完毕」的全过程，中间生图的过程也全被包含在里面，由于 Midjourney 本身生成图片速度较慢，整个过程大约需要等待一分钟或更久。</p><p>所以为了更好的用户体验，本 API 支持流式输出，即当「开始生图」的时候就开始返回结果，每当绘制进度有变化，就会流式将结果输出，直至生图结束。</p><p>如果想流式返回响应，可以更改请求头里面的 <code>accept</code> 参数，修改为 <code>application/x-ndjson</code>，不过调用代码需要有对应的更改才能支持流式响应。</p><p>Python 样例代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://api.acedata.cloud/midjourney/imagine'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'application/x-ndjson'</span>,</span><br><span class="line">    <span class="string">'authorization'</span>: <span class="string">'Bearer &#123;token&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line">body = &#123;</span><br><span class="line">    <span class="string">"prompt"</span>: <span class="string">"a beautiful cat --v 6"</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url, headers=headers, json=body, stream=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> r.iter_lines():</span><br><span class="line">    print(line.decode())</span><br></pre>      </td>    </tr>  </table></figure><p>运行结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234558451443699803/eae94f0f-0ba5-4b3c-9bad-59fb33ac2cbc_grid_0.webp?ex=66312ba7&amp;is=662fda27&amp;hm=4625d5f12158bffc07c4faaf6ce75af6f1396122f148b33b91f3e20b48fecc8b&amp;width=256&amp;height=256"</span>,<span class="attr">"image_width"</span>:<span class="number">256</span>,<span class="attr">"image_height"</span>:<span class="number">256</span>,<span class="attr">"image_id"</span>:<span class="string">"1234558451443699803"</span>,<span class="attr">"raw_image_url"</span>:<span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234558451443699803/eae94f0f-0ba5-4b3c-9bad-59fb33ac2cbc_grid_0.webp?ex=66312ba7&amp;is=662fda27&amp;hm=4625d5f12158bffc07c4faaf6ce75af6f1396122f148b33b91f3e20b48fecc8b&amp;"</span>,<span class="attr">"raw_image_width"</span>:<span class="number">512</span>,<span class="attr">"raw_image_height"</span>:<span class="number">512</span>,<span class="attr">"progress"</span>:<span class="number">35</span>,<span class="attr">"actions"</span>:[],<span class="attr">"task_id"</span>:<span class="string">"49589d2c-b6b3-4fbf-9f82-93068509c76f"</span>,<span class="attr">"success"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234558458595115149/eae94f0f-0ba5-4b3c-9bad-59fb33ac2cbc_grid_0.webp?ex=66312ba9&amp;is=662fda29&amp;hm=9af53fa645127131a88dfbb3930add7abda710c12a3d6c30c457d6a067b36bab&amp;width=256&amp;height=256"</span>,<span class="attr">"image_width"</span>:<span class="number">256</span>,<span class="attr">"image_height"</span>:<span class="number">256</span>,<span class="attr">"image_id"</span>:<span class="string">"1234558458595115149"</span>,<span class="attr">"raw_image_url"</span>:<span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234558458595115149/eae94f0f-0ba5-4b3c-9bad-59fb33ac2cbc_grid_0.webp?ex=66312ba9&amp;is=662fda29&amp;hm=9af53fa645127131a88dfbb3930add7abda710c12a3d6c30c457d6a067b36bab&amp;"</span>,<span class="attr">"raw_image_width"</span>:<span class="number">512</span>,<span class="attr">"raw_image_height"</span>:<span class="number">512</span>,<span class="attr">"progress"</span>:<span class="number">75</span>,<span class="attr">"actions"</span>:[],<span class="attr">"task_id"</span>:<span class="string">"49589d2c-b6b3-4fbf-9f82-93068509c76f"</span>,<span class="attr">"success"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234558483408490566/kcisok_A_landscape_painting_of_a_beautiful_sunset_id5963392_eae94f0f-0ba5-4b3c-9bad-59fb33ac2cbc.png?ex=66312baf&amp;is=662fda2f&amp;hm=185ea8f130806bf8bd96911bd251808455fd65596edcdb459f9b3cfd7860387c&amp;width=1024&amp;height=1024"</span>,<span class="attr">"image_width"</span>:<span class="number">1024</span>,<span class="attr">"image_height"</span>:<span class="number">1024</span>,<span class="attr">"image_id"</span>:<span class="string">"1234558483408490566"</span>,<span class="attr">"raw_image_url"</span>:<span class="string">"https://midjourney.cdn.acedata.cloud/attachments/1234291876639674388/1234558483408490566/kcisok_A_landscape_painting_of_a_beautiful_sunset_id5963392_eae94f0f-0ba5-4b3c-9bad-59fb33ac2cbc.png?ex=66312baf&amp;is=662fda2f&amp;hm=185ea8f130806bf8bd96911bd251808455fd65596edcdb459f9b3cfd7860387c&amp;"</span>,<span class="attr">"raw_image_width"</span>:<span class="number">2048</span>,<span class="attr">"raw_image_height"</span>:<span class="number">2048</span>,<span class="attr">"progress"</span>:<span class="number">100</span>,<span class="attr">"actions"</span>:[<span class="string">"upscale1"</span>,<span class="string">"upscale2"</span>,<span class="string">"upscale3"</span>,<span class="string">"upscale4"</span>,<span class="string">"reroll"</span>,<span class="string">"variation1"</span>,<span class="string">"variation2"</span>,<span class="string">"variation3"</span>,<span class="string">"variation4"</span>],<span class="attr">"task_id"</span>:<span class="string">"49589d2c-b6b3-4fbf-9f82-93068509c76f"</span>,<span class="attr">"success"</span>:<span class="literal">true</span>&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，启用流式输出之后，返回结果就是逐行的 JSON 了。</p><p>在 Node.js 环境中，实现代码可写为如下：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">"https://api.acedata.cloud/midjourney/imagine"</span>;</span><br><span class="line"><span class="keyword">const</span> headers = &#123;</span><br><span class="line">  <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">  accept: <span class="string">"application/x-ndjson"</span>,</span><br><span class="line">  authorization: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">  prompt: <span class="string">"a beautiful cat --v 6"</span>,</span><br><span class="line">  action: <span class="string">"generate"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .post(url, body, &#123; <span class="attr">headers</span>: headers, <span class="attr">responseType</span>: <span class="string">"stream"</span> &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    response.data.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chunk.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre>      </td>    </tr>  </table></figure><p>这些示例运行的结果都是相似的。</p><p>请注意，流式输出结果中有一个称为 progress 的字段，表示生成进度，范围从 0 到 100。如果需要，您可以在页面上显示这些信息。</p><blockquote>  <p>注意：当生成未完全完成时，<code>actions</code> 字段为空，表示无法对中间图像执行进一步处理操作。生成完成后，在生成过程中生成的 image_url 将被销毁。</p></blockquote><p>此外，您可以通过指定 <code>accept=application/x-ndjson</code> 的请求头和 callback_url 的请求体，将流式结果与异步回调结合起来，然后 callback_url 可以接收到多个流式结果的 POST 请求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在人工智能绘图领域，想必大家听说过 Midjourney 的大名吧！&lt;/p&gt;
&lt;p&gt;Midjourney 是一款非常强大的 AI 绘图工具，只要输入关键字，就能在短短一两分钟生成十分精美的图像。Midjourney 以其出色的绘图能力在业界独树一帜，如今，Midjourne
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://cuiqingcai.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="Midjourney" scheme="https://cuiqingcai.com/tags/Midjourney/"/>
    
      <category term="api" scheme="https://cuiqingcai.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>如何用 AI 问答 API 彻底改变用户体验！</title>
    <link href="https://cuiqingcai.com/42346.html"/>
    <id>https://cuiqingcai.com/42346.html</id>
    <published>2024-05-29T20:09:22.000Z</published>
    <updated>2025-08-11T15:24:05.310Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，市面上一些问答 API 的对接还是相对没那么容易的，比如说 OpenAI 的 Chat Completions API，它有一个 <code>messages</code> 字段，如果要完成连续对话，需要我们把所有的上下文历史全部传递，同时还需要处理 Token 超出限制的问题。</p><p>AceDataCloud 提供的 AI 问答 API 针对上述情况进行了优化，在保证问答效果不变的情况下，对连续对话的实现进行了封装，对接时无需再关心 messages 的传递，也无需关心 Token 超出限制的问题（API 内部自动进行了处理），同时也提供了对话查询、修改等功能，使得整体的对接大大简化。</p><p>本文档会介绍下 AI 问答 API 的对接说明。</p><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>要使用 API，需要先到 <a href="https://platform.acedata.cloud/documents/59fb1199-6694-4afb-a222-3554d7f7d05a" target="_blank" rel="noopener">AI 问答 API</a> 对应页面申请对应的服务，进入页面之后，点击「Acquire」按钮，如图所示：</p><p><img src="https://cdn.acedata.cloud/q6ytrc.png" alt=""></p><p>如果你尚未登录或注册，会自动跳转到登录页面邀请您来注册和登录，登录注册之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先先了解下基本的使用方式，就是输入问题，获得回答，只需要简单地传递一个 <code>question</code> 字段，并指定相应模型即可。</p><p>比如说询问：“What’s your name？”，我们接下来就可以在界面上填写对应的内容，如图所示：</p><p><img src="https://cdn.acedata.cloud/xqxda4.png" alt=""></p><p>可以看到这里我们设置了 Request Headers，包括：</p><ul>  <li><code>accept</code>：想要接收怎样格式的响应结果，这里填写为 <code>application/json</code>，即 JSON 格式。</li>  <li><code>authorization</code>：调用 API 的密钥，申请之后可以直接下拉选择。</li></ul><p>另外设置了 Request Body，包括：</p><ul>  <li><code>model</code>：模型的选择，比如主流的 GPT 3.5，GPT 4 等。</li>  <li><code>question</code>：需要询问的问题，可以是任意的纯文本。</li></ul><p>选择之后，可以发现右侧也生成了对应代码，如图所示：</p><p><img src="https://cdn.acedata.cloud/dvkps6.png" alt=""></p><p>点击「Try」按钮即可进行测试，如上图所示，这里我们就得到了如下结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"answer"</span>: <span class="string">"I am an AI language model developed by OpenAI and I don't have a personal name. However, you can call me GPT or simply Chatbot. How can I assist you today?"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，这里返回的结果中有一个 <code>answer</code> 字段，就是该问题的回答。我们可以输入任意问题，就可以得到任意的回答。</p><p>如果你不需要任何多轮对话的支持，这个 API 可以极大方便你的对接。</p><p>另外如果想生成对应的对接代码，可以直接复制生成，例如 CURL 的代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/aichat/conversations' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "gpt-3.5",</span><br><span class="line">  "question": "What's your name?"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>Python 的对接代码如下：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.acedata.cloud/aichat/conversations"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"authorization"</span>: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"model"</span>: <span class="string">"gpt-3.5"</span>,</span><br><span class="line">    <span class="string">"question"</span>: <span class="string">"What's your name?"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre>      </td>    </tr>  </table></figure><h2 id="多轮对话"><a href="#多轮对话" class="headerlink" title="多轮对话"></a>多轮对话</h2><p>如果您想要对接多轮对话功能，需要传递一个额外参数 <code>stateful</code>，其值为 <code>true</code>，后续的每次请求都要携带该参数。传递了 <code>stateful</code> 参数之后，API 会额外返回一个 <code>id</code> 参数，代表当前对话的 ID，后续我们只需要将该 ID 作为参数传递，就可以轻松实现多轮对话。</p><p>下面我们来演示下具体的操作。</p><p>第一次请求，将 <code>stateful</code> 参数设置为 <code>true</code>，并正常传递 <code>model</code> 和 <code>question</code> 参数，如图所示：</p><p><img src="https://cdn.acedata.cloud/fn4bi9.png" alt=""></p><p>对应代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/aichat/conversations' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "gpt-3.5",</span><br><span class="line">  "question": "What's your name?",</span><br><span class="line">  "stateful": true</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>可以得到如下回答：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"answer"</span>: <span class="string">"I am an AI language model created by OpenAI and I don't have a personal name. You can simply call me OpenAI or ChatGPT. How can I assist you today?"</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>第二次请求，将第一次请求返回的 <code>id</code> 字段作为参数传递，同时 <code>stateful</code> 参数依然设置为 <code>true</code>，询问「What I asked you just now?」，如图所示：</p><p><img src="https://cdn.acedata.cloud/46a6kd.png" alt=""></p><p>对应代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/aichat/conversations' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "gpt-3.5",</span><br><span class="line">  "stateful": true,</span><br><span class="line">  "id": "7cdb293b-2267-4979-a1ec-48d9ad149916",</span><br><span class="line">  "question": "What I asked you just now?"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"answer"</span>: <span class="string">"You asked me what my name is. As an AI language model, I do not possess a personal identity, so I don't have a specific name. However, you can refer to me as OpenAI or ChatGPT, the names used for this AI model. Is there anything else I can help you with?"</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，就可以根据上下文回答对应的问题了。</p><h2 id="流式响应"><a href="#流式响应" class="headerlink" title="流式响应"></a>流式响应</h2><p>该接口也支持流式响应，这对网页对接十分有用，可以让网页实现逐字显示效果。</p><p>如果想流式返回响应，可以更改请求头里面的 <code>accept</code> 参数，修改为 <code>application/x-ndjson</code>。</p><p>修改如图所示，不过调用代码需要有对应的更改才能支持流式响应。</p><p><img src="https://cdn.acedata.cloud/axt1aa.png" alt=""></p><p>将 <code>accept</code> 修改为 <code>application/x-ndjson</code> 之后，API 将逐行返回对应的 JSON 数据，在代码层面我们需要做相应的修改来获得逐行的结果。</p><p>Python 样例调用代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://api.acedata.cloud/aichat/conversations"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/x-ndjson"</span>,</span><br><span class="line">    <span class="string">"authorization"</span>: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"model"</span>: <span class="string">"gpt-3.5"</span>,</span><br><span class="line">    <span class="string">"stateful"</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>,</span><br><span class="line">    <span class="string">"question"</span>: <span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload, headers=headers, stream=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> response.iter_lines():</span><br><span class="line">    print(line.decode())</span><br></pre>      </td>    </tr>  </table></figure><p>输出效果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello"</span>, <span class="attr">"delta_answer"</span>: <span class="string">"Hello"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello!"</span>, <span class="attr">"delta_answer"</span>: <span class="string">"!"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello! How"</span>, <span class="attr">"delta_answer"</span>: <span class="string">" How"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello! How can"</span>, <span class="attr">"delta_answer"</span>: <span class="string">" can"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello! How can I"</span>, <span class="attr">"delta_answer"</span>: <span class="string">" I"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello! How can I assist"</span>, <span class="attr">"delta_answer"</span>: <span class="string">" assist"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello! How can I assist you"</span>, <span class="attr">"delta_answer"</span>: <span class="string">" you"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello! How can I assist you today"</span>, <span class="attr">"delta_answer"</span>: <span class="string">" today"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"answer"</span>: <span class="string">"Hello! How can I assist you today?"</span>, <span class="attr">"delta_answer"</span>: <span class="string">"?"</span>, <span class="attr">"id"</span>: <span class="string">"7cdb293b-2267-4979-a1ec-48d9ad149916"</span>&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，响应里面的 <code>answer</code> 即为最新的回答内容，<code>delta_answer</code> 则是新增的回答内容，您可以根据结果来对接到您的系统中。</p><p>JavaScript 也是支持的，比如 Node.js 的流式调用代码如下：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">"https://api.acedata.cloud/aichat/conversations"</span>;</span><br><span class="line"><span class="keyword">const</span> headers = &#123;</span><br><span class="line">  <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">  Accept: <span class="string">"application/x-ndjson"</span>,</span><br><span class="line">  Authorization: <span class="string">"Bearer &#123;token&#125;"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">  question: <span class="string">"Hello"</span>,</span><br><span class="line">  model: <span class="string">"gpt-3.5"</span>,</span><br><span class="line">  stateful: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .post(url, body, &#123; <span class="attr">headers</span>: headers, <span class="attr">responseType</span>: <span class="string">"stream"</span> &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    response.data.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chunk.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre>      </td>    </tr>  </table></figure><p>Java 样例代码：</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre>      </td>      <td class="code">        <pre><span class="line">String url = <span class="string">"https://api.acedata.cloud/aichat/conversations"</span>;</span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">MediaType mediaType = MediaType.parse(<span class="string">"application/json"</span>);</span><br><span class="line">RequestBody body = RequestBody.create(mediaType, <span class="string">"&#123;\"question\": \"Hello\", \"stateful\": true, \"model\": \"gpt-3.5\"&#125;"</span>);</span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(url)</span><br><span class="line">        .post(body)</span><br><span class="line">        .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">        .addHeader(<span class="string">"Accept"</span>, <span class="string">"application/x-ndjson"</span>)</span><br><span class="line">        .addHeader(<span class="string">"Authorization"</span>, <span class="string">"Bearer &#123;token&#125;"</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                <span class="keyword">new</span> InputStreamReader(response.body().byteStream(), <span class="string">"UTF-8"</span>))) &#123;</span><br><span class="line">            String responseLine;</span><br><span class="line">            <span class="keyword">while</span> ((responseLine = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(responseLine);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre>      </td>    </tr>  </table></figure><p>其他语言可以另外自行改写，原理都是一样的。</p><h2 id="模型预设"><a href="#模型预设" class="headerlink" title="模型预设"></a>模型预设</h2><p>我们知道，OpenAI 相关的 API 有对应的 <code>system_prompt</code> 的概念，就是给整个模型设置一个预设，比如它叫什么名字等等。本 AI 问答 API 也暴露了这个参数，叫做 <code>preset</code>，利用它我们可以给模型增加预设，我们用一个例子来体验下：</p><p>这里我们额外添加 <code>preset</code> 字段，内容为 <code>You are a professional artist</code>，如图所示：</p><p><img src="https://cdn.acedata.cloud/ird6i9.png" alt=""></p><p>对应代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/aichat/conversations' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "gpt-3.5",</span><br><span class="line">  "stateful": true,</span><br><span class="line">  "question": "What can you help me?",</span><br><span class="line">  "preset": "You are a professional artist"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>运行结果如下：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"answer"</span>: <span class="string">"As a professional artist, I can offer a range of services and assistance depending on your specific needs. Here are a few ways I can help you:\n\n1. Custom Artwork: If you have a specific vision or idea, I can create custom artwork for you. This can include paintings, drawings, digital art, or any other medium you prefer.\n\n2. Commissioned Pieces: If you have a specific subject or concept in mind, I can create commissioned art pieces tailored to your preferences. This could be for personal enjoyment or as a unique gift for someone special.\n\n3. Art Consultation: If you need guidance on art selection, interior design, or how to showcase and display art in your space, I can provide professional advice to help enhance your aesthetic sense and create a cohesive look."</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到这里我们告诉 GPT 他是一个机器人，然后问它可以为我们做什么，他就可以扮演一个机器人的角色来回答问题了。</p><h2 id="图片识别"><a href="#图片识别" class="headerlink" title="图片识别"></a>图片识别</h2><p>本 AI 也能支持添加附件进行图片识别，通过 <code>references</code> 传递对应图片链接即可，比如我这里有一张苹果的图片，如图所示：</p><p><img src="https://cdn.acedata.cloud/ht05g0.png" alt=""></p><p>该图片的链接是 <a href="https://cdn.acedata.cloud/ht05g0.png" target="_blank" rel="noopener">https://cdn.acedata.cloud/ht05g0.png</a>，我们直接将其作为 <code>references</code> 参数传递即可，同时需要注意的是，模型必须要选择支持视觉识别的模型，目前支持的是 <code>gpt-4-vision</code>，所以输入如下：</p><p><img src="https://cdn.acedata.cloud/cstrbq.png" alt=""></p><p>对应的代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/aichat/conversations' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "gpt-4-vision",</span><br><span class="line">  "question": "How many apples in the picture?",</span><br><span class="line">  "references": ["https://cdn.acedata.cloud/ht05g0.png"]</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>运行结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"answer"</span>: <span class="string">"There are 5 apples in the picture."</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，我们就成功得到了对应图片的回答结果。</p><h2 id="联网问答"><a href="#联网问答" class="headerlink" title="联网问答"></a>联网问答</h2><p>本 API 还支持联网模型，包括 GPT-3.5、GPT-4 均能支持，在 API 背后有一个自动搜索互联网并总结的过程，我们可以选择模型为 <code>gpt-3.5-browsing</code> 来体验下，如图所示：</p><p><img src="https://cdn.acedata.cloud/x5i8np.png" alt=""></p><p>代码如下：</p><figure class="highlight shell">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST 'https://api.acedata.cloud/aichat/conversations' \</span><br><span class="line">-H 'accept: application/json' \</span><br><span class="line">-H 'authorization: Bearer &#123;token&#125;' \</span><br><span class="line">-H 'content-type: application/json' \</span><br><span class="line">-d '&#123;</span><br><span class="line">  "model": "gpt-3.5-browsing",</span><br><span class="line">  "question": "What's the weather of New York today?"</span><br><span class="line">&#125;'</span><br></pre>      </td>    </tr>  </table></figure><p>运行结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"answer"</span>: <span class="string">"The weather in New York today is as follows:\n- Current Temperature: 16°C (60°F)\n- High: 16°C (60°F)\n- Low: 10°C (50°F)\n- Humidity: 47%\n- UV Index: 6 of 11\n- Sunrise: 5:42 am\n- Sunset: 8:02 pm\n\nIt's overcast with a chance of occasional showers overnight, and the chance of rain is 50%.\nFor more details, you can visit [The Weather Channel](https://weather.com/weather/tenday/l/96f2f84af9a5f5d452eb0574d4e4d8a840c71b05e22264ebdc0056433a642c84).\n\nIs there anything else you'd like to know?"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，这里它自动联网搜索了 The Weather Channel 网站，并获得了里面的信息，然后进一步返回了实时结果。</p><blockquote>  <p>如果对模型回答质量有更高要求，可以将模型更换为 <code>gpt-4-browsing</code>，回答效果会更好。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道，市面上一些问答 API 的对接还是相对没那么容易的，比如说 OpenAI 的 Chat Completions API，它有一个 &lt;code&gt;messages&lt;/code&gt; 字段，如果要完成连续对话，需要我们把所有的上下文历史全部传递，同时还需要处理 Token 
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://cuiqingcai.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="api" scheme="https://cuiqingcai.com/tags/api/"/>
    
      <category term="chatgpt" scheme="https://cuiqingcai.com/tags/chatgpt/"/>
    
  </entry>
  
  <entry>
    <title>五分钟搭建自己的AI音乐站点率</title>
    <link href="https://cuiqingcai.com/42344.html"/>
    <id>https://cuiqingcai.com/42344.html</id>
    <published>2024-05-27T10:50:22.000Z</published>
    <updated>2025-08-11T15:24:05.305Z</updated>
    
    <content type="html"><![CDATA[<p>在这个数字化时代，人工智能技术正以惊人的速度改变着我们的生活方式和创造方式。音乐作为一种最直接、最感性的艺术形式，自然也成为了人工智能技术的应用场景之一。今天，我们将以 Vue 和 Node.js 为基础，利用现有的 API 来快速搭建一个 Suno AI 音乐站点。让我们一起探索这个令人兴奋的过程吧！</p><p><img src="https://cdn.acedata.cloud/qky8lk.png" alt=""></p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>在动手之前，我们需要确保已经准备好了必要的环境和工具：</p><p>Vue 和 Node.js 环境：确保你的开发环境中已经配置好了 Vue 和 Node.js，这将是我们构建前端和后端的基础。</p><p>文本编辑器或 IDE：选择你熟悉和喜欢的文本编辑器，如 VS Code、Sublime Text 等。</p><p>Suno AI音乐API密钥：这是我们生成音乐所需的关键。这里我们选择的是Acedata提供的Suno API,注册方法如下：</p><p>我们先到 <a href="https://platform.acedata.cloud/documents/4da95d9d-7722-4a72-857d-bf6be86036e9?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener">Suno Audios Generation API</a> 页面申请Suno API 服务：</p><p><img src="https://cdn.acedata.cloud/l5o343.png" alt=""></p><p>如果你尚未登录或注册，会跳转到登录页面邀请您来注册和登录，注册登录之后会自动返回当前页面。</p><p>在首次申请时会有免费额度赠送，可以免费使用该 API。申请了API后，在 Credentials 查找到 Token,点击复制这个值备用，类似这样的：8125d23343388839c6e</p><p><img src="https://cdn.acedata.cloud/qbg8t4.png" alt=""></p><p>好了，现在，我们获得了 Suno API,下面就可以来快速的搭建 AI 音乐生成平台了。</p><h2 id="二、搭建前端和后端"><a href="#二、搭建前端和后端" class="headerlink" title="二、搭建前端和后端"></a>二、搭建前端和后端</h2><h3 id="1-创建-Vue-项目"><a href="#1-创建-Vue-项目" class="headerlink" title="1. 创建 Vue 项目"></a>1. 创建 Vue 项目</h3><p>为了更清晰地组织前端和后端代码，我们将项目目录结构分为两个主要部分：frontend 和 backend。以下是具体的目录结构和说明：</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight stylus">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">suno-music-site/</span><br><span class="line">│</span><br><span class="line">├── backend/</span><br><span class="line">│   ├── node_modules/</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── package-lock.json</span><br><span class="line">│   └── server.js</span><br><span class="line">│</span><br><span class="line">├── frontend/</span><br><span class="line">│   ├── node_modules/</span><br><span class="line">│   ├── public/</span><br><span class="line">│   ├── src/</span><br><span class="line">│   │   ├── assets/</span><br><span class="line">│   │   ├── components/</span><br><span class="line">│   │   ├── App.vue</span><br><span class="line">│   │   ├── main.js</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── package-lock.json</span><br><span class="line">│   └── vue<span class="selector-class">.config</span>.js</span><br><span class="line">│</span><br><span class="line">└── README.md</span><br></pre>      </td>    </tr>  </table></figure><p>我们创建一个 suno-music-site 目录。</p><h3 id="2-创建后端"><a href="#2-创建后端" class="headerlink" title="2.创建后端"></a>2.创建后端</h3><p>创建后端目录和文件，在项目根目录下创建 backend 目录，并进入该目录：</p><figure class="highlight dos">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="built_in">mkdir</span> backend</span><br><span class="line"><span class="built_in">cd</span> backend</span><br></pre>      </td>    </tr>  </table></figure><p>初始化 Node.js 项目</p><p>在 backend 目录下初始化 Node.js 项目：</p><figure class="highlight coffeescript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre>      </td>    </tr>  </table></figure><p>安装 Express 和其他依赖<br>安装 Express 和所需的依赖包：</p><figure class="highlight crmsh">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">npm install express body-parser <span class="keyword">node</span><span class="title">-fetch</span></span><br></pre>      </td>    </tr>  </table></figure><p>创建 server.js<br>在 backend 目录下创建 server.js 文件，并添加以下代码：<br><figure class="highlight typescript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>).default; <span class="comment">// 使用CommonJS版本的node-fetch</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>); <span class="comment">// 引入cors中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.use(cors()); <span class="comment">// 使用cors中间件</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/generate-music'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; prompt &#125; = req.body;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    method: <span class="string">"post"</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">      <span class="string">"authorization"</span>: <span class="string">"Bearer 6675520380424c0167881d69c6e"</span>,</span><br><span class="line">      <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="string">"prompt"</span>: prompt</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">"https://api.acedata.cloud/suno/audios"</span>, options);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();        </span><br><span class="line">    res.json(data);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">    res.status(<span class="number">500</span>).json(&#123; error: <span class="string">'An error occurred'</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre>      </td>    </tr>  </table></figure></p><h3 id="3-创建前端"><a href="#3-创建前端" class="headerlink" title="3.创建前端"></a>3.创建前端</h3><p>回到项目根目录，创建 frontend 目录，并进入该目录：<br><figure class="highlight dos">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">mkdir</span> frontend</span><br><span class="line"><span class="built_in">cd</span> frontend</span><br></pre>      </td>    </tr>  </table></figure><br>创建 Vue 项目<br>使用 Vue CLI 创建 Vue 项目：<br><figure class="highlight erlang">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">vue create .</span><br></pre>      </td>    </tr>  </table></figure><br>选择默认配置或根据你的需要进行配置。</p><p>编写前端代码<br>我们创建一个简单的界面来接收用户输入并显示生成的音乐。</p><p>在 frontend/src 目录下，修改 App.vue 文件，添加以下代码：</p><figure class="highlight django">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>XiaoZhi AI Music Generator<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"musicTitle"</span> <span class="attr">placeholder</span>=<span class="string">"Enter a prompt for the music"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleGenerateMusic"</span> <span class="attr">:disabled</span>=<span class="string">"loading"</span>&gt;</span>生成音乐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"loading"</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Music is being generated for you, please wait...</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"musicGenerated"</span> <span class="attr">class</span>=<span class="string">"music-container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"music in generatedMusic"</span> <span class="attr">:key</span>=<span class="string">"music.id"</span> <span class="attr">class</span>=<span class="string">"music-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123; music.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"music.image_url"</span> <span class="attr">alt</span>=<span class="string">"Music Image"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lyric"</span>&gt;</span></span><span class="template-variable">&#123;&#123; music.lyric &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">class</span>=<span class="string">"audio"</span> @<span class="attr">play</span>=<span class="string">"stopOtherMedia($event)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"music.audio_url"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Your browser does not support the audio element.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">class</span>=<span class="string">"video"</span> @<span class="attr">play</span>=<span class="string">"stopOtherMedia($event)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">:src</span>=<span class="string">"music.video_url"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Your browser does not support the video element.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"showModal"</span> <span class="attr">class</span>=<span class="string">"modal"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; modalMessage &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import axios from 'axios';</span></span><br><span class="line"></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">  data() &#123;</span></span><br><span class="line"><span class="xml">    return &#123;</span></span><br><span class="line"><span class="xml">      musicTitle: '',</span></span><br><span class="line"><span class="xml">      musicGenerated: false,</span></span><br><span class="line"><span class="xml">      generatedMusic: [],</span></span><br><span class="line"><span class="xml">      loading: false,</span></span><br><span class="line"><span class="xml">      currentPlayingMedia: null,</span></span><br><span class="line"><span class="xml">      showModal: false,</span></span><br><span class="line"><span class="xml">      modalMessage: ''</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  mounted() &#123;</span></span><br><span class="line"><span class="xml">    document.title = "XiaoZhi AI Music Generator";</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  methods: &#123;</span></span><br><span class="line"><span class="xml">    handleGenerateMusic() &#123;</span></span><br><span class="line"><span class="xml">      if (!this.musicTitle) &#123;</span></span><br><span class="line"><span class="xml">        this.showModalMessage('请输入生成音乐的提示语');</span></span><br><span class="line"><span class="xml">        return;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      this.generateMusic();</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    generateMusic() &#123;</span></span><br><span class="line"><span class="xml">      this.loading = true;</span></span><br><span class="line"><span class="xml">      this.musicGenerated = false;</span></span><br><span class="line"><span class="xml">      axios.post('http://localhost:3000/generate-music', &#123; prompt: this.musicTitle &#125;)</span></span><br><span class="line"><span class="xml">        .then(response =&gt; &#123;</span></span><br><span class="line"><span class="xml">          this.loading = false;</span></span><br><span class="line"><span class="xml">          this.musicGenerated = true;</span></span><br><span class="line"><span class="xml">          this.generatedMusic = response.data.data;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">        .catch(error =&gt; &#123;</span></span><br><span class="line"><span class="xml">          this.loading = false;</span></span><br><span class="line"><span class="xml">          console.error('Error generating music:', error);</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    stopOtherMedia(event) &#123;</span></span><br><span class="line"><span class="xml">      if (this.currentPlayingMedia &amp;&amp; this.currentPlayingMedia !== event.target) &#123;</span></span><br><span class="line"><span class="xml">        this.currentPlayingMedia.pause();</span></span><br><span class="line"><span class="xml">        this.currentPlayingMedia.currentTime = 0;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      this.currentPlayingMedia = event.target;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    showModalMessage(message) &#123;</span></span><br><span class="line"><span class="xml">      this.modalMessage = message;</span></span><br><span class="line"><span class="xml">      this.showModal = true;</span></span><br><span class="line"><span class="xml">      setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="xml">        this.showModal = false;</span></span><br><span class="line"><span class="xml">      &#125;, 2000);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml">#app &#123;</span></span><br><span class="line"><span class="xml">  font-family: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="xml">  text-align: center;</span></span><br><span class="line"><span class="xml">  color: #2c3e50;</span></span><br><span class="line"><span class="xml">  margin-top: 60px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">header &#123;</span></span><br><span class="line"><span class="xml">  background-color: #42b983;</span></span><br><span class="line"><span class="xml">  padding: 20px;</span></span><br><span class="line"><span class="xml">  color: white;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">main &#123;</span></span><br><span class="line"><span class="xml">  margin: 20px;</span></span><br><span class="line"><span class="xml">  max-width: 80%;</span></span><br><span class="line"><span class="xml">  margin: 20px auto;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.input-container &#123;</span></span><br><span class="line"><span class="xml">  display: flex;</span></span><br><span class="line"><span class="xml">  flex-direction: row;</span></span><br><span class="line"><span class="xml">  justify-content: center;</span></span><br><span class="line"><span class="xml">  align-items: center;</span></span><br><span class="line"><span class="xml">  margin-bottom: 20px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">input[type="text"] &#123;</span></span><br><span class="line"><span class="xml">  padding: 7px;</span></span><br><span class="line"><span class="xml">  margin-right: 10px;</span></span><br><span class="line"><span class="xml">  font-size: 1em;</span></span><br><span class="line"><span class="xml">  flex: 1;</span></span><br><span class="line"><span class="xml">  max-width: 600px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">button &#123;</span></span><br><span class="line"><span class="xml">  padding: 8px 20px;</span></span><br><span class="line"><span class="xml">  background-color: #007bff;</span></span><br><span class="line"><span class="xml">  color: #fff;</span></span><br><span class="line"><span class="xml">  border: none;</span></span><br><span class="line"><span class="xml">  cursor: pointer;</span></span><br><span class="line"><span class="xml">  font-size: 1em;</span></span><br><span class="line"><span class="xml">  border-radius: 4px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">button:disabled &#123;</span></span><br><span class="line"><span class="xml">  background-color: #d3d3d3;</span></span><br><span class="line"><span class="xml">  cursor: not-allowed;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">button:hover:not(:disabled) &#123;</span></span><br><span class="line"><span class="xml">  background-color: #0056b3;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.loading &#123;</span></span><br><span class="line"><span class="xml">  font-size: 1.2em;</span></span><br><span class="line"><span class="xml">  color: #42b983;</span></span><br><span class="line"><span class="xml">  margin-top: 20px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.music-container &#123;</span></span><br><span class="line"><span class="xml">  display: flex;</span></span><br><span class="line"><span class="xml">  flex-wrap: wrap;</span></span><br><span class="line"><span class="xml">  gap: 20px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.music-item &#123;</span></span><br><span class="line"><span class="xml">  flex: 1;</span></span><br><span class="line"><span class="xml">  min-width: 300px;</span></span><br><span class="line"><span class="xml">  max-width: 45%;</span></span><br><span class="line"><span class="xml">  margin-top: 20px;</span></span><br><span class="line"><span class="xml">  padding: 20px;</span></span><br><span class="line"><span class="xml">  border: 1px solid #ddd;</span></span><br><span class="line"><span class="xml">  border-radius: 8px;</span></span><br><span class="line"><span class="xml">  background-color: #f9f9f9;</span></span><br><span class="line"><span class="xml">  text-align: left;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.lyric &#123;</span></span><br><span class="line"><span class="xml">  font-size: 1.2em;</span></span><br><span class="line"><span class="xml">  margin: 10px 0;</span></span><br><span class="line"><span class="xml">  white-space: pre-line;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.audio &#123;</span></span><br><span class="line"><span class="xml">  width: 100%;</span></span><br><span class="line"><span class="xml">  margin-top: 10px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.video &#123;</span></span><br><span class="line"><span class="xml">  width: 100%;</span></span><br><span class="line"><span class="xml">  height: auto;</span></span><br><span class="line"><span class="xml">  margin-top: 10px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.modal &#123;</span></span><br><span class="line"><span class="xml">  position: fixed;</span></span><br><span class="line"><span class="xml">  top: 0;</span></span><br><span class="line"><span class="xml">  left: 0;</span></span><br><span class="line"><span class="xml">  width: 100%;</span></span><br><span class="line"><span class="xml">  height: 100%;</span></span><br><span class="line"><span class="xml">  display: flex;</span></span><br><span class="line"><span class="xml">  justify-content: center;</span></span><br><span class="line"><span class="xml">  align-items: center;</span></span><br><span class="line"><span class="xml">  background-color: rgba(0, 0, 0, 0.5);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.modal-content &#123;</span></span><br><span class="line"><span class="xml">  background-color: white;</span></span><br><span class="line"><span class="xml">  padding: 20px;</span></span><br><span class="line"><span class="xml">  border-radius: 5px;</span></span><br><span class="line"><span class="xml">  text-align: center;</span></span><br><span class="line"><span class="xml">  font-size: 1.2em;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@media (max-width: 600px) &#123;</span></span><br><span class="line"><span class="xml">  .input-container &#123;</span></span><br><span class="line"><span class="xml">    flex-direction: column;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  input[type="text"] &#123;</span></span><br><span class="line"><span class="xml">    margin-right: 0;</span></span><br><span class="line"><span class="xml">    margin-bottom: 10px;</span></span><br><span class="line"><span class="xml">    max-width: 100%;     </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  .music-item &#123;</span></span><br><span class="line"><span class="xml">    max-width: 100%;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@media (min-width: 601px) &#123;</span></span><br><span class="line"><span class="xml">  .video &#123;</span></span><br><span class="line"><span class="xml">    width: 100%;</span></span><br><span class="line"><span class="xml">    margin: 10px auto;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre>      </td>    </tr>  </table></figure><h3 id="4-解决跨域问题"><a href="#4-解决跨域问题" class="headerlink" title="4.解决跨域问题"></a>4.解决跨域问题</h3><p>在你的项目运行中，可能会出现跨域请求的问题，我们需要解决它。<br>你可以在现有的 vue.config.js 文件中添加开发服务器代理配置，以解决跨域问题。以下是修改后的 vue.config.js 文件内容：<br><figure class="highlight yaml">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="string">const</span> <span class="string">&#123;</span> <span class="string">defineConfig</span> <span class="string">&#125;</span> <span class="string">=</span> <span class="string">require('@vue/cli-service')</span></span><br><span class="line"></span><br><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">defineConfig(&#123;</span></span><br><span class="line">  <span class="attr">transpileDependencies:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">devServer:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">'/generate-music'</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">'http://localhost:3000'</span><span class="string">,</span></span><br><span class="line">        <span class="attr">changeOrigin:</span> <span class="literal">true</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre>      </td>    </tr>  </table></figure><br>这样配置后，当前端发起请求到 /generate-music 时，代理服务器会将请求转发到运行在 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 的后端服务，从而解决跨域问题。</p><p>如果还无法解决的话，你可能还需要处理一下。由于浏览器安全策略的限制，前端和后端运行在不同的域（例如，localhost 和 192.168.0.235）时，浏览器会阻止跨域请求。我们需要在后端服务器中设置适当的 CORS 头信息来允许跨域请求。</p><p>你可以使用 cors 中间件来解决这个问题。</p><p>安装 cors 包：<br><figure class="highlight cmake">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">npm <span class="keyword">install</span> cors</span><br></pre>      </td>    </tr>  </table></figure><br>在 server.js 文件中引入并使用 cors 中间件：</p><p>这样，后端服务器将允许来自所有来源的请求。如果你想限制特定来源的请求，可以这样配置 cors 中间件：<br><figure class="highlight css">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="selector-tag">app</span><span class="selector-class">.use</span>(<span class="selector-tag">cors</span>(&#123;</span><br><span class="line">  <span class="attribute">origin</span>: <span class="string">'http://192.168.20.235:8081'</span> // 允许的前端URL</span><br><span class="line">&#125;));</span><br></pre>      </td>    </tr>  </table></figure><br>这样应该能解决CORS问题，并允许前端正常调用后端API。</p><p>如果 Node.js 无法直接使用 ES 模块（ES Module）加载 node-fetch，因 node-fetch 是一个 ES 模块。解决这个问题的一种方法是将 node-fetch 替换为一个可以在 CommonJS 环境中使用的版本。</p><p>你可以安装 node-fetch 的 CommonJS 版本，并修改 server.js 文件中的引入方式。<br>首先，删除项目中已安装的 node-fetch：<br><figure class="highlight crmsh">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">npm uninstall <span class="keyword">node</span><span class="title">-fetch</span></span><br></pre>      </td>    </tr>  </table></figure><br>安装 node-fetch 的 CommonJS 版本：<br><figure class="highlight crmsh">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">npm install <span class="keyword">node</span><span class="title">-fetch</span>@<span class="number">2</span></span><br></pre>      </td>    </tr>  </table></figure><br>在 server.js 文件中，将引入方式修改为动态引入（dynamic import），上面的代码已经修改好了。</p><h2 id="三-运行项目"><a href="#三-运行项目" class="headerlink" title="三. 运行项目"></a>三. 运行项目</h2><ol>  <li>启动后端服务</li></ol><p>在 backend 目录下，启动后端服务：<br><figure class="highlight crmsh">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">node</span> <span class="title">server</span>.js</span><br></pre>      </td>    </tr>  </table></figure></p><ol>  <li>启动前端服务<br>在 frontend 目录下，启动前端服务：<figure class="highlight dockerfile">      <table>        <tr>          <td class="gutter">            <pre><span class="line">1</span><br></pre>          </td>          <td class="code">            <pre><span class="line">npm <span class="keyword">run</span><span class="bash"> serve</span></span><br></pre>          </td>        </tr>      </table>    </figure> 打开浏览器，访问 <a href="http://localhost:8080（Vue">http://localhost:8080（Vue</a> CLI 默认端口），你将看到一个简单的界面，输入一个提示词并点击“Generate Music”按钮，即可生成音乐。</li></ol><p><img src="https://cdn.acedata.cloud/s662pt.png" alt=""></p><p>默认会生成两首音乐，有 MP3 和 MP4 视频，点击即可播放 AI 生成的音乐。</p><p><img src="https://cdn.acedata.cloud/q3zbct.png" alt=""></p><p>点击以下音频或视频链接试听：</p><audio id="myAudio" controls>  <source src="https://cdn1.suno.ai/ab8dcd9b-3527-46da-b0c7-4d1a78b51846.mp3" type="audio/mpeg"> 您的浏览器不支持 audio 元素。</audio><button onclick="playPause()">播放/暂停</button><script>  var myAudio = document.getElementById("myAudio");  function playPause()  {    if (myAudio.paused)    {      myAudio.play();    }    else    {      myAudio.pause();    }  }</script><video id="myVideo" width="320" height="240" controls>  <source src="https://cdn1.suno.ai/3cbd5b7b-7354-48a3-8158-9cd87e1b116b.mp4" type="video/mp4"> 您的浏览器不支持 video 元素。</video><button onclick="playPause()">播放/暂停</button><script>  var myVideo = document.getElementById("myVideo");  function playPause()  {    if (myVideo.paused)    {      myVideo.play();    }    else    {      myVideo.pause();    }  }</script><p><a href="https://cdn1.suno.ai/ab8dcd9b-3527-46da-b0c7-4d1a78b51846.mp3" target="_blank" rel="noopener">MP3试听 https://cdn1.suno.ai/ab8dcd9b-3527-46da-b0c7-4d1a78b51846.mp3</a></p><p><a href="https://cdn1.suno.ai/3cbd5b7b-7354-48a3-8158-9cd87e1b116b.mp4" target="_blank" rel="noopener">MP4试看 https://cdn1.suno.ai/3cbd5b7b-7354-48a3-8158-9cd87e1b116b.mp4</a></p><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>通过这种方式，我们成功地将前端和后端代码分离，清晰地组织在不同的目录下，同时也实现了跨域请求。希望这个项目能给你带来启发，并帮助你更好地理解和实现类似的项目。</p><p>这样我们就搭建好了一个本地的 AI 音乐生成平台，如果你愿意，可以将代码打包后上传到服务器，再绑定一个域名，就可以提供给其他小伙伴一起来使用了。</p><p>通过 Vue 和 Node.js，以及 Acedata 提供的 Suno AI 音乐 API 的强大功能，我们在短短的时间内成功搭建了一个AI音乐生成网站。这个过程不仅展示了人工智能技术在音乐创作中的威力，也向我们展示了如何利用现有的技术来创造出令人惊叹的新体验。希望这个项目能够激发你的创造灵感，并让你更加深入地探索人工智能与音乐的奇妙结合！</p><p>在线体验站点：</p><p><a href="http://suno.morecale.com莫卡乐AI音乐" target="_blank" rel="noopener">http://suno.morecale.com莫卡乐AI音乐</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这个数字化时代，人工智能技术正以惊人的速度改变着我们的生活方式和创造方式。音乐作为一种最直接、最感性的艺术形式，自然也成为了人工智能技术的应用场景之一。今天，我们将以 Vue 和 Node.js 为基础，利用现有的 API 来快速搭建一个 Suno AI 音乐站点。让我们
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://cuiqingcai.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="acedata" scheme="https://cuiqingcai.com/tags/acedata/"/>
    
      <category term="suno" scheme="https://cuiqingcai.com/tags/suno/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个自己的 MidJourney 平台：开启你的赚钱之旅</title>
    <link href="https://cuiqingcai.com/42350.html"/>
    <id>https://cuiqingcai.com/42350.html</id>
    <published>2024-05-21T21:24:30.000Z</published>
    <updated>2025-08-11T15:24:05.315Z</updated>
    
    <content type="html"><![CDATA[<p>在当今数字化时代，越来越多的人开始寻找在线赚钱的机会。无论你是一个技术爱好者，还是一个创业新手，搭建 MidJourney 并将其转化为一个盈利项目，都是一个绝佳的选择。本文将带你了解如何零代码搭建一个 MidJourney 绘画平台，并通过这个项目实现盈利。</p><h2 id="什么是-MidJourney？"><a href="#什么是-MidJourney？" class="headerlink" title="什么是 MidJourney？"></a>什么是 MidJourney？</h2><p>MidJourney 是一个创新的绘画平台，懂的人自然懂，我就不作更多的介绍了，下面直接上干货。</p><h2 id="搭建的是一个什么样的平台？"><a href="#搭建的是一个什么样的平台？" class="headerlink" title="搭建的是一个什么样的平台？"></a>搭建的是一个什么样的平台？</h2><p><img src="https://cdn.acedata.cloud/v4o2ul.png" alt=""></p><p><strong>国内可用</strong>：一个无需科学上网，即可在国内正常使用的 MidJourney 平台。</p><h2 id="如何搭建这样的一个平台？"><a href="#如何搭建这样的一个平台？" class="headerlink" title="如何搭建这样的一个平台？"></a>如何搭建这样的一个平台？</h2><p><strong>下载代码</strong>：在 github 上下载 Nexior 开源代码，地址如下：<a href="https://github.com/acedatacloud" target="_blank" rel="noopener">https://github.com/acedatacloud</a> 。<br>如果你不方便访问，可以到官网 <a href="https://platform.acedata.cloud/?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener">https://platform.acedata.cloud/?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f</a> 联系客服即可。</p><p><strong>注册域名</strong>：如果你只是需要自己用，可以不用注册域名，如果你想通过搭建的平台赚钱，那就得注册一个域名。方法很简单，直接搜索一下注册域名，按照网上的教程 30 分钟就可以搞定。</p><p><strong>一台服务器</strong>：同样的，如果只是需要自己用，可不需要服务器，如果想要通过自己的网站赚钱，你还得准备一台 linux 服务器，刚起步，也不要太好的服务器，一年 100 元左右的就可以了，腾讯云阿里云都可，不过建议选择香港的服务器。</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p><strong>上传代码</strong>：将下载下来的 Nexior 压缩包上传到 服务器上并解压。修改 src 目录下 config.ts 里的邀请码为自己的邀请码。</p><p><img src="https://cdn.acedata.cloud/vim3t5.png" alt=""></p><p>邀请码如何获得？这个就是我们可以赚钱的核心了，直接点击下面的链接注册即可。 <a href="https://platform.acedata.cloud/?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f" target="_blank" rel="noopener">https://platform.acedata.cloud/?inviter_id=aef91f35-f7f9-494d-bcf6-3a533440101f</a></p><p><strong>生成镜像</strong>：在当前目录下执行终端命令：</p><pre><code> docker build -t morecale .</code></pre><p>morecale 这个名称你可自己随意取一个其它的即可。</p><p><strong>创建容器</strong>：创建一个容器，按照如下提示操作：</p><p><img src="https://cdn.acedata.cloud/3y31ll.png" alt=""></p><p><strong>创建网站</strong>：创建一个静态网页，并设置好域名与反向代理即可，然后在上面申请好免费的 SSL 证书。</p><p><img src="https://cdn.acedata.cloud/nigksm.png" alt=""></p><h2 id="成功案例分享"><a href="#成功案例分享" class="headerlink" title="成功案例分享"></a>成功案例分享</h2><p>为了激励你，我分享一些朋友搭建的网站案例：</p><ul>  <li><strong>莫卡乐 AI 助手</strong></li></ul><p>莫卡乐通过 Nexior 搭建的一个 Midjourney 平台，从最开始搭建的供自己使用到推荐给朋友们使用，不到三个月，已获收益近 2000 元了，虽然不多，但不需要如何打理即可躺赚，想想也是挺开心的一件事。</p><p><img src="https://cdn.acedata.cloud/lvbru3.png" alt=""></p><ul>  <li><strong>小智 AI</strong></li></ul><p>小智 AI 也是网友通过 Nexior 搭建的一个 AI 平台。并且还创建了多个在线课程，吸引了大量学员，每月收入稳定增长。</p><h2 id="分销比例"><a href="#分销比例" class="headerlink" title="分销比例"></a>分销比例</h2><p><strong>提高比例</strong>：从上图中你可能看到了，最开始的分销比例不是很高？哈哈，我告诉你一个小窍门，你添加底部的业务微信，可以与他申请，调高你的分销分成比例呢，我就是与他联系后，直接提到了 17% 的，当然，你能提高到多少，就看你的运气了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>搭建 MidJourney 并通过这个项目赚钱，不仅可以实现个人收入的增长，还能帮助你在数字化时代实现自我价值。立即行动，开启你的 MidJourney 赚钱之旅吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在当今数字化时代，越来越多的人开始寻找在线赚钱的机会。无论你是一个技术爱好者，还是一个创业新手，搭建 MidJourney 并将其转化为一个盈利项目，都是一个绝佳的选择。本文将带你了解如何零代码搭建一个 MidJourney 绘画平台，并通过这个项目实现盈利。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://cuiqingcai.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="api" scheme="https://cuiqingcai.com/tags/api/"/>
    
      <category term="acedata" scheme="https://cuiqingcai.com/tags/acedata/"/>
    
      <category term="midjourney" scheme="https://cuiqingcai.com/tags/midjourney/"/>
    
  </entry>
  
  <entry>
    <title>分享一个好用的住宅IP</title>
    <link href="https://cuiqingcai.com/42343.html"/>
    <id>https://cuiqingcai.com/42343.html</id>
    <published>2023-11-26T01:17:06.000Z</published>
    <updated>2025-08-11T15:24:05.307Z</updated>
    
    <content type="html"><![CDATA[<p>随着互联网的普及和发展，海外住宅IP的需求日益增加。个人用户可以通过使用海外住宅 IP 来访问特定地区的新闻、娱乐、教育和文化资源，从而获得更高的访问速度、优质的用户体验和更强的网络安全性。</p><p>对于企业而言，海外住宅IP为进军国际市场提供了重要的支持。通过了解目标市场的需求和竞争环境，企业可以制定相应的营销策略和产品定位。海外住宅 IP 还有助于企业进行市场推广活动，实现定向投放广告和提供个性化的客户体验，从而提升品牌知名度和市场份额。</p><p><img src="https://cdn.zhishuyun.com/2023-11-28-150620.png" alt=""></p><h2 id="一、海外住宅-IP-的可靠性"><a href="#一、海外住宅-IP-的可靠性" class="headerlink" title="一、海外住宅 IP 的可靠性"></a>一、海外住宅 IP 的可靠性</h2><p>海外住宅 IP 的可靠性主要取决于供应商的信誉和服务质量。为了保障用户的在线安全和隐私，选择一个可靠的海外住宅 IP 提供商至关重要。在此推荐 SmartProxy，一家优质海外住宅代理和全球IP资源服务商。SmartProxy 提供稳定可靠的服务，而且价格相对较为实惠。注册即领免费流量：</p><h2 id="二、选择SmartProxy的理由"><a href="#二、选择SmartProxy的理由" class="headerlink" title="二、选择SmartProxy的理由"></a>二、选择SmartProxy的理由</h2><p>• 提供200+国家和地区的真实家庭住宅IP，汇聚优质IP资源池。</p><p>• 提供纯净高匿代理，无限带宽，确保网络数据采集不受封锁。</p><p>• 价格实惠，支持HTTP/HTTPS/SOCKS5协议，可根据业务需求定制独享IP。</p><p>• 支持自定义国家、IP时效和城市，精准定位，提供更快更稳定的连接。</p><p>• 提供全天候实时支持，专业团队随时提供帮助和支持。</p><p>除了海外住宅 IP 业务，SmartProxy 还提供静态住宅 IP 服务，这种 IP 地址是固定不变的，适用于需要长期稳定连接的应用场景。</p><p><img src="https://cdn.zhishuyun.com/2023-11-28-150720.png" alt=""></p><p>SmartProxy 的海外代理适用于爬虫采集、市场调查、品牌保护、广告验证、社交媒体、海外电商运营、FB/TK/PayPal 养号等各种应用场景。SmartProxy 已为众多知名网站和企业提供服务，支持 API 批量使用和多线程超高并发。</p><p>请点击以下链接进行免费测试👉: <a href="https://www.smartproxy.cn/?keyword=jingmi" target="_blank" rel="noopener">smartproxy 住宅 IP</a>，我们的客服团队将 24/7 在线解答您的问题，欢迎随时联系我们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着互联网的普及和发展，海外住宅IP的需求日益增加。个人用户可以通过使用海外住宅 IP 来访问特定地区的新闻、娱乐、教育和文化资源，从而获得更高的访问速度、优质的用户体验和更强的网络安全性。&lt;/p&gt;
&lt;p&gt;对于企业而言，海外住宅IP为进军国际市场提供了重要的支持。通过了解目
      
    
    </summary>
    
    
      <category term="技术杂谈" scheme="https://cuiqingcai.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="IP" scheme="https://cuiqingcai.com/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>艺术二维码 API 申请及使用</title>
    <link href="https://cuiqingcai.com/42342.html"/>
    <id>https://cuiqingcai.com/42342.html</id>
    <published>2023-09-01T15:47:18.000Z</published>
    <updated>2025-08-11T15:24:05.319Z</updated>
    
    <content type="html"><![CDATA[<p>艺术二维码是一种创新的技术产品，它将二维码与美观的背景图像相结合，创造出既实用又美观的作品。它们不仅具有传统二维码的功能性，能被智能设备快速扫描识别，还加入了艺术元素，增强了视觉吸引力和品牌识别度。其中，部分艺术二维码甚至由人工智能生成，充分利用了现代技术，展示出无与伦比的创新和独特性。这使得艺术二维码在品牌营销、广告推广等领域有着广泛的应用。</p><p>简单来说，艺术二维码是扫描二维码与艺术美感的完美结合，它不仅提供了信息传递的功能，同时也能提升用户的视觉体验，使得每一次的扫描都充满艺术的享受。</p><h2 id="作品概览"><a href="#作品概览" class="headerlink" title="作品概览"></a>作品概览</h2><p>我们先来看几个二维码作品：</p><p><img src="https://cdn.cuiqingcai.com/l4z26c.png" alt=""></p><p>怎么样？这些二维码就是艺术二维码，它实现了图片和二维码的完美结合，比普通的二维码更加具有艺术感。而且关键是，每一个二维码都能扫描！</p><h2 id="怎样制作？"><a href="#怎样制作？" class="headerlink" title="怎样制作？"></a>怎样制作？</h2><p>想制作这样的二维码吗？怎么来制作这样的艺术二维码呢？</p><p>其实这个从技术来讲是相对复杂的。在现在这个 AI 时代，目前艺术二维码的解决方案是基于 Stable Diffusion 来做的，通过输入 prompt 我们可以生成对应的图片，同时结合一些二维码内容的融合最终实现这样的效果。</p><p>所以这里面其实最主要的挑战在于：如何既把二维码做得好看而且富有艺术，而且二维码还能被正确扫描。说实话这个技术其实还是蛮难的，需要大量的参数调整才能做到稍微好点的效果。</p><p>应该 99% 的人在第一步就放弃了。</p><p>假设通过不断的调整，我们真的做出来了这样的效果，真正运行起来也是一个不小的开销，如果要速度比较快的话，可能得性能比较好的 GPU，可能一不小心就上万块钱了。</p><p>有朋友可能会说：我不想费那么多精力，我也不想花那么多钱，我就想做个艺术二维码，或者我想把这个能力集成到我的产品里面，要是有这样现成的 API 就好了。</p><p>有吗？还真有。</p><p>这里推荐一个知数云平台，知数云平台提供了艺术二维码相关生成 API，我们可以调用 API 输入各种参数，比如图片内容、二维码链接、样式风格等等各种参数，就可以非常方便地生成想要的艺术二维码了，而且首次申请免费赠送 20 张绘制次数。</p><h2 id="申请-API"><a href="#申请-API" class="headerlink" title="申请 API"></a>申请 API</h2><p>知数云平台是什么呢？简单来说，它是一个提供多样数字化 API 的服务平台，其官网链接是：<a href="https://data.zhishuyun.com。" target="_blank" rel="noopener">https://data.zhishuyun.com。</a></p><p>要使用艺术二维码 API，首先可以到<a href="https://data.zhishuyun.com/documents/ee085d2a-a0b9-4f0e-8b4d-8da407345138" target="_blank" rel="noopener" title="艺术二维码 API ">艺术二维码 API </a>页面点击「获取」按钮：</p><p><img src="https://cdn.cuiqingcai.com/5m5ps3.png" alt=""></p><p>如果你尚未登录，会自动跳转到登录页面，扫码关注公众号即可自动登录，无需额外注册步骤。</p><p>登录完了之后会跳回原页面，此时会提示「您尚未申请该服务，需要申请」。</p><p>申请时会校验实名认证情况，请按照网站提示完成实名认证。实名认证会校验姓名、手机号、身份证号，需要三者一致才可以通过认证。认证完了之后可以返回页面，刷新一下页面确保信息更新，然后重新申请即可通过申请。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>要使用艺术二维码的最基本的功能，需要填入如下几个必须参数：</p><ul>  <li>type：二维码的类型，如纯文本、链接等。</li>  <li>content：二维码的内容，比如如果是链接的话，我们可以填入对应的链接。</li>  <li>prompt：二维码对应的风格绘制指令，强烈建议用英文。比如说 <code>pizza</code> 则会绘制一个像披萨的二维码。</li></ul><p>接下来，我们来生成一个知数云官网的二维码，类型是链接，内容是 <a href="https://data.zhishuyun.com" target="_blank" rel="noopener" title="https://data.zhishuyun.com">https://data.zhishuyun.com</a>，prompt 这里填写如下内容：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">(best quality, <span class="attr">masterpiece</span>:<span class="number">1.2</span>), underwater, ((pirate ship)), close up, zoom <span class="keyword">in</span>, absurdes, big waves, twister, water falling, tentacles, ((glowing lights)), ((lighting storm)), fog, smoke, <span class="number">4</span>k res, <span class="number">8</span>k, higly detailed textures, cinematic shot, intricate details, side view</span><br></pre>      </td>    </tr>  </table></figure><p>在测试页面填写如下内容：</p><p><img src="https://cdn.cuiqingcai.com/sskdbl.png" alt=""></p><p>然后点击测试：</p><p><img src="https://cdn.cuiqingcai.com/u3aw1e.png" alt=""></p><p>过一会就发现艺术二维码就生成了，结果类似如下：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"task_id"</span>: <span class="string">"a7e8831c-203d-447e-83fc-71783c766446"</span>,</span><br><span class="line">  <span class="string">"image_url"</span>: <span class="string">"https://qrart.cdn.zhishuyun.com/attachments/1132182283529494652/1136344944630563006/Germey_2023-08-02__64ca8da51e5834b500e077bf.png"</span>,</span><br><span class="line">  <span class="string">"image_width"</span>: <span class="number">768</span>,</span><br><span class="line">  <span class="string">"image_height"</span>: <span class="number">768</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>二维码如下：</p><p><img src="https://cdn.cuiqingcai.com/2lpfjj.png" alt=""></p><p>这样我们就生成了一个二维码，主体是一个船只，悬挂着几个旗帜，而这些旗帜恰恰构成了二维码的定位点。</p><p>用手机扫描一下，就可以跳转到知数云的官网了。</p><p>同时上述内容调用方案我们可以非常方便地转成 API 调用。</p><h2 id="prompt-指南"><a href="#prompt-指南" class="headerlink" title="prompt 指南"></a>prompt 指南</h2><p>通过上述操作可以看到，艺术二维码关键在于 prompt 的编写，那 prompt 的编写都有什么讲究呢？</p><p>其实这个都是通用的 Stable Diffusion 的 prompt 指令，艺术二维码就是基于 Stable Diffusion 技术加上一些特殊调优生成的，所以它的输入 prompt 和 Stable Diffusion 是完全一样的。</p><p>如果你还不知道什么是 Stable Diffusion，可以到它的官网了解下：<a href="https://stablediffusionweb.com/" target="_blank" rel="noopener" title="https://stablediffusionweb.com/">https://stablediffusionweb.com/</a>，还有 prompt 教程和指南：<a href="https://stable-diffusion-art.com/prompt-guide/" target="_blank" rel="noopener" title="https://stable-diffusion-art.com/prompt-guide/">https://stable-diffusion-art.com/prompt-guide/</a>，另外 Stable Diffusion 还制作了 prompt 生成器，可以帮助我们生成 prompt：<a href="https://stablediffusionweb.com/prompt-generator" target="_blank" rel="noopener" title="https://stablediffusionweb.com/prompt-generator">https://stablediffusionweb.com/prompt-generator</a>，除此之外还有一些 prompt 样例集合网站：<a href="https://publicprompts.art/" target="_blank" rel="noopener" title="https://publicprompts.art/">https://publicprompts.art/</a></p><p>如上内容仅作参考，如果更多，可以自行搜索 Stable Diffusion 相关的资料进行学习。</p><h2 id="高级参数"><a href="#高级参数" class="headerlink" title="高级参数"></a>高级参数</h2><p>本 API 还提供了更多高级参数方便进行更多功能定制，说明如下：</p><ul>  <li>pattern：预设二维码组合。预设二维码风格组合，如定位框的样式（方形、圆形等）、点的样式（方形、圆形等）。</li>  <li>preset：预设背景风格。二维码背景的风格，如超现实风格、霓虹效果、手绘风格等。</li>  <li>steps：绘制迭代次数。当次数越大，绘制的二维码艺术风格越强，范围为 10-20，默认是 16。</li>  <li>qrw：二维码的权重。当权重越大，图片越接近真实二维码，但是艺术化的风格会减弱，取值范围是 1.5-3，默认是 1.5。</li>  <li>seed：随机种子。用于生成随机二维码，当种子相同时，生成的二维码风格是一样的，范围为 1-9007199254740991。</li>  <li>rawurl：是否保持原始链接。默认情况下会将输入链接缩短为短链接，可以提高扫码率，该值默认为 false。</li>  <li>padding_level：二维码内边距。二维码内边距的大小，</li>  <li>aspect_ratio：二维码宽高比。</li>  <li>position：二维码位置。</li>  <li>pixel_style：二维码像素风格。</li>  <li>marker_shape：二维码定位框形状。</li>  <li>sub_marker：二维码子标记样式。</li>  <li>rotate：二维码旋转角度。</li>  <li>ecl：二维码纠错等级。</li>  <li>padding_noise：二维码内边距噪点。</li></ul><p>下文我们来详细了解下艺术二维码 API 的一些高级参数，选取其中一些进行介绍。</p><blockquote>  <p>注意：API 可能在不断迭代，下文内容仅供参考，最新 API 使用方式请参见知数云官方文档：<a href="https://data.zhishuyun.com/documents/821cfbbf-6b97-4c42-b21f-e29fdd245a96" target="_blank" rel="noopener">https://data.zhishuyun.com/documents/821cfbbf-6b97-4c42-b21f-e29fdd245a96</a></p></blockquote><h2 id="预设-preset"><a href="#预设-preset" class="headerlink" title="预设 preset"></a>预设 preset</h2><p>艺术二维码 API 设置了很多预设模板，这个参数叫做 preset，取值如下：</p><ul>  <li>sunset（日落）: 融合了夕阳余晖的温暖色调和柔和光线效果。</li>  <li>floral（花卉）: 带有花朵和植物元素的艺术风格，强调自然之美。</li>  <li>snowflakes（雪花）: 冰雪世界，具有冰晶和雪花的冷酷氛围。</li>  <li>feathers（羽毛）: 呈现出羽毛和鸟类特征，营造轻盈和柔软的感觉。</li>  <li>raindrops（雨滴）: 以雨滴和水珠为灵感，创造出清新湿润的效果。</li>  <li>ultra-realism（超现实）: 极度逼真的细节和质感，营造出超越现实的效果。</li>  <li>epic-realms（史诗领域）: 壮丽的场景和史诗感，带来宏大的视觉体验。</li>  <li>intricate-studio（错综复杂）: 富有细节和复杂性，需要仔细观察才能完全理解的风格。</li>  <li>symmetric-masterpiece（对称杰作）: 通过对称元素创造出精美的平衡和谐。</li>  <li>luminous-highway（发光高速公路）: 强调夜间的发光效果，如车灯和霓虹灯。</li>  <li>celestial-journey（星际之旅）: 探索宇宙和星际的奇幻旅程。</li>  <li>neon-mech（霓虹机械）: 结合了霓虹灯和机械元素，营造出未来感。</li>  <li>ethereal-low-poly（飘渺低多边形）: 低多边形风格，创造出虚幻和抽象的效果。</li>  <li>golden-vista（金色景观）: 以金色调为主，呈现出壮观的视觉景象。</li>  <li>cinematic-expanse（电影式广袤）: 带有电影感的广阔场景，引人入胜。</li>  <li>cinematic-warm（电影式温暖）: 具有电影质感的温暖色调和光线效果。</li>  <li>desolate-wilderness（荒凉荒野）: 描绘荒芜和荒野，营造出孤寂感。</li>  <li>vibrant-palette（鲜明调色板）: 色彩丰富多样，强烈的色彩对比。</li>  <li>enigmatic-journey（神秘之旅）: 探索充满谜团和神秘感的旅程。</li>  <li>timeless-cinematic（永恒电影）: 具有电影质感且不受时间限制的风格。</li>  <li>regal-galaxy（皇家星系）: 带有皇家气息的星系和宇宙元素。</li>  <li>illustrious-canvas（杰出画布）: 创作出卓越而引人注目的画布效果。</li>  <li>expressive-mural（富有表现力的壁画）: 充满表现力和情感的大型壁画风格。</li>  <li>serene-haze（宁静薄雾）: 带有宁静和薄雾效果，营造出宁静的氛围。</li></ul><p>我们下面来尝试下不同参数的效果，比如拿 raindrops（雨滴）和 raindrops（金色景观）为例来看下效果。</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST <span class="string">"https://api.zhishuyun.com/qrart/generate?token=&#123;token&#125;"</span> \</span><br><span class="line">  -H <span class="string">"accept: application/json"</span> \</span><br><span class="line">  -H <span class="string">"content-type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "type": "link",</span></span><br><span class="line"><span class="string">    "content": "https://data.zhishuyun.com",</span></span><br><span class="line"><span class="string">    "prompt": "sakura",</span></span><br><span class="line"><span class="string">    "preset": "sunset"</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br></pre>      </td>    </tr>  </table></figure><p>这里我们把 preset 设置为了日落效果，效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-24-170652.png" alt=""></p><p>如果我们换个风格，比如把 preset 参数换成 expressive-mural（富有表现力的壁画），效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-24-170648.png" alt=""></p><p>关于其他的一些设定大家可以自行试验。</p><h2 id="二维码宽高比-aspect-ratio"><a href="#二维码宽高比-aspect-ratio" class="headerlink" title="二维码宽高比 aspect_ratio"></a>二维码宽高比 aspect_ratio</h2><p>通过 aspect_ratio 参数我们可以设置二维码的宽高比，比如正方形 1:1，长方形 16:9 等等，该参数：</p><ul>  <li>1:1：宽高比为 1:1，表示画布的宽度和高度相等。对应的像素尺寸为 768x768，生成的二维码画布为正方形。</li>  <li>16:9：宽高比为 16:9，表示画布的宽度是高度的 16/9 倍。对应的像素尺寸为 1008x576，生成的二维码画布宽度较大，适合宽屏显示。</li>  <li>9:16：宽高比为 9:16，表示画布的宽度是高度的 9/16 倍。对应的像素尺寸为 576x1008，生成的二维码画布高度较大，适合竖屏显示。</li>  <li>4:3：宽高比为 4:3，表示画布的宽度是高度的 4/3 倍。对应的像素尺寸为 864x672，生成的二维码画布略带正方形感，适合一般显示。</li>  <li>3:4：宽高比为 3:4，表示画布的宽度是高度的 3/4 倍。对应的像素尺寸为 672x864，生成的二维码画布略带纵向矩形感，适合一般显示。</li></ul><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST <span class="string">"https://api.zhishuyun.com/qrart/generate?token=&#123;token&#125;"</span> \</span><br><span class="line">  -H <span class="string">"accept: application/json"</span> \</span><br><span class="line">  -H <span class="string">"content-type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "type": "link",</span></span><br><span class="line"><span class="string">    "content": "https://data.zhishuyun.com",</span></span><br><span class="line"><span class="string">    "prompt": "Plate of Nigiri sushi",</span></span><br><span class="line"><span class="string">    "aspect_ratio": "1:1"</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br></pre>      </td>    </tr>  </table></figure><p>这里我们尝试生成了一个正方形的二维码，效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-24-170644.png" alt=""></p><h2 id="二维码位置-position"><a href="#二维码位置-position" class="headerlink" title="二维码位置 position"></a>二维码位置 position</h2><p>我们还可以通过 position 参数控制二维码的位置，比如说一张图片里面有一个女生穿裙子，而我们想要把二维码放在裙子的位置并与之融合起来，我们就可以尝试改下二维码的位置，调用样例如下：</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre>      </td>      <td class="code">        <pre><span class="line">curl -X POST <span class="string">"https://api.zhishuyun.com/qrart/generate?token=&#123;token&#125;"</span> \</span><br><span class="line">  -H <span class="string">"accept: application/json"</span> \</span><br><span class="line">  -H <span class="string">"content-type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "type": "link",</span></span><br><span class="line"><span class="string">    "content": "https://data.zhishuyun.com",</span></span><br><span class="line"><span class="string">    "prompt": "one of the beautiful girls in the moonlight in the background, in the style of pixelated chaos, rococo-inspired art, dark white and sky-blue, made of plastic, delicate flowers, gongbi, wimmelbilder",</span></span><br><span class="line"><span class="string">    "position": "bottom"</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br></pre>      </td>    </tr>  </table></figure><p>效果如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-24-170641.png" alt=""></p><h2 id="二维码像素风格-pixel-style"><a href="#二维码像素风格-pixel-style" class="headerlink" title="二维码像素风格 pixel_style"></a>二维码像素风格 pixel_style</h2><p>我们还可以自定义二维码的像素风格，通过传入 pixel_style 即可，参数可选值如下：</p><ul>  <li>square（方形）：使用方形的像素单元，每个像素单元都是正方形的形状。</li>  <li>rounded（圆角）：像素单元具有圆角，使得生成的二维码看起来更加柔和和现代化。</li>  <li>dot（点状）：使用小圆点作为像素单元，生成的二维码呈现出点阵的效果，类似于印刷效果。</li>  <li>squircle（圆角方形）：类似于圆角矩形，但更加接近圆形的形状，为生成的二维码赋予一种独特的风格。</li>  <li>row（行排列）：将像素单元按行排列，呈现出水平方向的图案。</li>  <li>column（列排列）：将像素单元按列排列，呈现出垂直方向的图案。</li></ul><h2 id="二维码框风格-marker-shape"><a href="#二维码框风格-marker-shape" class="headerlink" title="二维码框风格 marker_shape"></a>二维码框风格 marker_shape</h2><p>通过 marker_shape 可以自定义定位框的风格，参数可选值如下：</p><ul>  <li>square（方形）：标记形状为正方形，用于突出特定位置或元素。</li>  <li>circle（圆形）：标记形状为圆形，可用于标记关键区域或元素。</li>  <li>plus（加号）：标记形状为加号，类似十字型，用于突出注意或特定信息。</li>  <li>box（方框）：标记形状为方框，类似于描边的矩形，可用于围绕区域或元素。</li>  <li>octagon（八边形）：标记形状为八边形，带有独特的角落，用于视觉吸引。</li>  <li>random（随机）：标记形状随机分布，为二维码添加艺术感和视觉趣味。</li>  <li>tiny-plus（微小加号）：微小的加号标记，可用于标记细微的元素或细节。</li></ul><h2 id="二维码子标记风格-sub-marker"><a href="#二维码子标记风格-sub-marker" class="headerlink" title="二维码子标记风格 sub_marker"></a>二维码子标记风格 sub_marker</h2><p>通过 sub_marker 可以用于子标记（较小的标记）的形状，参数可选值如下：</p><ul>  <li>square（方形）：子标记的形状为正方形，可以用于突出特定位置的细节。</li>  <li>circle（圆形）：子标记的形状为圆形，可用于强调关键细节或元素。</li>  <li>box（方框）：子标记的形状为方框，类似于描边的矩形，适用于标记细小区域。</li>  <li>random（随机）：子标记的形状随机分布，为二维码添加艺术感和视觉趣味。</li>  <li>plus（加号）：子标记的形状为加号，类似十字型，可以用于标记细微的信息或元素。</li></ul><h2 id="二维码旋转角度-rotate"><a href="#二维码旋转角度-rotate" class="headerlink" title="二维码旋转角度 rotate"></a>二维码旋转角度 rotate</h2><p>通过 rotate 可以控制二维码的旋转角度，参数可选值如下：</p><ul>  <li>0：不进行旋转，生成的二维码保持原始方向，没有旋转效果。</li>  <li>90：将生成的二维码顺时针旋转 90 度，使其以纵向方向显示。</li>  <li>180：将生成的二维码旋转 180 度，使其倒置，即上下颠倒的显示方式。</li>  <li>270：将生成的二维码顺时针旋转 270 度，使其以逆纵向方向显示。</li></ul><p>在这里我们就不再对各种 API 参数进行一一介绍了，更详细更实时的内容可以参见知数云的官方文档，链接为：<a href="https://data.zhishuyun.com/documents/ee085d2a-a0b9-4f0e-8b4d-8da407345138。" target="_blank" rel="noopener">https://data.zhishuyun.com/documents/ee085d2a-a0b9-4f0e-8b4d-8da407345138。</a></p><h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h2><p>知数云艺术二维码的 API 提供了阶梯定价，首次申请免费赠送 20 次，而且购买越多越便宜，由于价格会动态调整，所以大家可以查看知数云官网来查看最新实时价格：<a href="https://data.zhishuyun.com/services/38ecf158-36f2-42f2-8e7f-6786cdfc2452" target="_blank" rel="noopener">https://data.zhishuyun.com/services/38ecf158-36f2-42f2-8e7f-6786cdfc2452</a></p><p><img src="https://cdn.zhishuyun.com/2023-08-24-170329.png" alt=""></p><p>以上便是知数云艺术二维码的一些介绍，希望对大家有帮助，谢谢！</p><p>非常感谢你的阅读，更多精彩内容，请关注我的公众号「进击的 Coder」和「崔庆才丨静觅」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;艺术二维码是一种创新的技术产品，它将二维码与美观的背景图像相结合，创造出既实用又美观的作品。它们不仅具有传统二维码的功能性，能被智能设备快速扫描识别，还加入了艺术元素，增强了视觉吸引力和品牌识别度。其中，部分艺术二维码甚至由人工智能生成，充分利用了现代技术，展示出无与伦比的
      
    
    </summary>
    
    
      <category term="Other" scheme="https://cuiqingcai.com/categories/Other/"/>
    
    
  </entry>
  
  <entry>
    <title>Midjourney API 的申请和使用</title>
    <link href="https://cuiqingcai.com/42341.html"/>
    <id>https://cuiqingcai.com/42341.html</id>
    <published>2023-08-20T17:31:45.000Z</published>
    <updated>2025-08-11T15:24:05.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Midjourney-API-申请及使用"><a href="#Midjourney-API-申请及使用" class="headerlink" title="Midjourney API 申请及使用"></a>Midjourney API 申请及使用</h1><p>在人工智能绘图领域，想必大家听说过 Midjourney 的大名吧！</p><p>Midjourney 以其出色的绘图能力在业界独树一帜。无需过多复杂的操作，只要简单输入绘图指令，这个神奇的工具就能在瞬间为我们呈现出对应的图像。无论是任何物体还是任何风格，都能在 Midjourney 的绘画魔法下得以轻松呈现。如今，Midjourney 早已在各个行业和领域广泛应用，其影响力愈发显著。</p><p>然而，在国内想要使用 Midjourney 却面临着相当大的挑战。首先，Midjourney 目前驻扎在 Discord 平台中，这意味着要使用 Midjourney，必须通过特殊的充值途径获得访问权限。如果没有订阅，几乎无法使用 Midjourney，因此单是使用这一工具就成了一个巨大的难题。此外，有人或许会疑问：Midjourney 是否提供对外 API 服务？然而事实是，Midjourney 并未向外界提供任何 API 服务，而且从目前情况看来，这一情况似乎也不会改变。</p><p>那么，是否有方法能够与 Midjourney 对接，并将其融入到自己的产品中呢？</p><p>答案是肯定的。接下来，我将为大家介绍知数云平台所提供的 Midjourney API，通过使用该 API，我们能够实现与 Midjourney 官方完全一致的效果和操作，下文会详细介绍。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>知数云平台是什么呢？简单来说，它是一个提供多样数字化 API 的服务平台，其官网链接是：<a href="https://data.zhishuyun.com" target="_blank" rel="noopener" title="https://data.zhishuyun.com">https://data.zhishuyun.com</a>。</p><p>你可能会疑惑，既然 Midjourney 官方并未向外提供 API，那么知数云平台的 API 是如何诞生的呢？简言之，知数云的 Midjourney 与 Discord 内的 Midjourney Bot 进行了接口对接，同时模拟了底层通信协议，从而能够在 Discord 平台上实现与 Midjourney 官方完全相同的操作。这涵盖了文字生成图片、图像转换、图像融合、图文生成等多个功能。此外，该 API 在后台维护了大量 Midjourney 账号，通过负载均衡控制实现了高度的并发处理，比官方 Midjourney 单一账号的并发能力要更高。</p><p>总体来看，无论是在 Discord 上使用 Midjourney 提供的哪一项功能，这个 API 都能完全还原官方操作的效果和效能。</p><p>稳定性如何呢？根据我个人几个月的观察和使用经验，可以毫不夸张地说，目前业界很难找到比知数云 Midjourney API 更稳定且并发处理能力更高的选择，而且还能保持 Midjourney 这一价格水平。这样的选择寥寥无几。</p><p>下面我们就来了解下这个 API 的申请和使用方法吧。</p><h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><blockquote>  <p>下文内容大多数来源于知数云 Midjourney API 官方介绍文档，文档链接：<a href="https://data.zhishuyun.com/documents/0fd3dd40-a16a-4246-8313-748b8e75c29e" target="_blank" rel="noopener" title="https://data.zhishuyun.com/documents/0fd3dd40-a16a-4246-8313-748b8e75c29e">https://data.zhishuyun.com/documents/0fd3dd40-a16a-4246-8313-748b8e75c29e</a>，最新内容以官方文档为准。</p></blockquote><p>要使用 Midjourney Imagine API，首先可以到 <a href="https://data.zhishuyun.com/documents/58ea7cc1-c685-40c3-a619-f29f9ac5d8f4" target="_blank" rel="noopener" title="Midjourney Imagine API">Midjourney Imagine API</a> 页面点击「获取」按钮：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171908.png" alt=""></p><p>如果你尚未登录，会自动跳转到登录页面。扫码关注公众号即可自动登录，无需额外注册步骤。</p><p>登录完了之后会跳回原页面 <a href="https://data.zhishuyun.com/documents/58ea7cc1-c685-40c3-a619-f29f9ac5d8f4" target="_blank" rel="noopener" title="Midjourney Imagine API">Midjourney Imagine API</a> ，此时会提示「您尚未申请该服务，需要申请」。</p><p>申请时会校验实名认证情况，请按照网站提示完成实名认证。实名认证会校验姓名、手机号、身份证号，需要三者一致才可以通过认证。认证完了之后可以返回页面，刷新一下页面确保信息更新，然后重新申请即可通过申请。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>接下来就可以在界面上填写对应的内容，如图所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171604.png" alt=""></p><p>在第一次使用该接口时，我们至少需要填写两个参数，一个是 <code>action</code>，另一个是 <code>prompt</code>。其中 <code>action</code> 参数代表了生成图的操作类型，由于第一次调用该 API 我们没有生成过任何内容，所以我们需要先输入文字来生成一副预览图，所以这时候 <code>action</code> 应该填写为 <code>generate</code>。另外一个参数 <code>prompt</code> 就是我们想生成的图片描述内容了，强烈建议用英文描述，画的图会更准确效果更好，这里我们填写了 <code>beautiful dress</code>，代表要画一条好看的裙子。</p><p>依次填写好图中所示参数，然后点击「测试」按钮即可测试接口。「测试」按钮下方会显示 API 返回的结果。同时您可以注意到右侧有对应的调用代码生成，您可以复制代码到您的 IDE 里面进行对接和开发。</p><p>调用之后，我们发现返回结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1124768570157564029/1142862320582791268/nglover_beautiful_dress_id4899456_02d66331-b4d5-46bd-b5ea-efa6d9447528.png"</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1142862320582791268"</span>,</span><br><span class="line">  <span class="attr">"progress"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upsample1"</span>,</span><br><span class="line">    <span class="string">"upsample2"</span>,</span><br><span class="line">    <span class="string">"upsample3"</span>,</span><br><span class="line">    <span class="string">"upsample4"</span>,</span><br><span class="line">    <span class="string">"reroll"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"cf735d83-6e02-4e0a-a265-3e8ed46b8070"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>返回结果一共有如下字段：</p><p><code>task_id</code>，生成此图像任务的 ID，用于唯一标识此次图像生成任务。</p><p><code>image_id</code>，图片的唯一标识，在下次需要对图片进行变换操作时需要传此参数。</p><p><code>image_url</code>，图片的 URL，直接打开即可查看生成的效果，如图所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171611.png" alt=""></p><p>可以看到，这里生成了一张 2x2 的预览图。</p><p><code>actions</code>，可以对生成的图片进行的进一步操作列表。这里一共列了 9 个，其中 <code>upsample</code> 代表放大，<code>variation</code> 代表变换，<code>reroll</code> 代表重新生成。所以 <code>upsample1</code> 代表的就是对左上角第一张图片进行放大操作，<code>variation3</code> 就是代表根据左下角第三张图片进行变换操作。</p><p>到现在为止，第一次 API 调用就完成了。</p><blockquote>  <p>提示：如果您觉得上述生图速度较慢，想进一步提升用户体验，可以考虑采用流式传输的模式或者使用极速 API，具体可参考文档下方内容。</p></blockquote><h2 id="图像放大与变换"><a href="#图像放大与变换" class="headerlink" title="图像放大与变换"></a>图像放大与变换</h2><p>下面我们尝试针对当前生成的照片进行进一步的操作，比如我们觉得右上角第二张的图片还不错，但我们想进行一些变换微调，那么就可以进一步将 <code>action</code> 填写为 <code>variation2</code>，同时将 <code>image_id</code> 传递即可，<code>prompt</code> 可以留空：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171619.png" alt=""></p><p>这时候得到的结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1124768570157564029/1142864001001345245/handerson6243_beautiful_dress_id4899456_aab4a0bf-7d99-4b7f-818c-c4dc690300ea.png"</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1142864001001345245"</span>,</span><br><span class="line">  <span class="attr">"progress"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upsample1"</span>,</span><br><span class="line">    <span class="string">"upsample2"</span>,</span><br><span class="line">    <span class="string">"upsample3"</span>,</span><br><span class="line">    <span class="string">"upsample4"</span>,</span><br><span class="line">    <span class="string">"reroll"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"b6f464b6-0cac-43e7-ae4e-12658679b7f3"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>打开 <code>image_url</code>，新生成的图片如下所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171629.png" alt=""></p><p>可以看到，针对上一张右上角的图片，我们再次得到了四张类似的照片。</p><p>这时候我们可以挑选其中一张进行精细化地放大操作，比如选第四张，那就可以 <code>action</code> 传入 <code>upsample4</code>，通过 <code>image_id</code> 再次传入当前图像的 ID 即可。</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171655.png" alt=""></p><blockquote>  <p>注意： <code>upsample</code> 操作相比 <code>variation</code> 来说，Midjourney 的耗时会更短一些。</p></blockquote><p>返回结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1124768570157564029/1142864651860840458/ruthgarcia3808_beautiful_dress_id4899456_096f6a64-7412-4cb5-8f50-4afbfc456d55.png"</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1142864651860840458"</span>,</span><br><span class="line">  <span class="attr">"progress"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"high_variation"</span>,</span><br><span class="line">    <span class="string">"low_variation"</span>,</span><br><span class="line">    <span class="string">"zoom_out_2x"</span>,</span><br><span class="line">    <span class="string">"zoom_out_1_5x"</span>,</span><br><span class="line">    <span class="string">"pan_left"</span>,</span><br><span class="line">    <span class="string">"pan_right"</span>,</span><br><span class="line">    <span class="string">"pan_up"</span>,</span><br><span class="line">    <span class="string">"pan_down"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"9f5c34e3-c8af-415c-9377-fb46cd47ad45"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>其中 <code>image_url</code> 如图所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171701.png" alt=""></p><p>这样我们就成功得到了一张独立的连衣裙的照片。</p><p>同时注意到 <code>actions</code> 里面又包含了几个可进行的操作，介绍如下：</p><p><code>high_variation</code>：对画面进行高变换（具体含义请参考 Midjourney 官方）。</p><p><code>low_variation</code>：对画面进行低变换（具体含义请参考 Midjourney 官方）。</p><p><code>zoom_out_2x</code>：对画面进行缩小两倍操作（周围区域填充）。</p><p><code>zoom_out_1_5x</code>：对画面进行缩小 1.5 倍操作（周围区域填充）。</p><p><code>pan_left</code>：对画面进行左移和填充操作。</p><p><code>pan_right</code>：对画面进行右移和填充操作。</p><p><code>pan_top</code>：对画面进行上移和填充操作。</p><p><code>pan_bottom</code>：对画面进行下移和填充操作。</p><p>可以继续按照上述流程传入对应的变换指令进行连续生图操作，可以实现无限次连续操作，这里不再一一赘述。</p><h2 id="图像改写（垫图）"><a href="#图像改写（垫图）" class="headerlink" title="图像改写（垫图）"></a>图像改写（垫图）</h2><p>该 API 也支持图像改写，俗称垫图，我们可以输入一张图片 URL 以及需要改写的描述文字，该 API 就可以返回改写后的图片。</p><blockquote>  <p>注意：输入的图片 URL 需要是一张纯图片，不能是一个网页里面展示一张图片，否则无法进行图像改写。建议使用图床（如阿里云 OSS、腾讯云 COS、七牛云、又拍云等）来上传获取图片的 URL。</p></blockquote><p>假设这里我们有一张图片，URL 是 <a href="https://cdn.zhishuyun.com/20230504-222359.png" target="_blank" rel="noopener" title="https://cdn.zhishuyun.com/20230504-222359.png">https://cdn.zhishuyun.com/20230504-222359.png</a>，是一张小女孩写字的图片：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171707.png" alt=""></p><p>现在我们想把它转化为卡通风格，可以直接在 <code>prompt</code> 字段将 URL 和要调整的文字一并输入即可，二者用空格分隔，比如：</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line">https:<span class="comment">//cdn.zhishuyun.com/20230504-222359.png transfer to cartoon style</span></span><br></pre>      </td>    </tr>  </table></figure><p>样例调用如下：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171714.png" alt=""></p><p>输出结果如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"9297d5ab-4014-44d4-91c8-a6d8927a0756"</span>,</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1103689414850387968"</span>,</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1100813695770165341/1103689414850387968/Azyern_Zieca_ignore9297d5ab-4014-44d4-91c8-a6d8927a0756_ec5cda5c-8784-4707-be17-a168786e0c8a.png"</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upsample1"</span>,</span><br><span class="line">    <span class="string">"upsample2"</span>,</span><br><span class="line">    <span class="string">"upsample3"</span>,</span><br><span class="line">    <span class="string">"upsample4"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这时候，我们可以看到就得到了类似的卡通风格的图片了：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171717.png" alt=""></p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>由于 Midjourney 生成图片需要等待一段时间，所以本 API 也相应设计为了长等待模式。但在部分场景下，长等待可能会带来一些额外的资源开销，因此本 API 也提供了异步 Webhook 回调的方式，当图片生成成功或失败时，其结果都会通过 HTTP 请求的方式发送到指定的 Webhook 回调 URL。回调 URL 接收到结果之后可以进行进一步的处理。</p><p>下面演示具体的调用流程。</p><p>首先，Webhook 回调是一个可以接收 HTTP 请求的服务，开发者应该替换为自己搭建的 HTTP 服务器的 URL。此处为了方便演示，使用一个公开的 Webhook 样例网站 <a href="https://webhook.site/" target="_blank" rel="noopener" title="https://webhook.site/">https://webhook.site/</a>，打开该网站即可得到一个 Webhook URL，如图所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-172050.png" alt=""></p><p>将此 URL 复制下来，就可以作为 Webhook 来使用，此处的样例为 <a href="https://webhook.site/c62713a6-0487-45bd-9ad2-08a91d7ed12d" target="_blank" rel="noopener" title="https://webhook.site/c62713a6-0487-45bd-9ad2-08a91d7ed12d">https://webhook.site/c62713a6-0487-45bd-9ad2-08a91d7ed12d</a>。</p><p>接下来，我们可以设置字段 <code>callback_url</code> 为上述 Webhook URL，同时填入 <code>prompt</code>，如图所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171723.png" alt=""></p><p>点击测试之后会立即得到一个 <code>task_id</code> 的响应，用于标识当前生成任务的 ID，如图所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171727.png" alt=""></p><p>稍等片刻，等图片生成结束，可以发发现 Webhook URL 收到了一个 HTTP 请求，如图所示：</p><p><img src="https://cdn.zhishuyun.com/2023-08-20-171732.png" alt=""></p><p>其结果就是当前任务的结果，内容如下：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"8aad0fe0-2300-4702-94dc-39a5d3e2f2f3"</span>,</span><br><span class="line">  <span class="attr">"actions"</span>: [</span><br><span class="line">    <span class="string">"upsample1"</span>,</span><br><span class="line">    <span class="string">"upsample2"</span>,</span><br><span class="line">    <span class="string">"upsample3"</span>,</span><br><span class="line">    <span class="string">"upsample4"</span>,</span><br><span class="line">    <span class="string">"variation1"</span>,</span><br><span class="line">    <span class="string">"variation2"</span>,</span><br><span class="line">    <span class="string">"variation3"</span>,</span><br><span class="line">    <span class="string">"variation4"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"1103693480024363198"</span>,</span><br><span class="line">  <span class="attr">"image_url"</span>: <span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1100813695770165341/1103693480024363198/Azyern_Zieca_ignore8aad0fe0-2300-4702-94dc-39a5d3e2f2f3_a_beaut_b3d5720a-b917-4a2d-b6e7-ae641ee7ca4f.png"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>其中 <code>success</code> 字段标识了该任务是否执行成功，如果执行成功，还会有同样的 <code>actions</code>, <code>image_id</code>, <code>image_url</code> 字段，和上文介绍的返回结果是一样的，另外还有 <code>task_id</code> 用于标识任务，以实现 Webhook 结果和最初 API 请求的关联。</p><p>如果图片生成失败，Webhook URL 则会收到类似如下内容：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"task_id"</span>: <span class="string">"7ba0feaf-d20b-4c22-a35a-31ec30fc7715"</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="string">"bad_request"</span>,</span><br><span class="line">  <span class="attr">"detail"</span>: <span class="string">"Unrecognized argument(s): `-c`, `x`"</span></span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>这里的 <code>success</code> 字段会是 <code>false</code>，同时还会有 <code>code</code> 和 <code>detail</code> 字段描述了任务错误的详情信息，Webhook 服务器根据对应的结果进行处理即可。</p><h2 id="流式输出"><a href="#流式输出" class="headerlink" title="流式输出"></a>流式输出</h2><p>Midjourney 官方在生成图片的时候是有进度的，在最开始是一张模糊的照片，然后经过几次迭代之后，图片逐渐变得清晰，最后得到完整的图片。</p><p>所以，一张图片的生成过程大约可以分为「发送命令」-&gt;「开始生图（多次迭代逐渐清晰）」-&gt;「生图完毕」的阶段。</p><p>在没开启流式输出的情况下，本 API 从发起请求到返回结果，实际上是从上述「发送命令」-&gt;「生图完毕」的全过程，中间生图的过程也全被包含在里面，由于 Midjourney 本身生成图片速度较慢，整个过程大约需要等待一分钟或更久。</p><p>所以为了更好的用户体验，本 API 支持流式输出，即当「开始生图」的时候就开始返回结果，每当绘制进度有变化，就会流式将结果输出，直至生图结束。</p><p>如果想流式返回响应，可以更改请求头里面的 <code>accept</code> 参数，修改为 <code>application/x-ndjson</code>，不过调用代码需要有对应的更改才能支持流式响应。</p><p>Python 样例代码：</p><figure class="highlight python">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://api.zhishuyun.com/midjourney/imagine?token=&#123;token&#125;'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'application/x-ndjson'</span></span><br><span class="line">&#125;</span><br><span class="line">body = &#123;</span><br><span class="line">    <span class="string">"prompt"</span>: <span class="string">"a beautiful cat"</span>,</span><br><span class="line">    <span class="string">"action"</span>: <span class="string">"generate"</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url, headers=headers, json=body, stream=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> r.iter_lines():</span><br><span class="line">    print(line.decode())</span><br></pre>      </td>    </tr>  </table></figure><p>运行结果：</p><figure class="highlight json">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre>      </td>      <td class="code">        <pre><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780200447578272"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780200447578272/grid_0.webp"</span>,<span class="attr">"actions"</span>:[],<span class="attr">"progress"</span>:<span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780227496640635"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780227496640635/grid_0.webp"</span>,<span class="attr">"actions"</span>:[],<span class="attr">"progress"</span>:<span class="number">15</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780238934523994"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780238934523994/grid_0.webp"</span>,<span class="attr">"actions"</span>:[],<span class="attr">"progress"</span>:<span class="number">31</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780254398918716"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780254398918716/grid_0.webp"</span>,<span class="attr">"actions"</span>:[],<span class="attr">"progress"</span>:<span class="number">46</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780265933262858"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780265933262858/grid_0.webp"</span>,<span class="attr">"actions"</span>:[],<span class="attr">"progress"</span>:<span class="number">62</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780280965648394"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780280965648394/grid_0.webp"</span>,<span class="attr">"actions"</span>:[],<span class="attr">"progress"</span>:<span class="number">78</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780292621598860"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780292621598860/grid_0.webp"</span>,<span class="attr">"actions"</span>:[],<span class="attr">"progress"</span>:<span class="number">93</span>&#125;</span><br><span class="line">&#123;<span class="attr">"image_id"</span>:<span class="string">"1112780319758766080"</span>,<span class="attr">"image_url"</span>:<span class="string">"https://midjourney.cdn.zhishuyun.com/attachments/1111955518269948007/1112780319758766080/dawn97_ignore81c5c24e-ea94-4ae2-aee4-252a98a347ed_a_beautiful_c_e20c3bc8-8827-4c99-9cf5-7d56c2e9d47f.png"</span>,<span class="attr">"actions"</span>:[<span class="string">"upsample1"</span>,<span class="string">"upsample2"</span>,<span class="string">"upsample3"</span>,<span class="string">"upsample4"</span>,<span class="string">"variation1"</span>,<span class="string">"variation2"</span>,<span class="string">"variation3"</span>,<span class="string">"variation4"</span>],<span class="attr">"progress"</span>:<span class="number">100</span>&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>可以看到，启用流式输出之后，返回结果就是逐行的 JSON 了。在这里我们用 Python 里面的 <code>iter_lines</code> 方法自动获取了下一行的内容并打印出来。</p><p>如果要手动进行处理逐行 JSON 结果的话可以使用 <code>\r\n</code> 来进行分割。</p><p>例如在浏览器环境中，用 JavaScript 的 axios 库来实现手动处理，代码可改写如下：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre>      </td>      <td class="code">        <pre><span class="line">axios(&#123;</span><br><span class="line">  url: <span class="string">"https://api.zhishuyun.com/midjourney/imagine?token=&#123;token&#125;"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    prompt: <span class="string">"a beautiful cat"</span>,</span><br><span class="line">    action: <span class="string">"generate"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    accept: <span class="string">"application/x-ndjson"</span>,</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  responseType: <span class="string">"stream"</span>,</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  onDownloadProgress: <span class="function">(<span class="params">progressEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = progressEvent.target.response;</span><br><span class="line">    <span class="keyword">const</span> lines = response.split(<span class="string">"\r\n"</span>).filter(<span class="function">(<span class="params">line</span>) =&gt;</span> !!line);</span><br><span class="line">    <span class="keyword">const</span> lastLine = lines[lines.length - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(lastLine);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>.resolve(data));</span><br></pre>      </td>    </tr>  </table></figure><p>但注意在 Node.js 环境中，实现稍有不同，代码可写为如下：</p><figure class="highlight javascript">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">"https://api.zhishuyun.com/midjourney/imagine?token=&#123;token&#125;"</span>;</span><br><span class="line"><span class="keyword">const</span> headers = &#123;</span><br><span class="line">  <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">  Accept: <span class="string">"application/x-ndjson"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> body = &#123;</span><br><span class="line">  prompt: <span class="string">"a beautiful cat"</span>,</span><br><span class="line">  action: <span class="string">"generate"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .post(url, body, &#123; <span class="attr">headers</span>: headers, <span class="attr">responseType</span>: <span class="string">"stream"</span> &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    response.data.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chunk.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre>      </td>    </tr>  </table></figure><p>Java 样例代码：</p><figure class="highlight java">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">"https://api.zhishuyun.com/midjourney/imagine?token=&#123;token&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">        MediaType mediaType = MediaType.parse(<span class="string">"application/json"</span>);</span><br><span class="line">        RequestBody body = RequestBody.create(mediaType, <span class="string">"&#123;\"prompt\": \"a beautiful cat\"&#125;"</span>);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .post(body)</span><br><span class="line">                .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">                .addHeader(<span class="string">"Accept"</span>, <span class="string">"application/x-ndjson"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                        <span class="keyword">new</span> InputStreamReader(response.body().byteStream(), <span class="string">"UTF-8"</span>))) &#123;</span><br><span class="line">                    String responseLine;</span><br><span class="line">                    <span class="keyword">while</span> ((responseLine = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(responseLine);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>运行结果都是类似的。</p><p>另外注意到，流式输出的结果多了一个字段叫做 <code>progress</code>，这个代表绘制进度，范围是 0-100，如果需要，您也可以在页面展示这个信息。</p><blockquote>  <p>注意：当绘制未完全完成的时候，<code>actions</code> 字段是空，即无法对中间过程的图片做进一步的处理操作。绘制完毕之后，绘制过程中产生的 <code>image_url</code> 会被销毁。另外异步回调可以和流式输出一起使用。</p></blockquote><p>好了，通过以上内容介绍，我们就了解了知数云 Midjourney API 的使用方法，有了这个 API，我们可以包装自己的产品，实现和官方 Midjourney 一模一样的对接。</p><h2 id="套餐介绍"><a href="#套餐介绍" class="headerlink" title="套餐介绍"></a>套餐介绍</h2><p>到了最后，大家可能好奇，这个价格套餐式怎样的情况呢？</p><p>知数云对上文介绍的 API 提供了三种套餐，分别是快速、慢速、极速模式，介绍如下：</p><ul>  <li>快速：背后的 Midjourney 账号均是 Fast 模式，能够以快速模式出图，正常情况下绘制完整图片时间在 1 分钟左右，开启流式模式会更快。</li>  <li>慢速：背后的 Midjourney 账号均是 Relax 模式，生成速度无任何保证，快的话可能 1 分钟，慢的话可能甚至 10 分钟，适合对速度要求较低的用户。</li>  <li>极速：背后的 Midjourney 账号军事 Turbo 模式，生成速度比快速模式更快，正常情况下绘制完整图片时间在 30 秒左右，开启流式模式会更快。适合对速度要求极高的用户。</li></ul><p>价格怎么样呢？由于价格可能会动态变化，大家可以直接参考知数云的官方网站了解：<a href="https://data.zhishuyun.com/services/d87e5e99-b797-4ade-9e73-b896896b0461" target="_blank" rel="noopener" title="https://data.zhishuyun.com/services/d87e5e99-b797-4ade-9e73-b896896b0461">https://data.zhishuyun.com/services/d87e5e99-b797-4ade-9e73-b896896b0461</a>。但总的来说，能够以这个价格做到知数云 Midjourney API 这样的稳定性和并发的，业界寥寥无几，欢迎选购和评测。</p><p>谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Midjourney-API-申请及使用&quot;&gt;&lt;a href=&quot;#Midjourney-API-申请及使用&quot; class=&quot;headerlink&quot; title=&quot;Midjourney API 申请及使用&quot;&gt;&lt;/a&gt;Midjourney API 申请及使用&lt;/h1&gt;

      
    
    </summary>
    
    
      <category term="技术杂谈" scheme="https://cuiqingcai.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="API" scheme="https://cuiqingcai.com/tags/API/"/>
    
      <category term="Midjourney" scheme="https://cuiqingcai.com/tags/Midjourney/"/>
    
  </entry>
  
  <entry>
    <title>分享一个稳定好用的国外代理</title>
    <link href="https://cuiqingcai.com/36066.html"/>
    <id>https://cuiqingcai.com/36066.html</id>
    <published>2023-05-29T14:54:53.000Z</published>
    <updated>2025-08-11T15:24:05.307Z</updated>
    
    <content type="html"><![CDATA[<p>许多朋友问我有没有好用的海外代理。说实话，真的好用的并不多。</p><p>最近我了解到了一家还不错的海外代理，叫做 IPIDEA，我已经使用了一段时间了，觉得质量挺不错。</p><p>你可能知道，我最近在进行一些 ChatGPT 相关的研究，由于各种原因，我需要大量的海外代理才能够使用服务，这个代理实在是帮了我大忙。如果你有需要的话，可以参考下面我对这家代理的使用体验来选购。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>首先，我介绍一下这家代理的一些特点。他们并不像国内的很多代理厂商一样提供的是一些国内代理。这家代理主要提供海外代理，因此他们的用户大部分是有海外代理使用需求的人。比如说，最近非常火爆的 ChatGPT，就对这类服务有很大的需求。</p><p>这家代理的官方网站是 <a href="http://www.ipidea.net/?utm-source=cqc&amp;utm-keyword=?ipidea" target="_blank" rel="noopener" title="http://www.ipidea.net/?utm-source=cqc&amp;utm-keyword=?ipidea">http://www.ipidea.net/?utm-source=cqc&amp;utm-keyword=?ipidea</a>。从他们的介绍可以看到，他们是一家全球范围的 IP 代理服务商，能覆盖全球 220 个国家和地区，大部分代理实际上是住宅 IP。</p><p>官方介绍这家的代理 IP 数量大约是九千万左右，这个数量非常庞大，同时官方介绍说代理的可用率是 99.9%。</p><p>下面我们来看一下他们的一些套餐类型：</p><ul>  <li>动态住宅代理：这种代理实际上就是用真实的住宅用户的 IP 搭建的代理。一般来说，住宅代理对于很多场景的使用封禁概率会比较低，因为很多厂商对封禁住宅代理是比较谨慎的。动态住宅代理其实就是可以定时切换的 IP，比如说做网络爬虫，我们就需要不断变换的不同的代理 IP，这样可以进一步的减少被封禁的概率。</li>  <li>静态住宅代理：相对于动态代理来说，静态住宅代理的特点就是长效稳定，可以一直获取一个稳定不变的代理 IP，适合长久的稳定的海外网络环境使用。比如说，我们要进行自动化网站的爬取，如果在一个页面内 IP 地址频繁变动会增大被风控的概率。所以，如果有一个长效稳定的住宅 IP 代理，就会非常方便。</li>  <li>数据中心代理：这种代理实际上是很多服务器厂商的服务器搭建起来的代理。例如腾讯云、阿里云、微软云等服务器所在的 IP 地址段，就属于所谓的数据中心的 IP 地址段。因此，用这些服务器搭建出来的代理就叫做数据中心代理。一般来说，这种数据中心代理相对于住宅代理更容易被爬虫封禁，但是这种代理的优势就是价格更加便宜，而且网络速度也会相对较好。</li></ul><p>基本上，这家代理服务商涵盖了上述这三种类型，大家可以根据自己的需要来选择购买。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先，如果要使用代理的话，第一步自然是注册和登录，</p><p>这里值得一提的是，这家代理支持免费的测试，不需要一定充值才能用，就官网直接注册就可以获得一些免费额度：</p><p><img src="https://cdn.cuiqingcai.com/2j10gy.png" alt=""></p><p>注册和登录的详细流程我就不赘述了，注册登录完之后还需要进行实名认证才能开始使用代理。</p><p>下面，我会简单介绍一下这个代理服务的基本使用方法。你可以点击菜单上方的“获取代理”，然后会跳转到以下页面。</p><p><a href="https://www.ipidea.net/getapi/" target="_blank" rel="noopener">https://www.ipidea.net/getapi/</a></p><p>这里的代理使用方式分为两种，第一种是 API 提取的方式，第二种是隧道代理。下面我会先介绍第一种，即 API 提取的方式。</p><p>如图所示，我们切换到 API 提取方式的介绍页面，这里有三个子菜单：全球动态、独享数据中心、静态住宅。这三种类型我已在前面的介绍中涉及过，就不再详述。</p><p><img src="https://cdn.cuiqingcai.com/72xe3u.png" alt=""></p><p>以全球动态这一菜单为例，你可以看到页面下方显示了当前账户的余额和一些流量信息。再下方则是 API 提取的相关配置。</p><p>下面有许多配置选项，如提取数量、国家和地区、协议、数据格式、分隔符等，我们可以按需选择，然后点击按钮生成提取链接。</p><p>生成提取链接后，系统会自动提示是否加入白名单，因为这家代理商要求必须添加白名单才能使用代理。然后我们可以在右侧找到 API 提取的链接。</p><p>打开这个链接，我们就可以获取一部分代理的 IP 和端口信息。因为我们刚刚添加了白名单，所以当前这台主机可以直接提取。</p><p><img src="https://cdn.cuiqingcai.com/48pusn.png" alt=""></p><p>后面的步骤我就不再赘述，我们可以直接使用爬虫将代理设置上，然后进行网站的爬取。</p><p>第二种就是隧道代理，简单来说，我们在设置代理时不需要知道具体的 IP 和端口。这个代理隧道可以帮助我们自动选择可用的代理，我们只需要设置一条固定的代理即可。</p><p><img src="https://cdn.cuiqingcai.com/poq7t0.png" alt=""></p><p>在下方有相应的教程，你可以看到这里有动态、长效 ISP 和动态数据中心这三种选项。</p><p>使用方法类似，我们可以在下方自由选择配置，然后进行代理隧道的设置。</p><p>在左侧选择完后，右侧会出现对应的命令行，我们可以直接复制这个命令完成代理的测试。</p><p><img src="https://cdn.cuiqingcai.com/owt8is.png" alt=""></p><p>你可以看到这里，我们请求了一个测试网站，然后测试网站就可以将当前代理 IP 的相关信息打印出来。</p><blockquote>  <p>这里值得注意的是，如果要使用这个代理，需要在海外环境中。在国内环境是无法使用的。</p></blockquote><h2 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h2><p>接下来，我将简单分享一下我使用这些代理的过程。</p><p>近期，我在研究 ChatGPT 相关服务的搭建，因此在这个过程中，我确实有很多使用代理的需求。</p><h3 id="动态数据中心-全球动态"><a href="#动态数据中心-全球动态" class="headerlink" title="动态数据中心/全球动态"></a>动态数据中心/全球动态</h3><p>我将动态数据中心和全球动态一起进行说明，因为它们的使用方式基本相同，二者的区别在于前者主要提供数据中心的代理 IP，而后者主要提供动态的住宅代理。因此，前者的价格相对较低，而后者的价格和质量则相对较高。</p><p>我使用这些代理的主要场景是搭建 ChatGPT 相关的 API，但这个 API 并非使用官方 OpenAI 的 key，而是用爬虫模拟网页的方式实现的。如果你感兴趣的话，可以了解一些开源项目，例如<a href="https://github.com/acheong08/ChatGPT" target="_blank" rel="noopener" title="https://github.com/acheong08/ChatGPT">https://github.com/acheong08/ChatGPT</a>，该项目的 V1 版本就是采用爬虫模拟网页形式实现 API 服务的。</p><p>那么，为什么我们需要代理呢？</p><p>实际上在这个服务背后，我们需要一个可以绕过 Cloudflare 网关的服务，而搭建这个网关就需要大量的动态代理，这样我们就可以突破单个 IP 地址请求 OpenAI 服务的限制。</p><p>如果你感兴趣，可以了解一些开源的实现，如<a href="https://github.com/acheong08/ChatGPT-Proxy-V4" target="_blank" rel="noopener" title="https://github.com/acheong08/ChatGPT-Proxy-V4">https://github.com/acheong08/ChatGPT-Proxy-V4</a>。</p><p>在这个服务背后，你会注意到有一个代理设置：</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre>      </td>      <td class="code">        <pre><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> http_proxy != <span class="string">""</span> &#123;</span><br><span class="line">    client.SetProxy(http_proxy)</span><br><span class="line">    println(<span class="string">"Proxy set:"</span> + http_proxy)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  PORT := os.Getenv(<span class="string">"PORT"</span>)</span><br><span class="line">  <span class="keyword">if</span> PORT == <span class="string">""</span> &#123;</span><br><span class="line">    PORT = <span class="string">"9090"</span></span><br><span class="line">  &#125;</span><br><span class="line">  handler := gin.Default()</span><br><span class="line">  handler.GET(<span class="string">"/ping"</span>, func(c *gin.Context) &#123;</span><br><span class="line">    c.JSON(200, gin.H&#123;<span class="string">"message"</span>: <span class="string">"pong"</span>&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  handler.Any(<span class="string">"/api/*path"</span>, proxy)</span><br><span class="line"></span><br><span class="line">  gin.SetMode(gin.ReleaseMode)</span><br><span class="line">  endless.ListenAndServe(os.Getenv(<span class="string">"HOST"</span>)+<span class="string">":"</span>+PORT, handler)</span><br><span class="line">&#125;</span><br></pre>      </td>    </tr>  </table></figure><p>其中，<code>http_proxy</code> 参数可以设置为我们前面提到的隧道代理。例如：</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br></pre>      </td>      <td class="code">        <pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://mAZFcgDR-zone-custom-region-us:&lt;password&gt;@na.ipidea.io:2336"</span></span><br></pre>      </td>    </tr>  </table></figure><p>这样，我们就成功地将 IPIDEA 的隧道代理进行了设置。</p><p>一旦服务运行起来，由于代理本身是全球动态或者动态数据中心，因此里面的代理 IP 会动态变化。这样，对于单个账号来说，每次请求 OpenAI 的 IP 都在变化，就可以解除单个账号访问的限制。</p><blockquote>  <p>注意：我请求 OpenAI 是用的<code>access_token</code>的方式，目前并不会造成账号被封的问题。</p></blockquote><h2 id="动态长效-ISP"><a href="#动态长效-ISP" class="headerlink" title="动态长效 ISP"></a>动态长效 ISP</h2><p>我们刚才讨论了通过 API 请求方式的隧道代理设置，这种方式相对方便。但在某些情况下，我们实际上想要的是更稳定、长效的代理，即动态长效 ISP。</p><p>我通常会将这种代理用于一些模拟登录服务。由于我需要使用浏览器进行这些服务，如果我将浏览器设置为一个动态切换的隧道代理，那么在一次网页请求中，所有请求的 IP 地址都可能是不同的。因此，我们实际上希望在同一浏览器会话下，IP 地址能够保持相对稳定。</p><p>于是，动态长效 ISP 就能派上用场。我通常使用模拟浏览器驱动的方式来启动浏览器，然后动态设置代理 IP 为动态长效 ISP。设置完成后，我便可以启动浏览器进行网页模拟，比如登录模拟 GPT 网站等。</p><p>下面是一个简单的 Playwright 的代理设置样例：</p><figure class="highlight bash">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre>      </td>      <td class="code">        <pre><span class="line">def init_browser(self):</span><br><span class="line">    self.browser = p.chromium.launch(headless=False, proxy=&#123;</span><br><span class="line">        <span class="string">'server'</span>: <span class="string">"http://proxy.ipidea.io:2336"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"mAZFcgDR-zone-isp-session-2146kz42f-sessTime-5"</span>,</span><br><span class="line">        <span class="string">"password"</span>: <span class="string">"&lt;password&gt;"</span></span><br><span class="line">    &#125;)</span><br><span class="line">    self.page = self.browser.new_page()</span><br></pre>      </td>    </tr>  </table></figure><p>浏览器设置完成后，我就可以执行一些自动化操作，比如模拟登录 ChatGPT、模拟登录其他网站等。在这个过程中，我几乎没有遇到不可用的情况，可用率非常高。</p><p>有了这个动态长效 ISP，我成功完成了大量 ChatGPT 账号的模拟登录过程，可谓是非常方便！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，到这里我这篇文章就接近尾声了。</p><p>我们来回顾下这篇文章的内容，首先对 IPIDEA 做了基本介绍，然后介绍了基本的使用方法以及我自己的使用体验。</p><p>整个体验下来我觉得还是挺顺的，没有遇到什么无法访问的时候，整个访问速度也不错。</p><p>如果你也有海外代理的需求，我非常建议你也来试试看。</p><p>非常感谢你的阅读，更多精彩内容，请关注我的公众号「进击的 Coder」和「崔庆才丨静觅」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;许多朋友问我有没有好用的海外代理。说实话，真的好用的并不多。&lt;/p&gt;
&lt;p&gt;最近我了解到了一家还不错的海外代理，叫做 IPIDEA，我已经使用了一段时间了，觉得质量挺不错。&lt;/p&gt;
&lt;p&gt;你可能知道，我最近在进行一些 ChatGPT 相关的研究，由于各种原因，我需要大量的海
      
    
    </summary>
    
    
      <category term="技术杂谈" scheme="https://cuiqingcai.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="国外代理" scheme="https://cuiqingcai.com/tags/%E5%9B%BD%E5%A4%96%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>元思考:对思考的思考</title>
    <link href="https://cuiqingcai.com/cme79jr6l013ljq6scl0jgbd6.html"/>
    <id>https://cuiqingcai.com/cme79jr6l013ljq6scl0jgbd6.html</id>
    <published>2023-02-24T16:24:54.000Z</published>
    <updated>2025-08-11T15:24:05.307Z</updated>
    
    <content type="html"><![CDATA[<blockquote>  <p>思考， 简单却有困难的词。它离我们“近在咫尺”却又似乎“远在天涯”。那究竟什么叫思考？什么是思考？那么该如何思考？</p></blockquote><h2 id="思考的定义"><a href="#思考的定义" class="headerlink" title="思考的定义"></a>思考的定义</h2><p>说到思考， 那咱们也不得不对其进行追本溯源， 去揪一下它的细节。什么是<strong>思、</strong>什么是<strong>考、</strong>什么是<strong>思考</strong><br>思，汉语一级字，读作sāi或sī，在指“心情”等时旧读为sì，最早见于金文，其本义是深想、考虑，由此引申出怀念、悲伤、意念、创作的构想等。《说文解字》认为是“容也”。<br>考（拼音：kǎo）是汉语通用规范一级字（常用字）。在甲骨文和金文中，考和老是同一个字，均像一老人举杖之形。考字用为年老之义，从商代经西周一直延用至于春秋战国时代。<br>先秦时“考”常用作对父亲的称呼，可以指在世的，也可以指去世的。<br>现代汉语的“考”多用于考察、考核，又表示研究、推求。这些都是后来出现的假借义，与考的本义无关。<br>那什么是思考呢？由上可知思就是深想，考虑就是验证， 二者形成闭环故为思考。那么思考就是，就是<br><strong>思考就是考虑与验证的过程！</strong><br>btw</p><ul>  <li>考虑在此的意思是检索，检索已有的知识。</li>  <li>验证在此的意思是过滤，过滤检索的知识。</li></ul><p>先split再merge，那就是答案啊</p><p>思考是思维的一种探索活动，思考力则是在思维过程中产生的一种具有<strong>积极性和创造性</strong>的作用力。<br>思考源于主体对<strong>意向信息</strong>的加工。人之思考是<strong>自己心智对意向——信息内容的加工过程</strong>。任何思考的进行都是在<br><strong>联想—连锁反映中进行的推理与演算</strong>——信息内容的加工。如：相似联想、接近联想、对比联想、因果联想等理解来进行思考是必然的。</p><h2 id="思考流程"><a href="#思考流程" class="headerlink" title="思考流程"></a>思考流程</h2><p>由上可知， 思考流程是检索 -&gt; 验证 -&gt; 加工(排列组合) =&gt; 结果。需要注意的是检索与验证并不是仅是单次的，也可以是多次。</p><h3 id="论3-4的思考过程"><a href="#论3-4的思考过程" class="headerlink" title="论3 * 4的思考过程"></a>论3 * 4的思考过程</h3><p>是如何计算出来的呢？ 当然，各位早就知晓了答案， 不就是12嘛。 浪费表情，so easy, 摊手🤷</p><p><img src="https://cdn.nlark.com/yuque/__latex/3e90b256052522b05fd06968b19b78a3.svg#card=math&amp;code=3%20%2A%204%0A&amp;id=SYVLR" alt=""><br>思考过程如下三种情况所示</p><ol>  <li>无法理解数字3、乘以✖️、数字4的含义。 思考失败</li>  <li>理解数字3、乘以✖️、数字4的含义，回归原始。点阵图数数来解决<ol>      <li>建立横竖轴（x、y）</li>      <li>x轴放三个点点·,y轴放四个点点·(见代码片段-1)</li>      <li>一个一个数， 是12诶！</li>    </ol>  </li></ol><figure class="highlight html">  <table>    <tr>      <td class="gutter">        <pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre>      </td>      <td class="code">        <pre><span class="line">· · ·</span><br><span class="line">· · ·</span><br><span class="line">· · ·</span><br><span class="line">· · ·</span><br></pre>      </td>    </tr>  </table></figure><ol>  <li>学会乘法， 知道乘法表（嘿嘿，回来。你已经会背乘法口诀表啦！）。直接三四一十二，perfect</li></ol><h4 id="复盘-3-4"><a href="#复盘-3-4" class="headerlink" title="复盘 3 * 4"></a>复盘 3 * 4</h4><p>在上面对<img src="https://cdn.nlark.com/yuque/__latex/be1f45951ef7d08436b379402ebfa9ec.svg#card=math&amp;code=3%20%2A4&amp;id=GOAXB" alt=""><br>的各种假设的可能性进行了推延生与证明。相信在此时你也和笔者一样又有新的疑问了， 3* 4 不是我们数(算)<br>出来的嘛？不是，在这之前存在一些“可选”项<br>对， 是思考出来的。 流程如下<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/22806252/1675183092904-cf89b109-6773-4bab-b538-5e0a9870f8c1.jpeg" alt=""></p><h4 id="拓展：计算机“思考”过程"><a href="#拓展：计算机“思考”过程" class="headerlink" title="拓展：计算机“思考”过程"></a>拓展：计算机“思考”过程</h4><ol>  <li>书写代码（在此省略代码编写的种种）</li>  <li>计算机进行“思考”<ol>      <li>思：编译(将代码转化成计算机可理解的“知识”)。（编译过程，在此不过多赘述），</li>      <li>考：验证编译</li>    </ol>  </li>  <li>加工(位运算)</li>  <li>得到结果</li></ol><h4 id="题外话：人与计算机的思维差异"><a href="#题外话：人与计算机的思维差异" class="headerlink" title="题外话：人与计算机的思维差异"></a>题外话：人与计算机的思维差异</h4><p>人：“聪明”，但<strong>加工</strong>慢<br>计算机：“愚昧”， 但加工快。快速的准确的yes or no， for loop</p><blockquote>  <p>所以，该如何写出“多快好省”的代码呢？尝试二者结合试试</p></blockquote><h3 id="谈谈想象力或创造力"><a href="#谈谈想象力或创造力" class="headerlink" title="谈谈想象力或创造力"></a>谈谈想象力或创造力</h3><p>其本质还是思考</p><ol>  <li>检索</li>  <li>验证</li>  <li>加工(排列组合)</li></ol><h4 id="例子：钢铁侠"><a href="#例子：钢铁侠" class="headerlink" title="例子：钢铁侠"></a>例子：钢铁侠</h4><p>这世界本没有钢铁侠，只是有人给他创造，想象了出来，并赋予其名。<br>zoom out(宏观角度): 钢铁(科技与狠活) + 人(侠)<br>zoom in(微观角度)：类似于计算机，譬如ACR核反应堆(类似于电脑的电) 、贾维斯(人工智能) 等等</p><h2 id="提高思考力？"><a href="#提高思考力？" class="headerlink" title="提高思考力？"></a>提高思考力？</h2><blockquote>  <p>思考力：即思考的能力</p></blockquote><p>由上可知，思考能力的强弱取决于两部分。</p><ol>  <li>已有背景知识的存量</li>  <li>梳理加工过滤的能力</li></ol><p>那么对此，我们可以得出。得出提高思考力的方法</p><ul>  <li>增加知识的存量质与量<ul>      <li>量： 拥有更多的知识<ul>          <li>输入-&gt; 学习、思考 -&gt; 化为己用</li>        </ul>      </li>      <li>质<ul>          <li>建立连接：学习并非单纯的记忆，而是连接。旧知识 + 新知识 =&gt; 新认知</li>          <li>点-线-面-体-势，知识结构化，建立有关联的<strong>强链接</strong><br>，让提取的知识不在是点而是线、是面、是体、甚至是势。不在有知识孤岛，也让思考更加开阔不在局限</li>        </ul>      </li>    </ul>  </li>  <li>增强梳理“过滤”能力<ul>      <li>随意搭配-&gt; 创造力<ul>          <li>加减乘除，排列组合</li>        </ul>      </li>      <li>套路搭配 -&gt; 方法论<ul>          <li>怎么切、怎么分 流程与关键节点</li>        </ul>      </li>    </ul>  </li></ul><h3 id="case-by-case-构建思考框架"><a href="#case-by-case-构建思考框架" class="headerlink" title="case by case: 构建思考框架"></a>case by case: 构建思考框架</h3><p>经过对于其的整合梳理，我们不难得到可复用的方法论。常见的方法如下</p><p>逻辑推理：三段论<br>高效沟通：PREP法则<br>工作总结：AEAP<br>创业计划：商业模式画布<br>工作规划：SMART原则<br>质量管理：PDCA原则</p><h3 id="学习能力"><a href="#学习能力" class="headerlink" title="学习能力"></a>学习能力</h3><ul>  <li>学习金字塔</li>  <li>费曼学习法</li>  <li>刻意练习</li>  <li>RIA阅读法</li>  <li>二八定律</li></ul><h3 id="思考能力"><a href="#思考能力" class="headerlink" title="思考能力"></a>思考能力</h3><ul>  <li>黄金圈法则</li>  <li>八何分析法（5w3h、6w2h）</li>  <li>思维导图</li>  <li>策略选择：SWOT分析</li>  <li>梳理信息：MECE法则</li>  <li>10/10/10法则</li>  <li>冰山模型</li></ul><h3 id="创造能力"><a href="#创造能力" class="headerlink" title="创造能力"></a>创造能力</h3><ul>  <li>六顶思考帽</li>  <li>头脑风暴</li>  <li>逆向思维</li>  <li>类比思维</li>  <li>SCAMPER创新思维</li></ul><h3 id="设计能力"><a href="#设计能力" class="headerlink" title="设计能力"></a>设计能力</h3><ul>  <li>设计思维</li>  <li>最小可行性产品（MVP）</li>  <li>峰终定律</li>  <li>AARRR漏斗模型</li>  <li>上瘾（HOOK）模型</li></ul><h3 id="共情能力"><a href="#共情能力" class="headerlink" title="共情能力"></a>共情能力</h3><ul>  <li>五大圈层模型</li>  <li>高效倾听模型</li>  <li>情绪ABC模型</li>  <li>乔哈里视窗</li>  <li>冰山模型</li></ul><h3 id="演讲能力"><a href="#演讲能力" class="headerlink" title="演讲能力"></a>演讲能力</h3><ul>  <li>故事五要素</li>  <li>结构表达: SCQA原则</li>  <li>结构阐述：STAR原则</li>  <li>SRAR模型</li>  <li>STORY模型</li>  <li>“英雄之旅”模型</li></ul><h3 id="领导能力"><a href="#领导能力" class="headerlink" title="领导能力"></a>领导能力</h3><ul>  <li>领导力梯队</li>  <li>情景领导力模型</li>  <li>GROW教练模型</li>  <li>管理4C模型</li>  <li>TOPIC模型</li></ul><h3 id="整合能力"><a href="#整合能力" class="headerlink" title="整合能力"></a>整合能力</h3><ul>  <li>杠杆思维</li>  <li>POA行动</li>  <li>系统思维</li>  <li>整合思维模型</li>  <li>多元思维模型</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>既要有“底层逻辑”也要有“顶层设计”。</strong></p><p>事物间的共同点，就是底层逻辑。只有不同之中的相同之处、变化背后不变的东西，才是底层逻辑。<br>只有底层逻辑，才是有生命力的。只有底层逻辑，在我们面临环境变化时，才能被应用到新的变化中，从而产生适应新环境的方法论。所以我们说“底层逻辑+环境变量=方法论”</p><p><strong>以终为始，目标导向。</strong><br>如论是如何思考，何种方法论。最终都是为“问题”所服务的， 切勿<strong>拿着锤子看什么都是钉子！</strong>这并非此文的本意。<br>上述关于“如何思考” 阐述是微观，那么也希望你也能站在更顶层层次看待anythings</p><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><ul>  <li><a href="https://baike.baidu.com/item/%E6%80%9D/53644" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%80%9D/53644</a></li>  <li><a href="https://baike.baidu.com/item/%E8%80%83" target="_blank" rel="noopener">https://baike.baidu.com/item/%E8%80%83</a></li>  <li><a href="https://baike.baidu.com/item/%E6%80%9D%E8%80%83" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%80%9D%E8%80%83</a></li>  <li><a href="https://www.zhihu.com/zvideo/1441425516532748288" target="_blank" rel="noopener">如何才有高效的思考能力</a></li>  <li><a href="https://zhuanlan.zhihu.com/p/379832851" target="_blank" rel="noopener">人人都能变聪明的四个“核武器”</a></li>  <li>《底层逻辑》</li>  <li>《麻省理工深度思考法》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
  &lt;p&gt;思考， 简单却有困难的词。它离我们“近在咫尺”却又似乎“远在天涯”。那究竟什么叫思考？什么是思考？那么该如何思考？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;思考的定义&quot;&gt;&lt;a href=&quot;#思考的定义&quot; class=&quot;headerl
      
    
    </summary>
    
    
    
      <category term="思考" scheme="https://cuiqingcai.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>推荐一个方便好用的 ChatGPT 客户端</title>
    <link href="https://cuiqingcai.com/36065.html"/>
    <id>https://cuiqingcai.com/36065.html</id>
    <published>2022-12-27T11:00:13.000Z</published>
    <updated>2025-08-11T15:24:05.314Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间，想必大家肯定早就领教过 ChatGPT 的威力了吧。</p><p>我们跟它说各种内容，比如写代码、汇总周报、写邮件、写诗句、查百科什么的，ChatGPT 都对答如流，根本不在话下。</p><p>比如说让它基于 Vue3 写一个 div 的拖拽实现，思路清晰，代码正确：</p><p><img src="https://cdn.cuiqingcai.com/64yol.png" alt=""></p><p>比如让它汇总和润色一个周报：</p><p><img src="https://cdn.cuiqingcai.com/el0t3.png" alt=""></p><p>写的还蛮“充实”的感觉的。</p><p>当然还有各种有趣的功能大家去 ChatGPT 继续试试吧～</p><p>那其实这次我要介绍的不是 GhatGPT，而是一个 ChatGPT 的客户端。</p><p>为什么要客户端呢？因为有了客户端我们就不用每次单独开一个浏览器，而且也不会迷失在无数的 TAB 里面了，而且客户端其实基于 ChatGPT 多了一些新的功能。</p><p>让我们来看看吧。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>开门见山，这个客户端的 GitHub 地址是：<a href="https://github.com/lencx/ChatGPT" target="_blank" rel="noopener" title="https://github.com/lencx/ChatGPT">https://github.com/lencx/ChatGPT</a>，支持 Mac、Windows、Linux。</p><p><img src="https://cdn.cuiqingcai.com/8geoi.png" alt=""></p><p>截止写文的时候，客户端已经更新到 0.7.0 版本，支持的功能有：</p><ul>  <li>多平台的支持，Mac、Linux、Windows</li>  <li>支持导出 ChatGPT 的历史，生成图片、PDF、分享连接</li>  <li>自动升级提醒</li>  <li>通用/全局快捷键</li>  <li>系统托盘设定</li>  <li>支持一些快捷命令和配置选项</li></ul><p>下面我们就来看看怎么搞吧。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装其实挺简单的，官网提供了下载安装包，大家可以到这里 <a href="https://github.com/lencx/ChatGPT#-downloads" target="_blank" rel="noopener" title="https://github.com/lencx/ChatGPT#-downloads">https://github.com/lencx/ChatGPT#-downloads</a> 选择自己平台的安装包下载安装。</p><p>我这边是 Mac，安装完了之后会有这样的一个图标：</p><p><img src="https://cdn.cuiqingcai.com/xnyjt.png" alt=""></p><p>打开之后需要让我们注册或登录 OpenAI 的账号。</p><p>界面和 <a href="https://chat.openai.com/" target="_blank" rel="noopener" title="https://chat.openai.com/">https://chat.openai.com/</a> 是一样的，因为客户端其实就是外包了一个网页而已：</p><p><img src="https://cdn.cuiqingcai.com/h0p78.png" alt=""></p><p>需要提醒下的是，如果你从来没用过 GhatGPT，在注册新账号的时候，有一步是验证手机号，这时候如果我们输入国内手机号会被提示“地区不被支持”。这时候建议开全局国外代理，并且使用国外手机号来完成验证。</p><p>这里推荐一个网站 <a href="https://sms-activate.org/" target="_blank" rel="noopener" title="https://sms-activate.org/">https://sms-activate.org/</a>，我们可以花一块钱左右买到一个 OpenAI 验证的手机号接收一次验证码。</p><p>搜索 OpenAI 服务，并选择对应地区即可，我选择的是马来西亚能成功接收到验证码（一开始选了一个印度的但没接收到验证码），而且也挺便宜的。</p><p><img src="https://cdn.cuiqingcai.com/zr2hk.png" alt=""></p><p>就是这样，希望大家能成功注册到一个 ChatGPT 账号。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>接下来就是一些常规操作了，进入之后我们就可以输入各种文字来尝试 ChatGPT 了，比如：</p><p><img src="https://cdn.cuiqingcai.com/oh2wu.png" alt=""></p><p>这时候大家会说，这客户端和网页有啥不一样啊？网页也有这功能啊。</p><p>有的，看图里面，右侧的几个其实就是客户端多出来的功能，分别是生成分享图片、PDF 和链接。</p><p>比如我点一下“生成分享图片”的按钮，就可以生成这样的一个分享图，还蛮不错的：</p><p><img src="https://cdn.cuiqingcai.com/c5e37.png" alt=""></p><p>当然 PDF 也是一样的。</p><h2 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h2><p>当然我觉得客户端更好用的功能在于一个叫快捷命令的功能，我们可以输入一些命令，启用 ChatGPT 的一些功能。</p><p>首先，我们输入一个 <code>/</code> 就能激活快捷命令，如图所示：</p><p><img src="https://cdn.cuiqingcai.com/73ggc.png" alt=""></p><p>我们可以看到，这里已经内置了好多个快捷命令，比如 poet、chef、rapper 等，代表了让 ChatGPT 实现的一些功能。</p><p>比如这里有一个 <code>/javascript_console</code> 的快捷命令：</p><p><img src="https://cdn.cuiqingcai.com/4612e.png" alt=""></p><p>选中之后输入框就会多这么一些文字：</p><blockquote>  <p>I want you to act as a javascript console. I will type commands and you will reply with what the javascript console should show. I want you to only reply with the terminal output inside one unique code block, and nothing else. do not write explanations. do not type commands unless I instruct you to do so. when i need to tell you something in english, i will do so by putting text inside curly brackets {like this}. my first command is console.log(“Hello World”);</p></blockquote><p>大意就是告诉 ChatGPT，我会告诉你一段 JavaScript 代码，你帮我执行并输入结果，然后我的第一个命令是一个 console.log 语句。</p><p>对，就是这样，直接发出去即可：</p><p><img src="https://cdn.cuiqingcai.com/cpwx4.png" alt=""></p><p>然后 ChatGPT 就会按照我们说的来执行了。</p><p><img src="https://cdn.cuiqingcai.com/u4960.png" alt=""></p><p>接着，由于 ChatGPT 有记忆功能，它能知道刚才我们让它干了什么。</p><p>所以接下来，我们就可以接着让它干事情了。</p><p>接着继续输入第二段代码，它就能接着继续输出了：</p><p><img src="https://cdn.cuiqingcai.com/srof6.png" alt=""></p><p>是的，就是这个流程。</p><p>还有很多其他的功能，比如输入 <code>/poem</code> 作诗：</p><p><img src="https://cdn.cuiqingcai.com/idm8d.png" alt=""></p><p>接着我们输入新的作诗要求就可以了：</p><p><img src="https://cdn.cuiqingcai.com/f0hed.png" alt=""></p><p>OK，这下大家应该理解了吧，我们利用了 ChatGPT 的上下文记忆功能，结合一些快捷键，就能快速让 ChatGPT 帮我们完成想要的事情了。</p><p>那所以，如果我们把想要 ChatGPT 做的工作都收录整理下来，那么以后是不是就能直接调用了。</p><p>比如说，我输入一个中文类别的命令 <code>/汇总周报</code>，然后描述好要让它帮我们做什么，接着就可以让它帮我们汇总周报了。</p><p>想的挺好，ChatGPT 客户端可以做到吗？可以！</p><p>我们通过 ChatGPT 的菜单里面打开 ‘Control Center’，就可以看到这样的一个配置界面：</p><p><img src="https://cdn.cuiqingcai.com/cyatj.png" alt=""></p><p>我们可以切换到 Language Model - User Custom 部分，这里我们就可以添加一些自定义指令了。</p><p>比如我这里点击 Add Model 按钮，添加这样的一个指令：</p><p><img src="https://cdn.cuiqingcai.com/b1bcc.png" alt=""></p><p>这里第一个 <code>/{cmd}</code> 就是我们到时候实际敲的命令，<code>Act</code> 就是对命令的一个描述，会出现在命令的描述里面，<code>Prompt</code> 就是告诉 ChatGPT 的话，这里我们需要详细描述一下需要 ChatGPT 做的事情，并给出一个示例。</p><p>编辑好了之后点击保存。</p><p>然后重启下 ChatGPT，这时候我们就可以输入 <code>/汇总周报</code> 命令了：</p><p><img src="https://cdn.cuiqingcai.com/cs9h3.png" alt=""></p><p>然后点击空格转换为实际的文字，然后发出去：</p><p><img src="https://cdn.cuiqingcai.com/uyr10.png" alt=""></p><p>OK，接下来我们就可以让它帮我们整理第二份周报了，而且第二次也不需要告诉他那么多前提了。</p><p><img src="https://cdn.cuiqingcai.com/sqril.png" alt=""></p><p>所以，到现在大家能体会到这个快捷指令的便捷用途了吧，我们可以提前录入好一些要求，然后第二次我们就无需赘述那么多要求，直接输入最直接的要求，ChatGPT 就可以帮我们完成其中的操作了。当然第一次的时候，我们也可以自行替换想要替换的输入文本，同样也可以达成想要的效果。</p><p>有人说？那我应该整理一些什么命令呢？都行呀，比如整理周报、起草邮件、写 Python 代码，都行。</p><p>这里给大家介绍一个资源，叫 awesome-chatgpt-prompts，GitHub 地址是： <a href="https://github.com/f/awesome-chatgpt-prompts" target="_blank" rel="noopener" title="https://github.com/f/awesome-chatgpt-prompts">https://github.com/f/awesome-chatgpt-prompts</a>，这里面汇总了各种快捷命令，大家也可以到里面寻找些灵感，也可以贡献命令到这个 Repo，这样命令就会被自动收录到 ChatGPT 这个客户端里面。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，这次给大家介绍了 ChatGPT 客户端的基本使用，想必 ChatGPT 网页来说，会有如下的几个优点：</p><ul>  <li>独立的窗口运行，不用每次单独打开浏览器，也不会迷失在茫茫的 TAB 里面。</li>  <li>带了额外的转换分享功能，比如生成图片、生成 PDF、分享链接等，这是网页所不具备的功能。</li>  <li>带了便捷的快捷命令功能，利用它我们可以快捷输入想要的命令，并且可以自己管理一些命令，已备后续之需。</li></ul><p>大家可以试用哈，希望这次分享对大家有帮助！</p><p>非常感谢你的阅读，更多精彩内容，请关注我的公众号「进击的 Coder」和「崔庆才丨静觅」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这段时间，想必大家肯定早就领教过 ChatGPT 的威力了吧。&lt;/p&gt;
&lt;p&gt;我们跟它说各种内容，比如写代码、汇总周报、写邮件、写诗句、查百科什么的，ChatGPT 都对答如流，根本不在话下。&lt;/p&gt;
&lt;p&gt;比如说让它基于 Vue3 写一个 div 的拖拽实现，思路清晰，代
      
    
    </summary>
    
    
      <category term="技术杂谈" scheme="https://cuiqingcai.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="工具" scheme="https://cuiqingcai.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="ChatGPT" scheme="https://cuiqingcai.com/tags/ChatGPT/"/>
    
  </entry>
  
</feed>
